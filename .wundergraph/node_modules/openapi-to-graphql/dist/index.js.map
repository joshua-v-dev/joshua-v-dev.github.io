{"version":3,"file":"index.js","sources":["../../dist/openapi-to-graphql/src/types/graphql.js","../../dist/openapi-to-graphql/src/types/operation.js","../../dist/openapi-to-graphql/src/utils.js","../../dist/openapi-to-graphql/src/oas_3_tools.js","../../dist/openapi-to-graphql/src/resolver_builder.js","../../dist/openapi-to-graphql/src/preprocessor.js","../../dist/openapi-to-graphql/src/schema_builder.js","../../dist/openapi-to-graphql/src/graphql_tools.js","../../dist/openapi-to-graphql/src/auth_builder.js","../../dist/openapi-to-graphql/src/index.js"],"sourcesContent":["// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nexport var GraphQLOperationType;\n(function (GraphQLOperationType) {\n    GraphQLOperationType[GraphQLOperationType[\"Query\"] = 0] = \"Query\";\n    GraphQLOperationType[GraphQLOperationType[\"Mutation\"] = 1] = \"Mutation\";\n    GraphQLOperationType[GraphQLOperationType[\"Subscription\"] = 2] = \"Subscription\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nexport var TargetGraphQLType;\n(function (TargetGraphQLType) {\n    // scalars\n    TargetGraphQLType[\"string\"] = \"string\";\n    TargetGraphQLType[\"integer\"] = \"integer\";\n    TargetGraphQLType[\"float\"] = \"float\";\n    TargetGraphQLType[\"boolean\"] = \"boolean\";\n    TargetGraphQLType[\"id\"] = \"id\";\n    TargetGraphQLType[\"bigint\"] = \"bigint\";\n    // JSON\n    TargetGraphQLType[\"json\"] = \"json\";\n    // non-scalars\n    TargetGraphQLType[\"object\"] = \"object\";\n    TargetGraphQLType[\"list\"] = \"list\";\n    TargetGraphQLType[\"enum\"] = \"enum\";\n    TargetGraphQLType[\"anyOfObject\"] = \"anyOfObject\";\n    TargetGraphQLType[\"oneOfUnion\"] = \"oneOfUnion\";\n})(TargetGraphQLType || (TargetGraphQLType = {}));\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nexport var MitigationTypes;\n(function (MitigationTypes) {\n    /**\n     * Problems with the OAS\n     *\n     * Should be caught by the module oas-validator\n     */\n    MitigationTypes[\"INVALID_OAS\"] = \"INVALID_OAS\";\n    MitigationTypes[\"UNNAMED_PARAMETER\"] = \"UNNAMED_PARAMETER\";\n    // General problems\n    MitigationTypes[\"AMBIGUOUS_UNION_MEMBERS\"] = \"AMBIGUOUS_UNION_MEMBERS\";\n    MitigationTypes[\"CANNOT_GET_FIELD_TYPE\"] = \"CANNOT_GET_FIELD_TYPE\";\n    MitigationTypes[\"COMBINE_SCHEMAS\"] = \"COMBINE_SCHEMAS\";\n    MitigationTypes[\"DUPLICATE_FIELD_NAME\"] = \"DUPLICATE_FIELD_NAME\";\n    MitigationTypes[\"DUPLICATE_LINK_KEY\"] = \"DUPLICATE_LINK_KEY\";\n    MitigationTypes[\"INVALID_HTTP_METHOD\"] = \"INVALID_HTTP_METHOD\";\n    MitigationTypes[\"INPUT_UNION\"] = \"INPUT_UNION\";\n    MitigationTypes[\"MISSING_RESPONSE_SCHEMA\"] = \"MISSING_RESPONSE_SCHEMA\";\n    MitigationTypes[\"MISSING_SCHEMA\"] = \"MISSING_SCHEMA\";\n    MitigationTypes[\"MULTIPLE_RESPONSES\"] = \"MULTIPLE_RESPONSES\";\n    MitigationTypes[\"NON_APPLICATION_JSON_SCHEMA\"] = \"NON_APPLICATION_JSON_SCHEMA\";\n    MitigationTypes[\"OBJECT_MISSING_PROPERTIES\"] = \"OBJECT_MISSING_PROPERTIES\";\n    MitigationTypes[\"UNKNOWN_TARGET_TYPE\"] = \"UNKNOWN_TARGET_TYPE\";\n    MitigationTypes[\"UNRESOLVABLE_SCHEMA\"] = \"UNRESOLVABLE_SCHEMA\";\n    MitigationTypes[\"UNSUPPORTED_HTTP_SECURITY_SCHEME\"] = \"UNSUPPORTED_HTTP_SECURITY_SCHEME\";\n    MitigationTypes[\"UNSUPPORTED_JSON_SCHEMA_KEYWORD\"] = \"UNSUPPORTED_JSON_SCHEMA_KEYWORD\";\n    MitigationTypes[\"CALLBACKS_MULTIPLE_OPERATION_OBJECTS\"] = \"CALLBACKS_MULTIPLE_OPERATION_OBJECTS\";\n    // Links\n    MitigationTypes[\"AMBIGUOUS_LINK\"] = \"AMBIGUOUS_LINK\";\n    MitigationTypes[\"LINK_NAME_COLLISION\"] = \"LINK_NAME_COLLISION\";\n    MitigationTypes[\"UNRESOLVABLE_LINK\"] = \"UNRESOLVABLE_LINK\";\n    // Multiple OAS\n    MitigationTypes[\"DUPLICATE_OPERATIONID\"] = \"DUPLICATE_OPERATIONID\";\n    MitigationTypes[\"DUPLICATE_SECURITY_SCHEME\"] = \"DUPLICATE_SECURITY_SCHEME\";\n    MitigationTypes[\"MULTIPLE_OAS_SAME_TITLE\"] = \"MULTIPLE_OAS_SAME_TITLE\";\n    // Options\n    MitigationTypes[\"CUSTOM_RESOLVER_UNKNOWN_OAS\"] = \"CUSTOM_RESOLVER_UNKNOWN_OAS\";\n    MitigationTypes[\"CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD\"] = \"CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD\";\n    MitigationTypes[\"LIMIT_ARGUMENT_NAME_COLLISION\"] = \"LIMIT_ARGUMENT_NAME_COLLISION\";\n    // Miscellaneous\n    MitigationTypes[\"OAUTH_SECURITY_SCHEME\"] = \"OAUTH_SECURITY_SCHEME\";\n})(MitigationTypes || (MitigationTypes = {}));\nexport const mitigations = {\n    /**\n     * Problems with the OAS\n     *\n     * Should be caught by the module oas-validator\n     */\n    INVALID_OAS: 'Ignore issue and continue.',\n    UNNAMED_PARAMETER: 'Ignore parameter.',\n    // General problems\n    AMBIGUOUS_UNION_MEMBERS: 'Ignore issue and continue.',\n    CANNOT_GET_FIELD_TYPE: 'Ignore field and continue.',\n    COMBINE_SCHEMAS: 'Ignore combine schema keyword and continue.',\n    DUPLICATE_FIELD_NAME: 'Ignore field and maintain preexisting field.',\n    DUPLICATE_LINK_KEY: 'Ignore link and maintain preexisting link.',\n    INPUT_UNION: 'The data will be stored in an arbitrary JSON type.',\n    INVALID_HTTP_METHOD: 'Ignore operation and continue.',\n    MISSING_RESPONSE_SCHEMA: 'Ignore operation.',\n    MISSING_SCHEMA: 'Use arbitrary JSON type.',\n    MULTIPLE_RESPONSES: 'Select first response object with successful status code (200-299).',\n    NON_APPLICATION_JSON_SCHEMA: 'Ignore schema',\n    OBJECT_MISSING_PROPERTIES: 'The (sub-)object will be stored in an arbitrary JSON type.',\n    UNKNOWN_TARGET_TYPE: 'The data will be stored in an arbitrary JSON type.',\n    UNRESOLVABLE_SCHEMA: 'Ignore and continue. May lead to unexpected behavior.',\n    UNSUPPORTED_HTTP_SECURITY_SCHEME: 'Ignore security scheme.',\n    UNSUPPORTED_JSON_SCHEMA_KEYWORD: 'Ignore keyword and continue.',\n    CALLBACKS_MULTIPLE_OPERATION_OBJECTS: 'Select arbitrary operation object',\n    // Links\n    AMBIGUOUS_LINK: `Use first occurance of '#/'.`,\n    LINK_NAME_COLLISION: 'Ignore link and maintain preexisting field.',\n    UNRESOLVABLE_LINK: 'Ignore link.',\n    // Multiple OAS\n    DUPLICATE_OPERATIONID: 'Ignore operation and maintain preexisting operation.',\n    DUPLICATE_SECURITY_SCHEME: 'Ignore security scheme and maintain preexisting scheme.',\n    MULTIPLE_OAS_SAME_TITLE: 'Ignore issue and continue.',\n    // Options\n    CUSTOM_RESOLVER_UNKNOWN_OAS: 'Ignore this set of custom resolvers.',\n    CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD: 'Ignore this set of custom resolvers.',\n    LIMIT_ARGUMENT_NAME_COLLISION: `Do not override existing 'limit' argument.`,\n    // Miscellaneous\n    OAUTH_SECURITY_SCHEME: `Do not create OAuth viewer. OAuth support is provided using the 'tokenJSONpath' option.`\n};\n/**\n * Utilities that are specific to OpenAPI-to-GraphQL\n */\nexport function handleWarning({ mitigationType, message, mitigationAddendum, path, data, log }) {\n    const mitigation = mitigations[mitigationType];\n    const warning = {\n        type: mitigationType,\n        message,\n        mitigation: mitigationAddendum\n            ? `${mitigation} ${mitigationAddendum}`\n            : mitigation\n    };\n    if (path) {\n        warning['path'] = path;\n    }\n    if (data.options.strict) {\n        throw new Error(`${warning.type} - ${warning.message}`);\n    }\n    else {\n        const output = `Warning: ${warning.message} - ${warning.mitigation}`;\n        if (typeof log === 'function') {\n            log(output);\n        }\n        else {\n            console.log(output);\n        }\n        data.options.report.warnings.push(warning);\n    }\n}\n// Code provided by codename- from StackOverflow\n// Link: https://stackoverflow.com/a/29622653\nexport function sortObject(o) {\n    return Object.keys(o)\n        .sort()\n        .reduce((r, k) => ((r[k] = o[k]), r), {});\n}\n/**\n * Finds the common property names between two objects\n */\nexport function getCommonPropertyNames(object1, object2) {\n    return Object.keys(object1).filter((propertyName) => {\n        return propertyName in object2;\n    });\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { TargetGraphQLType } from './types/operation';\n// Imports:\nimport * as Swagger2OpenAPI from 'swagger2openapi';\nimport * as OASValidator from 'oas-validator';\nimport debug from 'debug';\nimport { handleWarning, MitigationTypes } from './utils';\nimport * as jsonptr from 'json-ptr';\nimport * as pluralize from 'pluralize';\nconst httpLog = debug('http');\nconst preprocessingLog = debug('preprocessing');\nconst translationLog = debug('translation');\n// OAS constants\nexport var HTTP_METHODS;\n(function (HTTP_METHODS) {\n    HTTP_METHODS[\"get\"] = \"get\";\n    HTTP_METHODS[\"put\"] = \"put\";\n    HTTP_METHODS[\"post\"] = \"post\";\n    HTTP_METHODS[\"patch\"] = \"patch\";\n    HTTP_METHODS[\"delete\"] = \"delete\";\n    HTTP_METHODS[\"options\"] = \"options\";\n    HTTP_METHODS[\"head\"] = \"head\";\n})(HTTP_METHODS || (HTTP_METHODS = {}));\nexport const SUCCESS_STATUS_RX = /2[0-9]{2}|2XX/;\nexport var OAS_GRAPHQL_EXTENSIONS;\n(function (OAS_GRAPHQL_EXTENSIONS) {\n    OAS_GRAPHQL_EXTENSIONS[\"TypeName\"] = \"x-graphql-type-name\";\n    OAS_GRAPHQL_EXTENSIONS[\"FieldName\"] = \"x-graphql-field-name\";\n    OAS_GRAPHQL_EXTENSIONS[\"EnumMapping\"] = \"x-graphql-enum-mapping\";\n})(OAS_GRAPHQL_EXTENSIONS || (OAS_GRAPHQL_EXTENSIONS = {}));\n/**\n * Given an HTTP method, convert it to the HTTP_METHODS enum\n */\nexport function methodToHttpMethod(method) {\n    switch (method.toLowerCase()) {\n        case 'get':\n            return HTTP_METHODS.get;\n        case 'put':\n            return HTTP_METHODS.put;\n        case 'post':\n            return HTTP_METHODS.post;\n        case 'patch':\n            return HTTP_METHODS.patch;\n        case 'delete':\n            return HTTP_METHODS.delete;\n        case 'options':\n            return HTTP_METHODS.options;\n        case 'head':\n            return HTTP_METHODS.head;\n        default:\n            throw new Error(`Invalid HTTP method '${method}'`);\n    }\n}\nexport function isOas2(spec) {\n    return typeof spec.swagger === 'string' && /^2/.test(spec.swagger);\n}\nexport function isOas3(spec) {\n    return typeof spec.openapi === 'string' && /^3/.test(spec.openapi);\n}\n/**\n * Resolves on a validated OAS 3 for the given spec (OAS 2 or OAS 3), or rejects\n * if errors occur.\n */\nexport async function getValidOAS3(spec, oasValidatorOptions, swagger2OpenAPIOptions) {\n    // CASE: translate\n    if (isOas2(spec)) {\n        preprocessingLog(`Received Swagger - going to translate to OpenAPI Specification...`);\n        try {\n            const { openapi } = await Swagger2OpenAPI.convertObj(spec, swagger2OpenAPIOptions);\n            return openapi;\n        }\n        catch (error) {\n            throw new Error(`Could not convert Swagger '${spec.info.title}' to OpenAPI Specification. ${error.message}`);\n        }\n        // CASE: validate\n    }\n    else if (isOas3(spec)) {\n        preprocessingLog(`Received OpenAPI Specification - going to validate...`);\n        await OASValidator.validate(spec, oasValidatorOptions);\n    }\n    else {\n        throw new Error(`Invalid specification provided`);\n    }\n    return spec;\n}\n/**\n * Counts the number of operations in an OAS.\n */\nexport function countOperations(oas) {\n    let numOps = 0;\n    for (let path in oas.paths) {\n        for (let method in oas.paths[path]) {\n            if (isHttpMethod(method)) {\n                numOps++;\n                if (oas.paths[path][method].callbacks) {\n                    for (let cbName in oas.paths[path][method].callbacks) {\n                        for (let cbPath in oas.paths[path][method].callbacks[cbName]) {\n                            numOps++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations that translate to queries in an OAS.\n */\nexport function countOperationsQuery(oas) {\n    let numOps = 0;\n    for (let path in oas.paths) {\n        for (let method in oas.paths[path]) {\n            if (isHttpMethod(method) && method.toLowerCase() === HTTP_METHODS.get) {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations that translate to mutations in an OAS.\n */\nexport function countOperationsMutation(oas) {\n    let numOps = 0;\n    for (let path in oas.paths) {\n        for (let method in oas.paths[path]) {\n            if (isHttpMethod(method) && method.toLowerCase() !== HTTP_METHODS.get) {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations that translate to subscriptions in an OAS.\n */\nexport function countOperationsSubscription(oas) {\n    let numOps = 0;\n    for (let path in oas.paths) {\n        for (let method in oas.paths[path]) {\n            if (isHttpMethod(method) &&\n                method.toLowerCase() !== HTTP_METHODS.get &&\n                oas.paths[path][method].callbacks) {\n                for (let cbName in oas.paths[path][method].callbacks) {\n                    for (let cbPath in oas.paths[path][method].callbacks[cbName]) {\n                        numOps++;\n                    }\n                }\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations with a payload definition in an OAS.\n */\nexport function countOperationsWithPayload(oas) {\n    let numOps = 0;\n    for (let path in oas.paths) {\n        for (let method in oas.paths[path]) {\n            if (isHttpMethod(method) &&\n                typeof oas.paths[path][method].requestBody === 'object') {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Resolves the given reference in the given object.\n */\nexport function resolveRef(ref, oas) {\n    return jsonptr.JsonPointer.get(oas, ref);\n}\n/**\n * Returns the base URL to use for the given operation.\n */\nexport function getBaseUrl(operation) {\n    // Check for servers:\n    if (!Array.isArray(operation.servers) || operation.servers.length === 0) {\n        throw new Error(`No servers defined for operation '${operation.operationString}'`);\n    }\n    // Check for local servers\n    if (Array.isArray(operation.servers) && operation.servers.length > 0) {\n        const url = buildUrl(operation.servers[0]);\n        if (Array.isArray(operation.servers) && operation.servers.length > 1) {\n            httpLog(`Warning: Randomly selected first server '${url}'`);\n        }\n        return url.replace(/\\/$/, '');\n    }\n    const oas = operation.oas;\n    if (Array.isArray(oas.servers) && oas.servers.length > 0) {\n        const url = buildUrl(oas.servers[0]);\n        if (Array.isArray(oas.servers) && oas.servers.length > 1) {\n            httpLog(`Warning: Randomly selected first server '${url}'`);\n        }\n        return url.replace(/\\/$/, '');\n    }\n    throw new Error('Cannot find a server to call');\n}\n/**\n * Returns the default URL for a given OAS server object.\n */\nfunction buildUrl(server) {\n    let url = server.url;\n    // Replace with variable defaults, if applicable\n    if (typeof server.variables === 'object' &&\n        Object.keys(server.variables).length > 0) {\n        for (let variableKey in server.variables) {\n            // TODO: check for default? Would be invalid OAS\n            url = url.replace(`{${variableKey}}`, server.variables[variableKey].default.toString());\n        }\n    }\n    return url;\n}\n/**\n * Returns object/array/scalar where all object keys (if applicable) are\n * sanitized.\n */\nexport function sanitizeObjectKeys(obj, // obj does not necessarily need to be an object\ncaseStyle = CaseStyle.camelCase) {\n    const cleanKeys = (obj) => {\n        // Case: no (response) data\n        if (obj === null || typeof obj === 'undefined') {\n            return null;\n            // Case: array\n        }\n        else if (Array.isArray(obj)) {\n            return obj.map(cleanKeys);\n            // Case: object\n        }\n        else if (typeof obj === 'object') {\n            const res = {};\n            for (const key in obj) {\n                const saneKey = sanitize(key, caseStyle);\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    res[saneKey] = cleanKeys(obj[key]);\n                }\n            }\n            return res;\n            // Case: scalar\n        }\n        else {\n            return obj;\n        }\n    };\n    return cleanKeys(obj);\n}\n/**\n * Desanitizes keys in given object by replacing them with the keys stored in\n * the given mapping.\n */\nexport function desanitizeObjectKeys(obj, mapping = {}) {\n    const replaceKeys = (obj) => {\n        if (obj === null) {\n            return null;\n        }\n        else if (Array.isArray(obj)) {\n            return obj.map(replaceKeys);\n        }\n        else if (typeof obj === 'object') {\n            const res = {};\n            for (let key in obj) {\n                if (key in mapping) {\n                    const rawKey = mapping[key];\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        res[rawKey] = replaceKeys(obj[key]);\n                    }\n                }\n                else {\n                    res[key] = replaceKeys(obj[key]);\n                }\n            }\n            return res;\n        }\n        else {\n            return obj;\n        }\n    };\n    return replaceKeys(obj);\n}\n/**\n * Returns the GraphQL type that the provided schema should be made into\n */\nexport function getSchemaTargetGraphQLType(schemaOrRef, data, oas) {\n    let schema;\n    if ('$ref' in schemaOrRef && typeof schemaOrRef.$ref === 'string') {\n        schema = resolveRef(schemaOrRef.$ref, oas);\n    }\n    else {\n        schema = schemaOrRef;\n    }\n    // TODO: Need to resolve allOf here as well.\n    // CASE: Check for nested or concurrent anyOf and oneOf\n    if (\n    // TODO: Should also consider if the member schema contains type data\n    (Array.isArray(schema.anyOf) && Array.isArray(schema.oneOf)) || // anyOf and oneOf used concurrently\n        hasNestedAnyOfUsage(schema, oas) ||\n        hasNestedOneOfUsage(schema, oas)) {\n        handleWarning({\n            mitigationType: MitigationTypes.COMBINE_SCHEMAS,\n            message: `Schema '${JSON.stringify(schema)}' contains either both ` +\n                `'anyOf' and 'oneOf' or nested 'anyOf' and 'oneOf' which ` +\n                `is currently not supported.`,\n            mitigationAddendum: `Use arbitrary JSON type instead.`,\n            data,\n            log: preprocessingLog\n        });\n        return TargetGraphQLType.json;\n    }\n    if (Array.isArray(schema.anyOf)) {\n        return GetAnyOfTargetGraphQLType(schema, data, oas);\n    }\n    if (Array.isArray(schema.oneOf)) {\n        return GetOneOfTargetGraphQLType(schema, data, oas);\n    }\n    // CASE: enum\n    if (Array.isArray(schema.enum)) {\n        return TargetGraphQLType.enum;\n    }\n    // CASE: object\n    if (schema.type === 'object' || typeof schema.properties === 'object') {\n        // TODO: additionalProperties is more like a flag than a type itself\n        // CASE: arbitrary JSON\n        if (typeof schema.additionalProperties === 'object') {\n            return TargetGraphQLType.json;\n        }\n        else {\n            return TargetGraphQLType.object;\n        }\n    }\n    // CASE: array\n    if (schema.type === 'array' || 'items' in schema) {\n        return TargetGraphQLType.list;\n    }\n    // Special edge cases involving the schema format\n    if (typeof schema.format === 'string') {\n        if (schema.type === 'integer' && schema.format === 'int64') {\n            return TargetGraphQLType.bigint;\n            // CASE: id\n        }\n        else if (schema.type === 'string' &&\n            (schema.format === 'uuid' ||\n                // Custom ID format\n                (Array.isArray(data.options.idFormats) &&\n                    data.options.idFormats.includes(schema.format)))) {\n            return TargetGraphQLType.id;\n        }\n    }\n    switch (schema.type) {\n        case 'string':\n            return TargetGraphQLType.string;\n        case 'number':\n            return TargetGraphQLType.float;\n        case 'integer':\n            return TargetGraphQLType.integer;\n        case 'boolean':\n            return TargetGraphQLType.boolean;\n        default:\n        // Error: unsupported schema type\n    }\n    return null;\n}\n/**\n * Check to see if there are cases of nested oneOf fields in the member schemas\n *\n * We currently cannot handle complex cases of oneOf and anyOf\n */\nfunction hasNestedOneOfUsage(schema, oas) {\n    // TODO: Should also consider if the member schema contains type data\n    return (Array.isArray(schema.oneOf) &&\n        schema.oneOf.some((memberSchemaOrRef) => {\n            let memberSchema;\n            if ('$ref' in memberSchemaOrRef &&\n                typeof memberSchemaOrRef.$ref === 'string') {\n                memberSchema = resolveRef(memberSchemaOrRef.$ref, oas);\n            }\n            else {\n                memberSchema = memberSchemaOrRef;\n            }\n            return (\n            /**\n             * anyOf and oneOf are nested\n             *\n             * Nested oneOf would result in nested unions which are not allowed by\n             * GraphQL\n             */\n            Array.isArray(memberSchema.anyOf) || Array.isArray(memberSchema.oneOf));\n        }));\n}\n/**\n * Check to see if there are cases of nested anyOf fields in the member schemas\n *\n * We currently cannot handle complex cases of oneOf and anyOf\n */\nfunction hasNestedAnyOfUsage(schema, oas) {\n    // TODO: Should also consider if the member schema contains type data\n    return (Array.isArray(schema.anyOf) &&\n        schema.anyOf.some((memberSchemaOrRef) => {\n            let memberSchema;\n            if ('$ref' in memberSchemaOrRef &&\n                typeof memberSchemaOrRef.$ref === 'string') {\n                memberSchema = resolveRef(memberSchemaOrRef.$ref, oas);\n            }\n            else {\n                memberSchema = memberSchemaOrRef;\n            }\n            return (\n            // anyOf and oneOf are nested\n            Array.isArray(memberSchema.anyOf) || Array.isArray(memberSchema.oneOf));\n        }));\n}\nfunction GetAnyOfTargetGraphQLType(schema, data, oas) {\n    // Identify the type of the base schema, meaning ignoring the anyOf\n    const schemaWithNoAnyOf = { ...schema };\n    delete schemaWithNoAnyOf.anyOf;\n    const baseTargetType = getSchemaTargetGraphQLType(schemaWithNoAnyOf, data, oas);\n    // Target GraphQL types of all the member schemas\n    const memberTargetTypes = [];\n    schema.anyOf.forEach((memberSchema) => {\n        const memberTargetType = getSchemaTargetGraphQLType(memberSchema, data, oas);\n        if (memberTargetType !== null) {\n            memberTargetTypes.push(memberTargetType);\n        }\n    });\n    if (memberTargetTypes.length > 0) {\n        const firstMemberTargetType = memberTargetTypes[0];\n        const consistentMemberTargetTypes = memberTargetTypes.every((targetType) => {\n            return targetType === firstMemberTargetType;\n        });\n        if (consistentMemberTargetTypes) {\n            if (baseTargetType !== null) {\n                if (baseTargetType === firstMemberTargetType) {\n                    if (baseTargetType === 'object') {\n                        // Base schema and member schema types are object types\n                        return TargetGraphQLType.anyOfObject;\n                    }\n                    else {\n                        // Base schema and member schema types but no object types\n                        return baseTargetType;\n                    }\n                }\n                else {\n                    // Base schema and member schema types are not consistent\n                    return TargetGraphQLType.json;\n                }\n            }\n            else {\n                if (firstMemberTargetType === TargetGraphQLType.object) {\n                    return TargetGraphQLType.anyOfObject;\n                }\n                else {\n                    return firstMemberTargetType;\n                }\n            }\n        }\n        else {\n            // Member schema types are not consistent\n            return TargetGraphQLType.json;\n        }\n    }\n    else {\n        // No member schema types, therefore use the base schema type\n        return baseTargetType;\n    }\n}\nfunction GetOneOfTargetGraphQLType(schema, data, oas) {\n    // Identify the type of the base schema, meaning ignoring the oneOf\n    const schemaWithNoOneOf = { ...schema };\n    delete schemaWithNoOneOf.oneOf;\n    const baseTargetType = getSchemaTargetGraphQLType(schemaWithNoOneOf, data, oas);\n    // Target GraphQL types of all the member schemas\n    const memberTargetTypes = [];\n    schema.oneOf.forEach((memberSchema) => {\n        const memberTargetType = getSchemaTargetGraphQLType(memberSchema, data, oas);\n        if (memberTargetType !== null) {\n            memberTargetTypes.push(memberTargetType);\n        }\n    });\n    if (memberTargetTypes.length > 0) {\n        const firstMemberTargetType = memberTargetTypes[0];\n        const consistentMemberTargetTypes = memberTargetTypes.every((targetType) => {\n            return targetType === firstMemberTargetType;\n        });\n        if (consistentMemberTargetTypes) {\n            if (baseTargetType !== null) {\n                if (baseTargetType === firstMemberTargetType) {\n                    if (baseTargetType === 'object') {\n                        // Base schema and member schema types are object types\n                        return TargetGraphQLType.oneOfUnion;\n                    }\n                    else {\n                        // Base schema and member schema types but no object types\n                        return baseTargetType;\n                    }\n                }\n                else {\n                    // Base schema and member schema types are not consistent\n                    return TargetGraphQLType.json;\n                }\n            }\n            else {\n                if (firstMemberTargetType === TargetGraphQLType.object) {\n                    return TargetGraphQLType.oneOfUnion;\n                }\n                else {\n                    return firstMemberTargetType;\n                }\n            }\n        }\n        else {\n            // Member schema types are not consistent\n            return TargetGraphQLType.json;\n        }\n    }\n    else {\n        // No member schema types, therefore use the base schema type\n        return baseTargetType;\n    }\n}\n/**\n * Identifies common path components in the given list of paths. Returns these\n * components as well as an updated list of paths where the common prefix was\n * removed.\n */\nfunction extractBasePath(paths) {\n    if (paths.length <= 1) {\n        return {\n            basePath: '/',\n            updatedPaths: paths\n        };\n    }\n    let basePathComponents = paths[0].split('/');\n    for (let path of paths) {\n        if (basePathComponents.length === 0) {\n            break;\n        }\n        const pathComponents = path.split('/');\n        for (let i = 0; i < pathComponents.length; i++) {\n            if (i < basePathComponents.length) {\n                if (pathComponents[i] !== basePathComponents[i]) {\n                    basePathComponents = basePathComponents.slice(0, i);\n                }\n            }\n            else {\n                break;\n            }\n        }\n    }\n    const updatedPaths = paths.map((path) => path.split('/').slice(basePathComponents.length).join('/'));\n    let basePath = basePathComponents.length === 0 ||\n        (basePathComponents.length === 1 && basePathComponents[0] === '')\n        ? '/'\n        : basePathComponents.join('/');\n    return {\n        basePath,\n        updatedPaths\n    };\n}\nfunction isIdParam(part) {\n    return /^{.*(id|name|key).*}$/gi.test(part);\n}\nfunction isSingularParam(part, nextPart) {\n    return `\\{${pluralize.singular(part)}\\}` === nextPart;\n}\n/**\n * Infers a resource name from the given URL path.\n *\n * For example, turns \"/users/{userId}/car\" into \"userCar\".\n */\nexport function inferResourceNameFromPath(path) {\n    const parts = path.split('/');\n    let pathNoPathParams = parts.reduce((path, part, i) => {\n        if (!/{/g.test(part)) {\n            if (parts[i + 1] &&\n                (isIdParam(parts[i + 1]) || isSingularParam(part, parts[i + 1]))) {\n                return path + capitalize(pluralize.singular(part));\n            }\n            else {\n                return path + capitalize(part);\n            }\n        }\n        else {\n            return path;\n        }\n    }, '');\n    return pathNoPathParams;\n}\n/**\n * Returns the request schema (if any) for the given operation,\n * a dictionary of names from different sources (if available), and whether the\n * request schema is required for the operation.\n */\nexport function getRequestSchemaAndNames(path, method, operation, oas) {\n    var _a;\n    let payloadContentType; // randomly selected content-type, prioritizing application/json\n    let requestBodyObject; // request object\n    let payloadSchema; // request schema with given content-type\n    let payloadSchemaNames; // dictionary of names\n    let payloadRequired = false;\n    // Get request body\n    const requestBodyObjectOrRef = operation === null || operation === void 0 ? void 0 : operation.requestBody;\n    if (typeof requestBodyObjectOrRef === 'object' &&\n        requestBodyObjectOrRef !== null) {\n        // Resolve reference if applicable. Make sure we have a RequestBodyObject:\n        if ('$ref' in requestBodyObjectOrRef &&\n            typeof requestBodyObjectOrRef.$ref === 'string') {\n            requestBodyObject = resolveRef(requestBodyObjectOrRef.$ref, oas);\n        }\n        else {\n            requestBodyObject = requestBodyObjectOrRef;\n        }\n        if (typeof requestBodyObject === 'object' && requestBodyObject !== null) {\n            // Determine if request body is required:\n            payloadRequired =\n                typeof (requestBodyObject === null || requestBodyObject === void 0 ? void 0 : requestBodyObject.required) === 'boolean'\n                    ? requestBodyObject === null || requestBodyObject === void 0 ? void 0 : requestBodyObject.required\n                    : false;\n            // Determine content-type\n            const content = requestBodyObject === null || requestBodyObject === void 0 ? void 0 : requestBodyObject.content;\n            if (typeof content === 'object' &&\n                content !== null &&\n                Object.keys(content).length > 0) {\n                // Prioritize content-type JSON\n                if ('application/json' in content) {\n                    payloadContentType = 'application/json';\n                }\n                else if ('application/x-www-form-urlencoded' in content) {\n                    payloadContentType = 'application/x-www-form-urlencoded';\n                }\n                else {\n                    // Pick first (random) content type\n                    const randomContentType = Object.keys(content)[0];\n                    payloadContentType = randomContentType;\n                }\n                if (payloadContentType === 'application/json' ||\n                    payloadContentType === '*/*' ||\n                    payloadContentType === 'application/x-www-form-urlencoded') {\n                    // Name extracted from a reference, if applicable\n                    let fromRef;\n                    // Determine payload schema\n                    const payloadSchemaOrRef = (_a = content === null || content === void 0 ? void 0 : content[payloadContentType]) === null || _a === void 0 ? void 0 : _a.schema;\n                    if (typeof payloadSchemaOrRef === 'object' &&\n                        payloadSchemaOrRef !== null) {\n                        // Resolve payload schema reference if applicable\n                        if ('$ref' in payloadSchemaOrRef &&\n                            typeof payloadSchemaOrRef.$ref === 'string') {\n                            fromRef = payloadSchemaOrRef.$ref.split('/').pop();\n                            payloadSchema = resolveRef(payloadSchemaOrRef.$ref, oas);\n                        }\n                        else {\n                            payloadSchema = payloadSchemaOrRef;\n                        }\n                    }\n                    // Determine possible schema names\n                    payloadSchemaNames = {\n                        fromExtension: payloadSchema[OAS_GRAPHQL_EXTENSIONS.TypeName],\n                        fromRef,\n                        fromSchema: payloadSchema === null || payloadSchema === void 0 ? void 0 : payloadSchema.title,\n                        fromPath: inferResourceNameFromPath(path)\n                    };\n                    /**\n                     * Edge case: if request body content-type is not application/json or\n                     * application/x-www-form-urlencoded, do not parse it.\n                     *\n                     * Instead, treat the request body as a black box and send it as a string\n                     * with the proper content-type header\n                     */\n                }\n                else {\n                    const saneContentTypeName = uncapitalize(payloadContentType.split('/').reduce((name, term) => {\n                        return name + capitalize(term);\n                    }));\n                    let description = `String represents payload of content type '${payloadContentType}'`;\n                    if (typeof (payloadSchema === null || payloadSchema === void 0 ? void 0 : payloadSchema.description) === 'string') {\n                        description += `\\n\\nOriginal top level description: '${payloadSchema.description}'`;\n                    }\n                    // Replacement schema to avoid parsing\n                    payloadSchema = {\n                        description,\n                        type: 'string'\n                    };\n                    // Determine possible schema names\n                    payloadSchemaNames = {\n                        fromPath: saneContentTypeName\n                    };\n                }\n            }\n        }\n    }\n    return {\n        payloadContentType,\n        payloadSchema,\n        payloadSchemaNames,\n        payloadRequired\n    };\n}\n/**\n * Returns the response schema for the given operation,\n * a successful status code, and a dictionary of names from different sources\n * (if available).\n */\nexport function getResponseSchemaAndNames(path, method, operation, oas, data, options) {\n    var _a, _b, _c;\n    let responseContentType; // randomly selected content-type, prioritizing application/json\n    let responseObject; // response object\n    let responseSchema; // response schema with given content-type\n    let responseSchemaNames; // dictionary of names\n    const statusCode = getResponseStatusCode(path, method, operation, oas, data);\n    // Get response object\n    const responseObjectOrRef = (_a = operation === null || operation === void 0 ? void 0 : operation.responses) === null || _a === void 0 ? void 0 : _a[statusCode];\n    if (typeof responseObjectOrRef === 'object' && responseObjectOrRef !== null) {\n        if ('$ref' in responseObjectOrRef &&\n            typeof responseObjectOrRef.$ref === 'string') {\n            responseObject = resolveRef(responseObjectOrRef.$ref, oas);\n        }\n        else {\n            responseObject = responseObjectOrRef;\n        }\n        // Determine content-type\n        if (typeof responseObject === 'object' && responseObject !== null) {\n            const content = responseObject === null || responseObject === void 0 ? void 0 : responseObject.content;\n            if (typeof content === 'object' &&\n                content !== null &&\n                Object.keys(content).length > 0) {\n                // Prioritize content-type JSON\n                if ('application/json' in content) {\n                    responseContentType = 'application/json';\n                }\n                else {\n                    // Pick first (random) content type\n                    const randomContentType = Object.keys(content)[0];\n                    responseContentType = randomContentType;\n                }\n                if (responseContentType === 'application/json' ||\n                    responseContentType === '*/*') {\n                    // Name from reference, if applicable\n                    let fromRef;\n                    // Determine response schema\n                    const responseSchemaOrRef = (_c = (_b = responseObject === null || responseObject === void 0 ? void 0 : responseObject.content) === null || _b === void 0 ? void 0 : _b[responseContentType]) === null || _c === void 0 ? void 0 : _c.schema;\n                    // Resolve response schema reference if applicable\n                    if ('$ref' in responseSchemaOrRef &&\n                        typeof responseSchemaOrRef.$ref === 'string') {\n                        fromRef = responseSchemaOrRef.$ref.split('/').pop();\n                        responseSchema = resolveRef(responseSchemaOrRef.$ref, oas);\n                    }\n                    else {\n                        responseSchema = responseSchemaOrRef;\n                    }\n                    // Determine possible schema names\n                    responseSchemaNames = {\n                        fromExtension: responseSchema[OAS_GRAPHQL_EXTENSIONS.TypeName],\n                        fromRef,\n                        fromSchema: responseSchema === null || responseSchema === void 0 ? void 0 : responseSchema.title,\n                        fromPath: inferResourceNameFromPath(path)\n                    };\n                    /**\n                     * Edge case: if response body content-type is not application/json,\n                     * do not parse.\n                     */\n                }\n                else {\n                    let description = 'Placeholder to access non-application/json response bodies';\n                    if (typeof (responseSchema === null || responseSchema === void 0 ? void 0 : responseSchema.description) === 'string') {\n                        description += `\\n\\nOriginal top level description: '${responseSchema.description}'`;\n                    }\n                    // Replacement schema to avoid parsing\n                    responseSchema = {\n                        description,\n                        type: 'string'\n                    };\n                    // Determine possible schema names\n                    responseSchemaNames = {\n                        fromExtension: responseSchema === null || responseSchema === void 0 ? void 0 : responseSchema[OAS_GRAPHQL_EXTENSIONS.TypeName],\n                        fromSchema: responseSchema === null || responseSchema === void 0 ? void 0 : responseSchema.title,\n                        fromPath: inferResourceNameFromPath(path)\n                    };\n                }\n                return {\n                    responseContentType,\n                    responseSchema,\n                    responseSchemaNames,\n                    statusCode\n                };\n            }\n        }\n    }\n    // No response schema\n    if (options.fillEmptyResponses) {\n        return {\n            responseSchemaNames: {\n                fromPath: inferResourceNameFromPath(path)\n            },\n            responseSchema: {\n                description: 'Placeholder to support operations with no response schema',\n                type: 'string'\n            }\n        };\n    }\n    else {\n        return {};\n    }\n}\n/**\n * Returns a success status code for the given operation\n */\nexport function getResponseStatusCode(path, method, operation, oas, data) {\n    if (typeof operation.responses === 'object' && operation.responses !== null) {\n        const codes = Object.keys(operation.responses);\n        const successCodes = codes.filter((code) => {\n            return SUCCESS_STATUS_RX.test(code);\n        });\n        if (successCodes.length === 1) {\n            return successCodes[0];\n        }\n        else if (successCodes.length > 1) {\n            // Select a random success code\n            handleWarning({\n                mitigationType: MitigationTypes.MULTIPLE_RESPONSES,\n                message: `Operation '${formatOperationString(method, path, oas.info.title)}' ` +\n                    `contains multiple possible successful response object ` +\n                    `(HTTP code 200-299 or 2XX). Only one can be chosen.`,\n                mitigationAddendum: `The response object with the HTTP code ` +\n                    `${successCodes[0]} will be selected`,\n                data,\n                log: translationLog\n            });\n            return successCodes[0];\n        }\n    }\n}\n/**\n * Returns a hash containing the links in the given operation.\n */\nexport function getLinks(path, method, operation, oas, data) {\n    const links = {};\n    const statusCode = getResponseStatusCode(path, method, operation, oas, data);\n    if (!statusCode) {\n        return links;\n    }\n    if (typeof operation.responses === 'object') {\n        const responses = operation.responses;\n        if (typeof responses[statusCode] === 'object') {\n            const responseObjectOrRef = responses[statusCode];\n            let response;\n            if ('$ref' in responseObjectOrRef &&\n                typeof responseObjectOrRef.$ref === 'string') {\n                response = resolveRef(responseObjectOrRef.$ref, oas);\n            }\n            else {\n                response = responseObjectOrRef;\n            }\n            if (typeof response.links === 'object') {\n                const epLinks = response.links;\n                for (let linkKey in epLinks) {\n                    const linkObjectOrRef = epLinks[linkKey];\n                    let link;\n                    if ('$ref' in linkObjectOrRef &&\n                        typeof linkObjectOrRef.$ref === 'string') {\n                        link = resolveRef(linkObjectOrRef.$ref, oas);\n                    }\n                    else {\n                        link = linkObjectOrRef;\n                    }\n                    links[linkKey] = link;\n                }\n            }\n        }\n    }\n    return links;\n}\n/**\n * Returns the list of parameters in the given operation.\n */\nexport function getParameters(path, method, operation, pathItem, oas) {\n    let parameters = [];\n    if (!isHttpMethod(method)) {\n        translationLog(`Warning: attempted to get parameters for ${method} ${path}, ` +\n            `which is not an operation.`);\n        return parameters;\n    }\n    // First, consider parameters in Path Item Object:\n    const pathParams = pathItem.parameters;\n    if (Array.isArray(pathParams)) {\n        const pathItemParameters = pathParams.map((p) => {\n            if ('$ref' in p && typeof p.$ref === 'string') {\n                // Here we know we have a parameter object:\n                return resolveRef(p.$ref, oas);\n            }\n            else {\n                // Here we know we have a parameter object:\n                return p;\n            }\n        });\n        parameters = parameters.concat(pathItemParameters);\n    }\n    // Second, consider parameters in Operation Object:\n    const opObjectParameters = operation.parameters;\n    if (Array.isArray(opObjectParameters)) {\n        const operationParameters = opObjectParameters.map((p) => {\n            if ('$ref' in p && typeof p.$ref === 'string') {\n                // Here we know we have a parameter object:\n                return resolveRef(p.$ref, oas);\n            }\n            else {\n                // Here we know we have a parameter object:\n                return p;\n            }\n        });\n        parameters = parameters.concat(operationParameters);\n    }\n    return parameters;\n}\n/**\n * Returns an array of server objects for the operation at the given path and\n * method. Considers in the following order: global server definitions,\n * definitions at the path item, definitions at the operation, or the OAS\n * default.\n */\nexport function getServers(operation, pathItem, oas) {\n    let servers = [];\n    // Global server definitions:\n    if (Array.isArray(oas.servers) && oas.servers.length > 0) {\n        servers = oas.servers;\n    }\n    // First, consider servers defined on the path\n    if (Array.isArray(pathItem.servers) && pathItem.servers.length > 0) {\n        servers = pathItem.servers;\n    }\n    // Second, consider servers defined on the operation\n    if (Array.isArray(operation.servers) && operation.servers.length > 0) {\n        servers = operation.servers;\n    }\n    // Default, in case there is no server:\n    if (servers.length === 0) {\n        let server = {\n            url: '/' // TODO: avoid double-slashes\n        };\n        servers.push(server);\n    }\n    return servers;\n}\n/**\n * Returns a map of security scheme definitions, identified by keys. Resolves\n * possible references.\n */\nexport function getSecuritySchemes(oas) {\n    // Collect all security schemes:\n    const securitySchemes = {};\n    if (typeof oas.components === 'object' &&\n        typeof oas.components.securitySchemes === 'object') {\n        for (let schemeKey in oas.components.securitySchemes) {\n            const securitySchemeOrRef = oas.components.securitySchemes[schemeKey];\n            // Ensure we have actual SecuritySchemeObject:\n            if ('$ref' in securitySchemeOrRef &&\n                typeof securitySchemeOrRef.$ref === 'string') {\n                // Result of resolution will be SecuritySchemeObject:\n                securitySchemes[schemeKey] = resolveRef(securitySchemeOrRef.$ref, oas);\n            }\n            else {\n                // We already have a SecuritySchemeObject:\n                securitySchemes[schemeKey] = securitySchemeOrRef;\n            }\n        }\n    }\n    return securitySchemes;\n}\n/**\n * Returns the list of sanitized keys of non-OAuth2 security schemes\n * required by the operation at the given path and method.\n */\nexport function getSecurityRequirements(operation, securitySchemes, oas) {\n    const results = [];\n    // First, consider global requirements\n    const globalSecurity = oas.security;\n    if (globalSecurity && typeof globalSecurity !== 'undefined') {\n        for (let secReq of globalSecurity) {\n            for (let schemaKey in secReq) {\n                if (securitySchemes[schemaKey] &&\n                    typeof securitySchemes[schemaKey] === 'object' &&\n                    securitySchemes[schemaKey].def.type !== 'oauth2') {\n                    results.push(schemaKey);\n                }\n            }\n        }\n    }\n    // Second, consider operation requirements\n    const localSecurity = operation.security;\n    if (localSecurity && typeof localSecurity !== 'undefined') {\n        for (let secReq of localSecurity) {\n            for (let schemaKey in secReq) {\n                if (securitySchemes[schemaKey] &&\n                    typeof securitySchemes[schemaKey] === 'object' &&\n                    securitySchemes[schemaKey].def.type !== 'oauth2') {\n                    if (!results.includes(schemaKey)) {\n                        results.push(schemaKey);\n                    }\n                }\n            }\n        }\n    }\n    return results;\n}\nexport var CaseStyle;\n(function (CaseStyle) {\n    CaseStyle[CaseStyle[\"simple\"] = 0] = \"simple\";\n    CaseStyle[CaseStyle[\"PascalCase\"] = 1] = \"PascalCase\";\n    CaseStyle[CaseStyle[\"camelCase\"] = 2] = \"camelCase\";\n    CaseStyle[CaseStyle[\"ALL_CAPS\"] = 3] = \"ALL_CAPS\"; // Used for enum values\n})(CaseStyle || (CaseStyle = {}));\n/**\n * Checks to see if the provided string is GraphQL-safe\n */\nexport function isSanitized(str) {\n    return /[a-zA-Z0-9_]/gi.test(str);\n}\n/**\n * First sanitizes given string and then also camelCases it.\n */\nexport function sanitize(str, caseStyle) {\n    /**\n     * Used in conjunction to simpleNames, which only removes illegal\n     * characters and preserves casing\n     */\n    if (caseStyle === CaseStyle.simple) {\n        let sanitized = str.replace(/[^a-zA-Z0-9_]/gi, '');\n        // Special case: we cannot start with number, and cannot be empty:\n        if (/^[0-9]/.test(sanitized) || sanitized === '') {\n            sanitized = '_' + sanitized;\n        }\n        return sanitized;\n    }\n    /**\n     * Remove all GraphQL unsafe characters\n     */\n    const regex = caseStyle === CaseStyle.ALL_CAPS\n        ? /[^a-zA-Z0-9_]/g // ALL_CAPS has underscores\n        : /[^a-zA-Z0-9]/g;\n    let sanitized = str.split(regex).reduce((path, part) => {\n        if (caseStyle === CaseStyle.ALL_CAPS) {\n            return path + '_' + part;\n        }\n        else {\n            return path + capitalize(part);\n        }\n    });\n    switch (caseStyle) {\n        case CaseStyle.PascalCase:\n            // The first character in PascalCase should be uppercase\n            sanitized = capitalize(sanitized);\n            break;\n        case CaseStyle.camelCase:\n            // The first character in camelCase should be lowercase\n            sanitized = uncapitalize(sanitized);\n            break;\n        case CaseStyle.ALL_CAPS:\n            sanitized = sanitized.toUpperCase();\n            break;\n    }\n    // Special case: we cannot start with number, and cannot be empty:\n    if (/^[0-9]/.test(sanitized) || sanitized === '') {\n        sanitized = '_' + sanitized;\n    }\n    return sanitized;\n}\n/**\n * Sanitizes the given string and stores the sanitized-to-original mapping in\n * the given mapping.\n */\nexport function storeSaneName(saneStr, str, mapping) {\n    if (saneStr in mapping && str !== mapping[saneStr]) {\n        // TODO: Follow warning model\n        translationLog(`Warning: '${str}' and '${mapping[saneStr]}' both sanitize ` +\n            `to '${saneStr}' - collision possible. Desanitize to '${str}'.`);\n    }\n    mapping[saneStr] = str;\n    return saneStr;\n}\n/**\n * Stringifies and possibly trims the given string to the provided length.\n */\nexport function trim(str, length) {\n    if (typeof str !== 'string') {\n        str = JSON.stringify(str);\n    }\n    if (str && str.length > length) {\n        str = `${str.substring(0, length)}...`;\n    }\n    return str;\n}\n/**\n * Determines if the given \"method\" is indeed an operation. Alternatively, the\n * method could point to other types of information (e.g., parameters, servers).\n */\nexport function isHttpMethod(method) {\n    return Object.keys(HTTP_METHODS).includes(method.toLowerCase());\n}\n/**\n * Formats a string that describes an operation in the form:\n * {name of OAS} {HTTP method in ALL_CAPS} {operation path}\n *\n * Also used in preprocessing.ts where Operation objects are being constructed\n */\nexport function formatOperationString(method, path, title) {\n    if (title) {\n        return `${title} ${method.toUpperCase()} ${path}`;\n    }\n    else {\n        return `${method.toUpperCase()} ${path}`;\n    }\n}\n/**\n * Capitalizes a given string\n */\nexport function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Uncapitalizes a given string\n */\nexport function uncapitalize(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n}\n/**\n * For operations that do not have an operationId, generate one\n */\nexport function generateOperationId(method, path) {\n    return sanitize(`${method} ${path}`, CaseStyle.camelCase);\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { TargetGraphQLType } from './types/operation';\n// Imports:\nimport * as Oas3Tools from './oas_3_tools';\nimport { JSONPath } from 'jsonpath-plus';\nimport { debug } from 'debug';\nimport { GraphQLError } from 'graphql';\nimport formurlencoded from 'form-urlencoded';\nimport { PubSub } from 'graphql-subscriptions';\nimport urljoin from 'url-join';\nconst pubsub = new PubSub();\nconst translationLog = debug('translation');\nconst httpLog = debug('http');\nconst pubsubLog = debug('pubsub');\n// OAS runtime expression reference locations\nconst RUNTIME_REFERENCES = ['header.', 'query.', 'path.', 'body'];\nexport const OPENAPI_TO_GRAPHQL = '_openAPIToGraphQL';\n/*\n * If the operation type is Subscription, create and return a resolver object\n * that contains subscribe to perform subscription and resolve to execute\n * payload transformation\n */\nexport function getSubscribe({ operation, payloadName, data, baseUrl, connectOptions }) {\n    // Determine the appropriate URL:\n    if (typeof baseUrl === 'undefined') {\n        baseUrl = Oas3Tools.getBaseUrl(operation);\n    }\n    // Return custom resolver if it is defined\n    const customResolvers = data.options.customSubscriptionResolvers;\n    const title = operation.oas.info.title;\n    const path = operation.path;\n    const method = operation.method;\n    if (typeof customResolvers === 'object' &&\n        typeof customResolvers[title] === 'object' &&\n        typeof customResolvers[title][path] === 'object' &&\n        typeof customResolvers[title][path][method] === 'object' &&\n        typeof customResolvers[title][path][method].subscribe === 'function') {\n        translationLog(`Use custom publish resolver for ${operation.operationString}`);\n        return customResolvers[title][path][method].subscribe;\n    }\n    return (root, args, context, info) => {\n        /**\n         * Determine possible topic(s) by resolving callback path\n         *\n         * GraphQL produces sanitized payload names, so we have to sanitize before\n         * lookup here\n         */\n        const paramName = Oas3Tools.sanitize(payloadName, Oas3Tools.CaseStyle.camelCase);\n        let resolveData = {};\n        if (payloadName && typeof payloadName === 'string') {\n            // The option genericPayloadArgName will change the payload name to \"requestBody\"\n            const sanePayloadName = data.options.genericPayloadArgName\n                ? 'requestBody'\n                : Oas3Tools.sanitize(payloadName, Oas3Tools.CaseStyle.camelCase);\n            if (sanePayloadName in args) {\n                if (typeof args[sanePayloadName] === 'object') {\n                    const rawPayload = Oas3Tools.desanitizeObjectKeys(args[sanePayloadName], data.saneMap);\n                    resolveData.usedPayload = rawPayload;\n                }\n                else {\n                    const rawPayload = JSON.parse(args[sanePayloadName]);\n                    resolveData.usedPayload = rawPayload;\n                }\n            }\n        }\n        if (connectOptions) {\n            resolveData.usedRequestOptions = connectOptions;\n        }\n        else {\n            resolveData.usedRequestOptions = {\n                method: resolveData.usedPayload.method\n                    ? resolveData.usedPayload.method\n                    : method.toUpperCase()\n            };\n        }\n        pubsubLog(`Subscription schema: ${JSON.stringify(resolveData.usedPayload)}`);\n        let value = path;\n        let paramNameWithoutLocation = paramName;\n        if (paramName.indexOf('.') !== -1) {\n            paramNameWithoutLocation = paramName.split('.')[1];\n        }\n        // See if the callback path contains constants expression\n        if (value.search(/{|}/) === -1) {\n            args[paramNameWithoutLocation] = isRuntimeExpression(value)\n                ? resolveRuntimeExpression(paramName, value, resolveData, root, args)\n                : value;\n        }\n        else {\n            // Replace callback expression with appropriate values\n            const cbParams = value.match(/{([^}]*)}/g);\n            pubsubLog(`Analyzing subscription path: ${cbParams.toString()}`);\n            cbParams.forEach((cbParam) => {\n                value = value.replace(cbParam, resolveRuntimeExpression(paramName, cbParam.substring(1, cbParam.length - 1), resolveData, root, args));\n            });\n            args[paramNameWithoutLocation] = value;\n        }\n        const topic = args[paramNameWithoutLocation] || 'test';\n        pubsubLog(`Subscribing to: ${topic}`);\n        return context.pubsub\n            ? context.pubsub.asyncIterator(topic)\n            : pubsub.asyncIterator(topic);\n    };\n}\n/*\n * If the operation type is Subscription, create and return a resolver function\n * triggered after a message has been published to the corresponding subscribe\n * topic(s) to execute payload transformation\n */\nexport function getPublishResolver({ operation, responseName, data }) {\n    // Return custom resolver if it is defined\n    const customResolvers = data.options.customSubscriptionResolvers;\n    const title = operation.oas.info.title;\n    const path = operation.path;\n    const method = operation.method;\n    if (typeof customResolvers === 'object' &&\n        typeof customResolvers[title] === 'object' &&\n        typeof customResolvers[title][path] === 'object' &&\n        typeof customResolvers[title][path][method] === 'object' &&\n        typeof customResolvers[title][path][method].resolve === 'function') {\n        translationLog(`Use custom publish resolver for ${operation.operationString}`);\n        return customResolvers[title][path][method].resolve;\n    }\n    return (payload, args, context, info) => {\n        // Validate and format based on operation.responseDefinition\n        const typeOfResponse = operation.responseDefinition.targetGraphQLType;\n        pubsubLog(`Message received: ${responseName}, ${typeOfResponse}, ${JSON.stringify(payload)}`);\n        let responseBody;\n        let saneData;\n        if (typeof payload === 'object') {\n            if (typeOfResponse === TargetGraphQLType.object) {\n                if (Buffer.isBuffer(payload)) {\n                    try {\n                        responseBody = JSON.parse(payload.toString());\n                    }\n                    catch (e) {\n                        const errorString = `Cannot JSON parse payload` +\n                            `operation ${operation.operationString} ` +\n                            `even though it has content-type 'application/json'`;\n                        pubsubLog(errorString);\n                        return null;\n                    }\n                }\n                else {\n                    responseBody = payload;\n                }\n                saneData = Oas3Tools.sanitizeObjectKeys(payload);\n            }\n            else if ((Buffer.isBuffer(payload) || Array.isArray(payload)) &&\n                typeOfResponse === TargetGraphQLType.string) {\n                saneData = payload.toString();\n            }\n        }\n        else if (typeof payload === 'string') {\n            if (typeOfResponse === TargetGraphQLType.object) {\n                try {\n                    responseBody = JSON.parse(payload);\n                    saneData = Oas3Tools.sanitizeObjectKeys(responseBody);\n                }\n                catch (e) {\n                    const errorString = `Cannot JSON parse payload` +\n                        `operation ${operation.operationString} ` +\n                        `even though it has content-type 'application/json'`;\n                    pubsubLog(errorString);\n                    return null;\n                }\n            }\n            else if (typeOfResponse === TargetGraphQLType.string) {\n                saneData = payload;\n            }\n        }\n        pubsubLog(`Message forwarded: ${JSON.stringify(saneData ? saneData : payload)}`);\n        return saneData ? saneData : payload;\n    };\n}\n/**\n * If the operation type is Query or Mutation, create and return a resolver\n * function that performs API requests for the given GraphQL query\n */\nexport function getResolver({ operation, argsFromLink = {}, payloadName, data, baseUrl, requestOptions, fetch }) {\n    // Determine the appropriate URL:\n    if (typeof baseUrl === 'undefined') {\n        baseUrl = Oas3Tools.getBaseUrl(operation);\n    }\n    // Return custom resolver if it is defined\n    const customResolvers = data.options.customResolvers;\n    const title = operation.oas.info.title;\n    const path = operation.path;\n    const method = operation.method;\n    if (typeof customResolvers === 'object' &&\n        typeof customResolvers[title] === 'object' &&\n        typeof customResolvers[title][path] === 'object' &&\n        typeof customResolvers[title][path][method] === 'function') {\n        translationLog(`Use custom resolver for ${operation.operationString}`);\n        return customResolvers[title][path][method];\n    }\n    // Return resolve function:\n    return async (source, args, context, info) => {\n        /**\n         * Fetch resolveData from possibly existing _openAPIToGraphQL\n         *\n         * NOTE: _openAPIToGraphQL is an object used to pass security info and data\n         * from previous resolvers\n         */\n        let resolveData = {};\n        if (source &&\n            typeof source === 'object' &&\n            typeof source[OPENAPI_TO_GRAPHQL] === 'object' &&\n            typeof source[OPENAPI_TO_GRAPHQL].data === 'object') {\n            const parentIdentifier = getParentIdentifier(info);\n            if (!(parentIdentifier.length === 0) &&\n                parentIdentifier in source[OPENAPI_TO_GRAPHQL].data) {\n                /**\n                 * Resolving link params may change the usedParams, but these changes\n                 * should not be present in the parent _openAPIToGraphQL, therefore copy\n                 * the object\n                 */\n                resolveData = JSON.parse(JSON.stringify(source[OPENAPI_TO_GRAPHQL].data[parentIdentifier]));\n            }\n        }\n        if (typeof resolveData.usedParams === 'undefined') {\n            resolveData.usedParams = {};\n        }\n        /**\n         * Handle default values of parameters, if they have not yet been defined by\n         * the user.\n         */\n        operation.parameters.forEach((param) => {\n            const saneParamName = Oas3Tools.sanitize(param.name, !data.options.simpleNames\n                ? Oas3Tools.CaseStyle.camelCase\n                : Oas3Tools.CaseStyle.simple);\n            if (typeof args[saneParamName] === 'undefined' &&\n                param.schema &&\n                typeof param.schema === 'object') {\n                const schemaOrRef = param.schema;\n                let schema;\n                if ('$ref' in schemaOrRef) {\n                    schema = Oas3Tools.resolveRef(schemaOrRef.$ref, operation.oas);\n                }\n                else {\n                    schema = schemaOrRef;\n                }\n                if (schema && schema.default && typeof schema.default !== 'undefined') {\n                    args[saneParamName] = schema.default;\n                }\n            }\n        });\n        // Handle arguments provided by links\n        for (const paramName in argsFromLink) {\n            const saneParamName = Oas3Tools.sanitize(paramName, !data.options.simpleNames\n                ? Oas3Tools.CaseStyle.camelCase\n                : Oas3Tools.CaseStyle.simple);\n            let value = argsFromLink[paramName];\n            /**\n             * see if the link parameter contains constants that are appended to the link parameter\n             *\n             * e.g. instead of:\n             * $response.body#/employerId\n             *\n             * it could be:\n             * abc_{$response.body#/employerId}\n             */\n            if (value.search(/{|}/) === -1) {\n                args[saneParamName] = isRuntimeExpression(value)\n                    ? resolveRuntimeExpression(paramName, value, resolveData, source, args)\n                    : value;\n            }\n            else {\n                // Replace link parameters with appropriate values\n                const linkParams = value.match(/{([^}]*)}/g);\n                linkParams.forEach((linkParam) => {\n                    value = value.replace(linkParam, resolveRuntimeExpression(paramName, linkParam.substring(1, linkParam.length - 1), resolveData, source, args));\n                });\n                args[saneParamName] = value;\n            }\n        }\n        // Stored used parameters to future requests:\n        resolveData.usedParams = Object.assign(resolveData.usedParams, args);\n        // Build URL (i.e., fill in path parameters):\n        const { path, qs, headers } = extractRequestDataFromArgs(operation.path, operation.parameters, args, data);\n        const url = new URL(urljoin(baseUrl, path));\n        /**\n         * The Content-Type and Accept property should not be changed because the\n         * object type has already been created and unlike these properties, it\n         * cannot be easily changed\n         *\n         * NOTE: This may cause the user to encounter unexpected changes\n         */\n        if (operation.method !== Oas3Tools.HTTP_METHODS.get) {\n            headers['content-type'] =\n                typeof operation.payloadContentType !== 'undefined'\n                    ? operation.payloadContentType\n                    : 'application/json';\n        }\n        headers['accept'] =\n            typeof operation.responseContentType !== 'undefined'\n                ? operation.responseContentType\n                : 'application/json';\n        let options;\n        if (requestOptions) {\n            options = {\n                ...requestOptions,\n                method: operation.method,\n                headers: {}\n            };\n            options.headers = {}; // Handle requestOptions.header later if applicable\n            if (requestOptions.headers) {\n                // requestOptions.headers may be either an object or a function\n                if (typeof requestOptions.headers === 'object') {\n                    Object.assign(options.headers, headers, requestOptions.headers);\n                }\n                else if (typeof requestOptions.headers === 'function') {\n                    const headers = requestOptions.headers(method, path, title, {\n                        source,\n                        args,\n                        context,\n                        info\n                    });\n                    if (typeof headers === 'object') {\n                        Object.assign(options.headers, headers);\n                    }\n                }\n            }\n            else {\n                options.headers = headers;\n            }\n            if (typeof requestOptions.qs === 'object') {\n                Object.assign(qs, requestOptions.qs);\n            }\n        }\n        else {\n            options = {\n                method: operation.method,\n                headers\n            };\n        }\n        /**\n         * Determine possible payload\n         *\n         * GraphQL produces sanitized payload names, so we have to sanitize before\n         * lookup here\n         */\n        resolveData.usedPayload = undefined;\n        if (typeof payloadName === 'string') {\n            // The option genericPayloadArgName will change the payload name to \"requestBody\"\n            const sanePayloadName = data.options.genericPayloadArgName\n                ? 'requestBody'\n                : Oas3Tools.sanitize(payloadName, Oas3Tools.CaseStyle.camelCase);\n            let rawPayload;\n            if (operation.payloadContentType === 'application/json') {\n                rawPayload = JSON.stringify(Oas3Tools.desanitizeObjectKeys(args[sanePayloadName], data.saneMap));\n            }\n            else if (operation.payloadContentType === 'application/x-www-form-urlencoded') {\n                rawPayload = formurlencoded(Oas3Tools.desanitizeObjectKeys(args[sanePayloadName], data.saneMap));\n            }\n            else {\n                // Payload is not an object\n                rawPayload = args[sanePayloadName];\n            }\n            options.body = rawPayload;\n            resolveData.usedPayload = rawPayload;\n        }\n        /**\n         * Pass on OpenAPI-to-GraphQL options\n         */\n        if (typeof data.options === 'object') {\n            // Headers:\n            if (typeof data.options.headers === 'object') {\n                Object.assign(options.headers, data.options.headers);\n            }\n            else if (typeof data.options.headers === 'function') {\n                const headers = data.options.headers(method, path, title, {\n                    source,\n                    args,\n                    context,\n                    info\n                });\n                if (typeof headers === 'object') {\n                    Object.assign(options.headers, headers);\n                }\n            }\n            // Query string:\n            if (typeof data.options.qs === 'object') {\n                Object.assign(qs, data.options.qs);\n            }\n        }\n        // Get authentication headers and query parameters\n        if (source &&\n            typeof source === 'object' &&\n            typeof source[OPENAPI_TO_GRAPHQL] === 'object') {\n            const { authHeaders, authQs, authCookie } = getAuthOptions(operation, source[OPENAPI_TO_GRAPHQL], data);\n            // ...and pass them to the options\n            Object.assign(options.headers, authHeaders);\n            Object.assign(qs, authQs);\n            // Add authentication cookie if created\n            if (authCookie !== null) {\n                const cookieHeaderName = 'cookie';\n                options.headers[cookieHeaderName] = authCookie;\n            }\n        }\n        // Extract OAuth token from context (if available)\n        if (data.options.sendOAuthTokenInQuery) {\n            const oauthQueryObj = createOAuthQS(data, context);\n            Object.assign(qs, oauthQueryObj);\n        }\n        else {\n            const oauthHeader = createOAuthHeader(data, context);\n            Object.assign(options.headers, oauthHeader);\n        }\n        resolveData.usedRequestOptions = options;\n        resolveData.usedStatusCode = operation.statusCode;\n        setSearchParamsFromObj(url, qs, []);\n        resolveData.url = url.toString().replace(url.search, '');\n        // Make the call\n        httpLog(`Call ${options.method.toUpperCase()} ${url.toString()}\\n` +\n            `headers: ${JSON.stringify(options.headers)}\\n` +\n            `request body: ${options.body}`);\n        let response;\n        try {\n            response = await fetch(url.toString(), options);\n        }\n        catch (err) {\n            httpLog(err);\n            throw err;\n        }\n        const body = await response.text();\n        if (response.status < 200 || response.status > 299) {\n            httpLog(`${response.status} - ${Oas3Tools.trim(body, 100)}`);\n            const errorString = `Could not invoke operation ${operation.operationString}`;\n            if (data.options.provideErrorExtensions) {\n                let responseBody;\n                try {\n                    responseBody = JSON.parse(body);\n                }\n                catch (e) {\n                    responseBody = body;\n                }\n                const extensions = {\n                    method: operation.method,\n                    path: operation.path,\n                    url: url.toString(),\n                    statusText: response.statusText,\n                    statusCode: response.status,\n                    responseHeaders: headersToObject(response.headers),\n                    responseBody\n                };\n                throw graphQLErrorWithExtensions(errorString, extensions);\n            }\n            else {\n                throw new Error(errorString);\n            }\n            // Successful response code 200-299\n        }\n        else {\n            httpLog(`${response.status} - ${Oas3Tools.trim(body, 100)}`);\n            if (response.headers.get('content-type')) {\n                /**\n                 * Throw warning if the non-application/json content does not\n                 * match the OAS.\n                 *\n                 * Use an inclusion test in case of charset\n                 *\n                 * i.e. text/plain; charset=utf-8\n                 */\n                if (!(response.headers\n                    .get('content-type')\n                    .includes(operation.responseContentType) ||\n                    operation.responseContentType.includes(response.headers.get('content-type')))) {\n                    const errorString = `Operation ` +\n                        `${operation.operationString} ` +\n                        `should have a content-type '${operation.responseContentType}' ` +\n                        `but has '${response.headers.get('content-type')}' instead`;\n                    httpLog(errorString);\n                    throw new Error(errorString);\n                }\n                else {\n                    /**\n                     * If the response body is type JSON, then parse it\n                     *\n                     * content-type may not be necessarily 'application/json' it can be\n                     * 'application/json; charset=utf-8' for example\n                     */\n                    if (response.headers.get('content-type').includes('application/json')) {\n                        let responseBody;\n                        try {\n                            responseBody = JSON.parse(body);\n                        }\n                        catch (e) {\n                            const errorString = `Cannot JSON parse response body of ` +\n                                `operation ${operation.operationString} ` +\n                                `even though it has content-type 'application/json'`;\n                            httpLog(errorString);\n                            throw new Error(errorString);\n                        }\n                        resolveData.responseHeaders = {};\n                        response.headers.forEach((val, key) => {\n                            resolveData.responseHeaders[key] = val;\n                        });\n                        // Deal with the fact that the server might send unsanitized data\n                        let saneData = Oas3Tools.sanitizeObjectKeys(responseBody, !data.options.simpleNames\n                            ? Oas3Tools.CaseStyle.camelCase\n                            : Oas3Tools.CaseStyle.simple);\n                        // Pass on _openAPIToGraphQL to subsequent resolvers\n                        if (saneData && typeof saneData === 'object') {\n                            if (Array.isArray(saneData)) {\n                                saneData.forEach((element) => {\n                                    if (typeof element[OPENAPI_TO_GRAPHQL] === 'undefined') {\n                                        element[OPENAPI_TO_GRAPHQL] = {\n                                            data: {}\n                                        };\n                                    }\n                                    if (source &&\n                                        typeof source === 'object' &&\n                                        typeof source[OPENAPI_TO_GRAPHQL] === 'object') {\n                                        Object.assign(element[OPENAPI_TO_GRAPHQL], source[OPENAPI_TO_GRAPHQL]);\n                                    }\n                                    element[OPENAPI_TO_GRAPHQL].data[getIdentifier(info)] =\n                                        resolveData;\n                                });\n                            }\n                            else {\n                                if (typeof saneData[OPENAPI_TO_GRAPHQL] === 'undefined') {\n                                    saneData[OPENAPI_TO_GRAPHQL] = {\n                                        data: {}\n                                    };\n                                }\n                                if (source &&\n                                    typeof source === 'object' &&\n                                    typeof source[OPENAPI_TO_GRAPHQL] === 'object') {\n                                    Object.assign(saneData[OPENAPI_TO_GRAPHQL], source[OPENAPI_TO_GRAPHQL]);\n                                }\n                                saneData[OPENAPI_TO_GRAPHQL].data[getIdentifier(info)] =\n                                    resolveData;\n                            }\n                        }\n                        // Apply limit argument\n                        if (data.options.addLimitArgument &&\n                            /**\n                             * NOTE: Does not differentiate between autogenerated args and\n                             * preexisting args\n                             *\n                             * Ensure that there is not preexisting 'limit' argument\n                             */\n                            !operation.parameters.find((parameter) => {\n                                return parameter.name === 'limit';\n                            }) &&\n                            // Only array data\n                            Array.isArray(saneData) &&\n                            // Only array of objects/arrays\n                            saneData.some((data) => {\n                                return typeof data === 'object';\n                            })) {\n                            let arraySaneData = saneData;\n                            if ('limit' in args) {\n                                const limit = args['limit'];\n                                if (limit >= 0) {\n                                    arraySaneData = arraySaneData.slice(0, limit);\n                                }\n                                else {\n                                    throw new Error(`Auto-generated 'limit' argument must be greater than or equal to 0`);\n                                }\n                            }\n                            else {\n                                throw new Error(`Cannot get value for auto-generated 'limit' argument`);\n                            }\n                            saneData = arraySaneData;\n                        }\n                        return saneData;\n                    }\n                    else {\n                        // TODO: Handle YAML\n                        return body;\n                    }\n                }\n            }\n            else {\n                /**\n                 * Check to see if there is not supposed to be a response body,\n                 * if that is the case, that would explain why there is not\n                 * a content-type\n                 */\n                if (typeof operation.responseContentType !== 'string') {\n                    return null;\n                }\n                else {\n                    const errorString = 'Response does not have a Content-Type header';\n                    httpLog(errorString);\n                    throw new Error(errorString);\n                }\n            }\n        }\n    };\n}\nfunction headersToObject(headers) {\n    const headersObj = {};\n    headers.forEach((value, key) => {\n        headersObj[key] = value;\n    });\n    return headersObj;\n}\n/**\n * Attempts to create an object to become an OAuth query string by extracting an\n * OAuth token from the context based on the JSON path provided in the options.\n */\nfunction createOAuthQS(data, context) {\n    return typeof data.options.tokenJSONpath !== 'string'\n        ? {}\n        : extractToken(data, context);\n}\nfunction extractToken(data, context) {\n    const tokenJSONpath = data.options.tokenJSONpath;\n    const tokens = JSONPath({\n        path: tokenJSONpath,\n        json: context\n    });\n    if (Array.isArray(tokens) && tokens.length > 0) {\n        const token = tokens[0];\n        return {\n            access_token: token\n        };\n    }\n    else {\n        httpLog(`Warning: could not extract OAuth token from context at '${tokenJSONpath}'`);\n        return {};\n    }\n}\n/**\n * Attempts to create an OAuth authorization header by extracting an OAuth token\n * from the context based on the JSON path provided in the options.\n */\nfunction createOAuthHeader(data, context) {\n    if (typeof data.options.tokenJSONpath !== 'string') {\n        return {};\n    }\n    // Extract token\n    const tokenJSONpath = data.options.tokenJSONpath;\n    const tokens = JSONPath({\n        path: tokenJSONpath,\n        json: context\n    });\n    if (Array.isArray(tokens) && tokens.length > 0) {\n        const token = tokens[0];\n        return {\n            Authorization: `Bearer ${token}`,\n            'User-Agent': 'openapi-to-graphql'\n        };\n    }\n    else {\n        httpLog(`Warning: could not extract OAuth token from context at ` +\n            `'${tokenJSONpath}'`);\n        return {};\n    }\n}\n/**\n * Return the headers and query strings to authenticate a request (if any).\n * Return authHeader and authQs, which hold headers and query parameters\n * respectively to authentication a request.\n */\nfunction getAuthOptions(operation, _openAPIToGraphQL, data) {\n    const authHeaders = {};\n    const authQs = {};\n    let authCookie = null;\n    /**\n     * Determine if authentication is required, and which protocol (if any) we can\n     * use\n     */\n    const { authRequired, securityRequirement, sanitizedSecurityRequirement } = getAuthReqAndProtcolName(operation, _openAPIToGraphQL);\n    // Possibly, we don't need to do anything:\n    if (!authRequired) {\n        return { authHeaders, authQs, authCookie };\n    }\n    // If authentication is required, but we can't fulfill the protocol, throw:\n    if (authRequired && typeof securityRequirement !== 'string') {\n        throw new Error(`Missing information to authenticate API request.`);\n    }\n    if (typeof securityRequirement === 'string') {\n        const security = data.security[securityRequirement];\n        switch (security.def.type) {\n            case 'apiKey':\n                const apiKey = _openAPIToGraphQL.security[sanitizedSecurityRequirement].apiKey;\n                if ('in' in security.def) {\n                    if (typeof security.def.name === 'string') {\n                        if (security.def.in === 'header') {\n                            authHeaders[security.def.name] = apiKey;\n                        }\n                        else if (security.def.in === 'query') {\n                            authQs[security.def.name] = apiKey;\n                        }\n                        else if (security.def.in === 'cookie') {\n                            authCookie = `${security.def.name}=${apiKey}`;\n                        }\n                    }\n                    else {\n                        throw new Error(`Cannot send API key in '${JSON.stringify(security.def.in)}'`);\n                    }\n                }\n                break;\n            case 'http':\n                switch (security.def.scheme) {\n                    case 'basic':\n                        const username = _openAPIToGraphQL.security[sanitizedSecurityRequirement].username;\n                        const password = _openAPIToGraphQL.security[sanitizedSecurityRequirement].password;\n                        const credentials = `${username}:${password}`;\n                        authHeaders['Authorization'] = `Basic ${Buffer.from(credentials).toString('base64')}`;\n                        break;\n                    default:\n                        throw new Error(`Cannot recognize http security scheme ` +\n                            `'${JSON.stringify(security.def.scheme)}'`);\n                }\n                break;\n            case 'oauth2':\n                break;\n            case 'openIdConnect':\n                break;\n            default:\n                throw new Error(`Cannot recognize security type '${security.def.type}'`);\n        }\n    }\n    return { authHeaders, authQs, authCookie };\n}\n/**\n * Determines whether a given operation requires authentication, and which of\n * the (possibly multiple) authentication protocols can be used based on the\n * data present in the given context.\n */\nfunction getAuthReqAndProtcolName(operation, _openAPIToGraphQL) {\n    let authRequired = false;\n    if (Array.isArray(operation.securityRequirements) &&\n        operation.securityRequirements.length > 0) {\n        authRequired = true;\n        for (let securityRequirement of operation.securityRequirements) {\n            const sanitizedSecurityRequirement = Oas3Tools.sanitize(securityRequirement, Oas3Tools.CaseStyle.camelCase);\n            if (typeof _openAPIToGraphQL.security[sanitizedSecurityRequirement] ===\n                'object') {\n                return {\n                    authRequired,\n                    securityRequirement,\n                    sanitizedSecurityRequirement\n                };\n            }\n        }\n    }\n    return {\n        authRequired\n    };\n}\n/**\n * Given a link parameter or callback path, determine the value from the runtime\n * expression\n *\n * The link parameter or callback path is a reference to data contained in the\n * url/method/statuscode or response/request body/query/path/header\n */\nfunction resolveRuntimeExpression(paramName, value, resolveData, root, args) {\n    if (value === '$url') {\n        return resolveData.url;\n    }\n    else if (value === '$method') {\n        return resolveData.usedRequestOptions.method;\n    }\n    else if (value === '$statusCode') {\n        return resolveData.usedStatusCode;\n    }\n    else if (value.startsWith('$request.')) {\n        // CASE: parameter is previous body\n        if (value === '$request.body') {\n            return resolveData.usedPayload;\n            // CASE: parameter in previous body\n        }\n        else if (value.startsWith('$request.body#')) {\n            const tokens = JSONPath({\n                path: value.split('body#/')[1],\n                json: resolveData.usedPayload\n            });\n            if (Array.isArray(tokens) && tokens.length > 0) {\n                return tokens[0];\n            }\n            else {\n                httpLog(`Warning: could not extract parameter '${paramName}' from link`);\n            }\n            // CASE: parameter in previous query parameter\n        }\n        else if (value.startsWith('$request.query')) {\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('query.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in previous path parameter\n        }\n        else if (value.startsWith('$request.path')) {\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('path.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in previous header parameter\n        }\n        else if (value.startsWith('$request.header')) {\n            return resolveData.usedRequestOptions.headers[value.split('header.')[1]];\n        }\n    }\n    else if (value.startsWith('$response.')) {\n        /**\n         * CASE: parameter is body\n         *\n         * NOTE: may not be used because it implies that the operation does not\n         * return a JSON object and OpenAPI-to-GraphQL does not create GraphQL\n         * objects for non-JSON data and links can only exists between objects.\n         */\n        if (value === '$response.body') {\n            const result = JSON.parse(JSON.stringify(root));\n            /**\n             * _openAPIToGraphQL contains data used by OpenAPI-to-GraphQL to create the GraphQL interface\n             * and should not be exposed\n             */\n            result._openAPIToGraphQL = undefined;\n            return result;\n            // CASE: parameter in body\n        }\n        else if (value.startsWith('$response.body#')) {\n            const tokens = JSONPath({\n                path: value.split('body#/')[1],\n                json: root\n            });\n            if (Array.isArray(tokens) && tokens.length > 0) {\n                return tokens[0];\n            }\n            else {\n                httpLog(`Warning: could not extract parameter '${paramName}' from link`);\n            }\n            // CASE: parameter in query parameter\n        }\n        else if (value.startsWith('$response.query')) {\n            // NOTE: handled the same way $request.query is handled\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('query.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in path parameter\n        }\n        else if (value.startsWith('$response.path')) {\n            // NOTE: handled the same way $request.path is handled\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('path.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in header parameter\n        }\n        else if (value.startsWith('$response.header')) {\n            return resolveData.responseHeaders[value.split('header.')[1]];\n        }\n    }\n    throw new Error(`Cannot create link because '${value}' is an invalid runtime expression.`);\n}\n/**\n * Check if a string is a runtime expression in the context of link parameters\n */\nfunction isRuntimeExpression(str) {\n    if (str === '$url' || str === '$method' || str === '$statusCode') {\n        return true;\n    }\n    else if (str.startsWith('$request.')) {\n        for (let i = 0; i < RUNTIME_REFERENCES.length; i++) {\n            if (str.startsWith(`$request.${RUNTIME_REFERENCES[i]}`)) {\n                return true;\n            }\n        }\n    }\n    else if (str.startsWith('$response.')) {\n        for (let i = 0; i < RUNTIME_REFERENCES.length; i++) {\n            if (str.startsWith(`$response.${RUNTIME_REFERENCES[i]}`)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * From the info object provided by the resolver, get a unique identifier, which\n * is the path formed from the nested field names (or aliases if provided)\n *\n * Used to store and retrieve the _openAPIToGraphQL of parent field\n */\nfunction getIdentifier(info) {\n    return getIdentifierRecursive(info.path);\n}\n/**\n * From the info object provided by the resolver, get the unique identifier of\n * the parent object\n */\nfunction getParentIdentifier(info) {\n    return getIdentifierRecursive(info.path.prev);\n}\n/**\n * Get the path of nested field names (or aliases if provided)\n */\nfunction getIdentifierRecursive(path) {\n    return typeof path.prev === 'undefined'\n        ? path.key\n        : /**\n         * Check if the identifier contains array indexing, if so remove.\n         *\n         * i.e. instead of 0/friends/1/friends/2/friends/user, create\n         * friends/friends/friends/user\n         */\n            isNaN(parseInt(path.key))\n                ? `${path.key}/${getIdentifierRecursive(path.prev)}`\n                : getIdentifierRecursive(path.prev);\n}\n/**\n * Create a new GraphQLError with an extensions field\n */\nfunction graphQLErrorWithExtensions(message, extensions) {\n    return new GraphQLError(message, null, null, null, null, null, extensions);\n}\n/**\n * Extracts data from the GraphQL arguments of a particular field\n *\n * Replaces the path parameter in the given path with values in the given args.\n * Furthermore adds the query parameters for a request.\n */\nexport function extractRequestDataFromArgs(path, parameters, args, // NOTE: argument keys are sanitized!\ndata) {\n    const qs = {};\n    const headers = {};\n    // Iterate parameters:\n    for (const param of parameters) {\n        const saneParamName = Oas3Tools.sanitize(param.name, !data.options.simpleNames\n            ? Oas3Tools.CaseStyle.camelCase\n            : Oas3Tools.CaseStyle.simple);\n        if (saneParamName && saneParamName in args) {\n            switch (param.in) {\n                // Path parameters\n                case 'path':\n                    path = path.replace(`{${param.name}}`, args[saneParamName]);\n                    break;\n                // Query parameters\n                case 'query':\n                    qs[param.name] = args[saneParamName];\n                    break;\n                // Header parameters\n                case 'header':\n                    headers[param.name] = args[saneParamName];\n                    break;\n                // Cookie parameters\n                case 'cookie':\n                    if (!('cookie' in headers)) {\n                        headers['cookie'] = '';\n                    }\n                    headers['cookie'] += `${param.name}=${args[saneParamName]}; `;\n                    break;\n                default:\n                    httpLog(`Warning: The parameter location '${param.in}' in the ` +\n                        `parameter '${param.name}' of operation '${path}' is not ` +\n                        `supported`);\n            }\n        }\n    }\n    return { path, qs, headers };\n}\nconst setSearchParamsFromObj = (url, obj, path) => {\n    for (const key in obj) {\n        const val = obj[key];\n        const newPath = [...path, key];\n        if (typeof val === 'object') {\n            setSearchParamsFromObj(url, val, newPath);\n        }\n        else {\n            const finalKey = newPath.reduce((acc, pathElem, i) => (i === 0 ? pathElem : `${acc}[${pathElem}]`), '');\n            url.searchParams.set(finalKey, val);\n        }\n    }\n};\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { TargetGraphQLType } from './types/operation';\n// Imports:\nimport * as Oas3Tools from './oas_3_tools';\nimport deepEqual from 'deep-equal';\nimport debug from 'debug';\nimport { handleWarning, getCommonPropertyNames, MitigationTypes } from './utils';\nimport { GraphQLOperationType } from './types/graphql';\nimport { methodToHttpMethod } from './oas_3_tools';\nconst preprocessingLog = debug('preprocessing');\n/**\n * Given an operation object from the OAS, create an Operation, which contains\n * the necessary data to create a GraphQL wrapper for said operation object.\n *\n * @param path The path of the operation object\n * @param method The method of the operation object\n * @param operationString A string representation of the path and the method (and the OAS title if applicable)\n * @param operationType Whether the operation should be turned into a Query/Mutation/Subscription operation\n * @param operation The operation object from the OAS\n * @param pathItem The path item object from the OAS from which the operation object is derived from\n * @param oas The OAS from which the path item and operation object are derived from\n * @param data An assortment of data which at this point is mainly used enable logging\n * @param options The options passed by the user\n */\nfunction processOperation(path, method, operationString, operationType, operation, pathItem, oas, data, options) {\n    // Response schema\n    const { responseContentType, responseSchema, responseSchemaNames, statusCode } = Oas3Tools.getResponseSchemaAndNames(path, method, operation, oas, data, options);\n    /**\n     * All GraphQL fields must have a type, which is derived from the response\n     * schema. Therefore, the response schema is the first to be determined.\n     */\n    if (typeof responseSchema === 'object') {\n        // Description\n        let description = operation.description;\n        if ((typeof description !== 'string' || description === '') &&\n            typeof operation.summary === 'string') {\n            description = operation.summary;\n        }\n        if (data.options.equivalentToMessages) {\n            // Description may not exist\n            if (typeof description !== 'string') {\n                description = '';\n            }\n            description += `\\n\\nEquivalent to ${operationString}`;\n        }\n        // Tags\n        const tags = operation.tags || [];\n        // OperationId\n        const operationId = typeof operation.operationId !== 'undefined'\n            ? operation.operationId\n            : Oas3Tools.generateOperationId(method, path);\n        // Request schema\n        const { payloadContentType, payloadSchema, payloadSchemaNames, payloadRequired } = Oas3Tools.getRequestSchemaAndNames(path, method, operation, oas);\n        // Request data definition\n        const payloadDefinition = payloadSchema && typeof payloadSchema !== 'undefined'\n            ? createDataDef(payloadSchemaNames, payloadSchema, true, data, oas)\n            : undefined;\n        // Links\n        const links = Oas3Tools.getLinks(path, method, operation, oas, data);\n        // Response data definition\n        const responseDefinition = createDataDef(responseSchemaNames, responseSchema, false, data, oas, links);\n        // Parameters\n        const parameters = Oas3Tools.getParameters(path, method, operation, pathItem, oas);\n        // Security protocols\n        const securityRequirements = options.viewer\n            ? Oas3Tools.getSecurityRequirements(operation, data.security, oas)\n            : [];\n        // Servers\n        const servers = Oas3Tools.getServers(operation, pathItem, oas);\n        // Whether to place this operation into an authentication viewer\n        const inViewer = securityRequirements.length > 0 && data.options.viewer !== false;\n        return {\n            operation,\n            operationId,\n            operationString,\n            operationType,\n            description,\n            tags,\n            path,\n            method,\n            payloadContentType,\n            payloadDefinition,\n            payloadRequired,\n            responseContentType,\n            responseDefinition,\n            parameters,\n            securityRequirements,\n            servers,\n            inViewer,\n            statusCode,\n            oas\n        };\n    }\n    else {\n        handleWarning({\n            mitigationType: MitigationTypes.MISSING_RESPONSE_SCHEMA,\n            message: `Operation ${operationString} has no (valid) response schema. ` +\n                `You can use the fillEmptyResponses option to create a ` +\n                `placeholder schema`,\n            data,\n            log: preprocessingLog\n        });\n    }\n}\n/**\n * Extract information from the OAS and put it inside a data structure that\n * is easier for OpenAPI-to-GraphQL to use\n */\nexport function preprocessOas(oass, options) {\n    const data = {\n        operations: {},\n        callbackOperations: {},\n        usedTypeNames: [\n            'Query',\n            'Mutation',\n            'Subscription' // Used by OpenAPI-to-GraphQL for root-level element\n        ],\n        defs: [],\n        security: {},\n        saneMap: {},\n        options,\n        oass\n    };\n    oass.forEach((oas) => {\n        // Store stats on OAS:\n        data.options.report.numOps += Oas3Tools.countOperations(oas);\n        data.options.report.numOpsMutation += Oas3Tools.countOperationsMutation(oas);\n        data.options.report.numOpsQuery += Oas3Tools.countOperationsQuery(oas);\n        if (data.options.createSubscriptionsFromCallbacks) {\n            data.options.report.numOpsSubscription += Oas3Tools.countOperationsSubscription(oas);\n        }\n        else {\n            data.options.report.numOpsSubscription = 0;\n        }\n        // Get security schemes\n        const currentSecurity = getProcessedSecuritySchemes(oas, data);\n        const commonSecurityPropertyName = getCommonPropertyNames(data.security, currentSecurity);\n        commonSecurityPropertyName.forEach((propertyName) => {\n            handleWarning({\n                mitigationType: MitigationTypes.DUPLICATE_SECURITY_SCHEME,\n                message: `Multiple OASs share security schemes with the same name '${propertyName}'`,\n                mitigationAddendum: `The security scheme from OAS ` +\n                    `'${currentSecurity[propertyName].oas.info.title}' will be ignored`,\n                data,\n                log: preprocessingLog\n            });\n        });\n        // Do not overwrite preexisting security schemes\n        data.security = { ...currentSecurity, ...data.security };\n        // Process all operations\n        for (let path in oas.paths) {\n            const pathItem = typeof oas.paths[path].$ref === 'string'\n                ? Oas3Tools.resolveRef(oas.paths[path].$ref, oas)\n                : oas.paths[path];\n            Object.keys(pathItem)\n                .filter((pathFields) => {\n                /**\n                 * Get only method fields that contain operation objects (e.g. \"get\",\n                 * \"put\", \"post\", \"delete\", etc.)\n                 *\n                 * Can also contain other fields such as summary or description\n                 */\n                return Oas3Tools.isHttpMethod(pathFields);\n            })\n                .forEach((rawMethod) => {\n                var _a, _b, _c;\n                const operationString = oass.length === 1\n                    ? Oas3Tools.formatOperationString(rawMethod, path)\n                    : Oas3Tools.formatOperationString(rawMethod, path, oas.info.title);\n                let httpMethod;\n                try {\n                    httpMethod = methodToHttpMethod(rawMethod);\n                }\n                catch (e) {\n                    handleWarning({\n                        mitigationType: MitigationTypes.INVALID_HTTP_METHOD,\n                        message: `Invalid HTTP method '${rawMethod}' in operation '${operationString}'`,\n                        data,\n                        log: preprocessingLog\n                    });\n                    return;\n                }\n                const operation = pathItem[httpMethod];\n                let operationType = httpMethod === Oas3Tools.HTTP_METHODS.get\n                    ? GraphQLOperationType.Query\n                    : GraphQLOperationType.Mutation;\n                // Option selectQueryOrMutationField can override operation type\n                if (typeof ((_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.selectQueryOrMutationField) === null || _a === void 0 ? void 0 : _a[oas.info.title]) === null || _b === void 0 ? void 0 : _b[path]) === null || _c === void 0 ? void 0 : _c[httpMethod]) === 'number'\n                // This is an enum, which is an integer value\n                ) {\n                    operationType =\n                        options.selectQueryOrMutationField[oas.info.title][path][httpMethod] === GraphQLOperationType.Mutation\n                            ? GraphQLOperationType.Mutation\n                            : GraphQLOperationType.Query;\n                }\n                const operationData = processOperation(path, httpMethod, operationString, operationType, operation, pathItem, oas, data, options);\n                if (typeof operationData === 'object') {\n                    /**\n                     * Handle operationId property name collision\n                     * May occur if multiple OAS are provided\n                     */\n                    if (!(operationData.operationId in data.operations)) {\n                        data.operations[operationData.operationId] = operationData;\n                    }\n                    else {\n                        handleWarning({\n                            mitigationType: MitigationTypes.DUPLICATE_OPERATIONID,\n                            message: `Multiple OASs share operations with the same operationId '${operationData.operationId}'`,\n                            mitigationAddendum: `The operation from the OAS '${operationData.oas.info.title}' will be ignored`,\n                            data,\n                            log: preprocessingLog\n                        });\n                        return;\n                    }\n                }\n                // Process all callbacks\n                if (data.options.createSubscriptionsFromCallbacks &&\n                    operation.callbacks) {\n                    Object.entries(operation.callbacks).forEach(([callbackName, callbackObjectOrRef]) => {\n                        let callback;\n                        if ('$ref' in callbackObjectOrRef &&\n                            typeof callbackObjectOrRef.$ref === 'string') {\n                            callback = Oas3Tools.resolveRef(callbackObjectOrRef.$ref, oas);\n                        }\n                        else {\n                            callback = callbackObjectOrRef;\n                        }\n                        Object.entries(callback).forEach(([callbackExpression, callbackPathItem]) => {\n                            const resolvedCallbackPathItem = !('$ref' in callbackPathItem)\n                                ? callbackPathItem\n                                : Oas3Tools.resolveRef(callbackPathItem.$ref, oas);\n                            const callbackOperationObjectMethods = Object.keys(resolvedCallbackPathItem).filter((objectKey) => {\n                                /**\n                                 * Get only fields that contain operation objects\n                                 *\n                                 * Can also contain other fields such as summary or description\n                                 */\n                                return Oas3Tools.isHttpMethod(objectKey);\n                            });\n                            if (callbackOperationObjectMethods.length > 0) {\n                                if (callbackOperationObjectMethods.length > 1) {\n                                    handleWarning({\n                                        mitigationType: MitigationTypes.CALLBACKS_MULTIPLE_OPERATION_OBJECTS,\n                                        message: `Callback '${callbackExpression}' on operation '${operationString}' has multiple operation objects with the methods '${callbackOperationObjectMethods}'. OpenAPI-to-GraphQL can only utilize one of these operation objects.`,\n                                        mitigationAddendum: `The operation with the method '${callbackOperationObjectMethods[0]}' will be selected and all others will be ignored.`,\n                                        data,\n                                        log: preprocessingLog\n                                    });\n                                }\n                                // Select only one of the operation object methods\n                                const callbackRawMethod = callbackOperationObjectMethods[0];\n                                const callbackOperationString = oass.length === 1\n                                    ? Oas3Tools.formatOperationString(httpMethod, callbackName)\n                                    : Oas3Tools.formatOperationString(httpMethod, callbackName, oas.info.title);\n                                let callbackHttpMethod;\n                                try {\n                                    callbackHttpMethod = methodToHttpMethod(callbackRawMethod);\n                                }\n                                catch (e) {\n                                    handleWarning({\n                                        mitigationType: MitigationTypes.INVALID_HTTP_METHOD,\n                                        message: `Invalid HTTP method '${rawMethod}' in callback '${callbackOperationString}' in operation '${operationString}'`,\n                                        data,\n                                        log: preprocessingLog\n                                    });\n                                    return;\n                                }\n                                const callbackOperation = processOperation(callbackExpression, callbackHttpMethod, callbackOperationString, GraphQLOperationType.Subscription, resolvedCallbackPathItem[callbackHttpMethod], callbackPathItem, oas, data, options);\n                                if (callbackOperation) {\n                                    /**\n                                     * Handle operationId property name collision\n                                     * May occur if multiple OAS are provided\n                                     */\n                                    if (callbackOperation &&\n                                        !(callbackOperation.operationId in\n                                            data.callbackOperations)) {\n                                        data.callbackOperations[callbackOperation.operationId] = callbackOperation;\n                                    }\n                                    else {\n                                        handleWarning({\n                                            mitigationType: MitigationTypes.DUPLICATE_OPERATIONID,\n                                            message: `Multiple OASs share callback operations with the same operationId '${callbackOperation.operationId}'`,\n                                            mitigationAddendum: `The callback operation from the OAS '${operationData.oas.info.title}' will be ignored`,\n                                            data,\n                                            log: preprocessingLog\n                                        });\n                                    }\n                                }\n                            }\n                        });\n                    });\n                }\n            });\n        }\n    });\n    return data;\n}\n/**\n * Extracts the security schemes from given OAS and organizes the information in\n * a data structure that is easier for OpenAPI-to-GraphQL to use\n *\n * Here is the structure of the data:\n * {\n *   {string} [sanitized name] { Contains information about the security protocol\n *     {string} rawName           Stores the raw security protocol name\n *     {object} def               Definition provided by OAS\n *     {object} parameters        Stores the names of the authentication credentials\n *                                  NOTE: Structure will depend on the type of the protocol\n *                                    (e.g. basic authentication, API key, etc.)\n *                                  NOTE: Mainly used for the AnyAuth viewers\n *     {object} schema            Stores the GraphQL schema to create the viewers\n *   }\n * }\n *\n * Here is an example:\n * {\n *   MyApiKey: {\n *     rawName: \"My_api_key\",\n *     def: { ... },\n *     parameters: {\n *       apiKey: MyKeyApiKey\n *     },\n *     schema: { ... }\n *   }\n *   MyBasicAuth: {\n *     rawName: \"My_basic_auth\",\n *     def: { ... },\n *     parameters: {\n *       username: MyBasicAuthUsername,\n *       password: MyBasicAuthPassword,\n *     },\n *     schema: { ... }\n *   }\n * }\n */\nfunction getProcessedSecuritySchemes(oas, data) {\n    const result = {};\n    const security = Oas3Tools.getSecuritySchemes(oas);\n    // Loop through all the security protocols\n    for (let schemeKey in security) {\n        const securityScheme = security[schemeKey];\n        // Determine the schema and the parameters for the security protocol\n        let schema;\n        let parameters = {};\n        let description;\n        switch (securityScheme.type) {\n            case 'apiKey':\n                description = `API key credentials for the security protocol '${schemeKey}'`;\n                if (data.oass.length > 1) {\n                    description += ` in ${oas.info.title}`;\n                }\n                parameters = {\n                    apiKey: Oas3Tools.sanitize(`${schemeKey}_apiKey`, Oas3Tools.CaseStyle.camelCase)\n                };\n                schema = {\n                    type: 'object',\n                    description,\n                    properties: {\n                        apiKey: {\n                            type: 'string'\n                        }\n                    }\n                };\n                break;\n            case 'http':\n                switch (securityScheme.scheme) {\n                    /**\n                     * TODO: HTTP has a number of authentication types\n                     *\n                     * See http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n                     */\n                    case 'basic':\n                        description = `Basic auth credentials for security protocol '${schemeKey}'`;\n                        parameters = {\n                            username: Oas3Tools.sanitize(`${schemeKey}_username`, Oas3Tools.CaseStyle.camelCase),\n                            password: Oas3Tools.sanitize(`${schemeKey}_password`, Oas3Tools.CaseStyle.camelCase)\n                        };\n                        schema = {\n                            type: 'object',\n                            description,\n                            properties: {\n                                username: {\n                                    type: 'string'\n                                },\n                                password: {\n                                    type: 'string'\n                                }\n                            }\n                        };\n                        break;\n                    default:\n                        handleWarning({\n                            mitigationType: MitigationTypes.UNSUPPORTED_HTTP_SECURITY_SCHEME,\n                            message: `Currently unsupported HTTP authentication protocol ` +\n                                `type 'http' and scheme '${securityScheme.scheme}' in OAS ` +\n                                `'${oas.info.title}'`,\n                            data,\n                            log: preprocessingLog\n                        });\n                }\n                break;\n            // TODO: Implement\n            case 'openIdConnect':\n                handleWarning({\n                    mitigationType: MitigationTypes.UNSUPPORTED_HTTP_SECURITY_SCHEME,\n                    message: `Currently unsupported HTTP authentication protocol ` +\n                        `type 'openIdConnect' in OAS '${oas.info.title}'`,\n                    data,\n                    log: preprocessingLog\n                });\n                break;\n            case 'oauth2':\n                handleWarning({\n                    mitigationType: MitigationTypes.OAUTH_SECURITY_SCHEME,\n                    message: `OAuth security scheme found in OAS '${oas.info.title}'`,\n                    data,\n                    log: preprocessingLog\n                });\n                // Continue because we do not want to create an OAuth viewer\n                continue;\n            default:\n                handleWarning({\n                    mitigationType: MitigationTypes.UNSUPPORTED_HTTP_SECURITY_SCHEME,\n                    message: `Unsupported HTTP authentication protocol` +\n                        `type '${securityScheme.type}' in OAS '${oas.info.title}'`,\n                    data,\n                    log: preprocessingLog\n                });\n        }\n        // Add protocol data to the output\n        result[schemeKey] = {\n            rawName: schemeKey,\n            def: securityScheme,\n            parameters,\n            schema,\n            oas\n        };\n    }\n    return result;\n}\n/**\n * Method to either create a new or reuse an existing, centrally stored data\n * definition.\n */\nexport function createDataDef(names, schemaOrRef, isInputObjectType, data, oas, links) {\n    const preferredName = getPreferredName(names);\n    // Basic validation test\n    if (typeof schemaOrRef !== 'object' && schemaOrRef !== null) {\n        handleWarning({\n            mitigationType: MitigationTypes.MISSING_SCHEMA,\n            message: `Could not create data definition for schema with ` +\n                `preferred name '${preferredName}' and schema '${JSON.stringify(schemaOrRef)}'`,\n            data,\n            log: preprocessingLog\n        });\n        return {\n            preferredName,\n            schema: null,\n            required: [],\n            links: null,\n            subDefinitions: null,\n            graphQLTypeName: null,\n            graphQLInputObjectTypeName: null,\n            targetGraphQLType: TargetGraphQLType.json\n        };\n    }\n    let schema;\n    if ('$ref' in schemaOrRef && typeof schemaOrRef.$ref === 'string') {\n        schema = Oas3Tools.resolveRef(schemaOrRef.$ref, oas);\n    }\n    else {\n        schema = schemaOrRef;\n    }\n    // Sanitize link keys\n    const saneLinks = sanitizeLinks({ links, data });\n    // Check for preexisting data definition\n    const index = getSchemaIndex(preferredName, schema, data.defs);\n    if (index !== -1) {\n        // Found existing data definition and fetch it\n        const existingDataDef = data.defs[index];\n        collapseLinksIntoDataDefinition({\n            additionalLinks: saneLinks,\n            existingDataDef,\n            data\n        });\n        return existingDataDef;\n    }\n    // There is no preexisting data definition, so create a new one\n    const name = getSchemaName(names, data.usedTypeNames);\n    let saneInputName;\n    let saneName;\n    if (name === names.fromExtension) {\n        saneName = name;\n        saneInputName = name + 'Input';\n    }\n    else {\n        // Store and sanitize the name\n        saneName = !data.options.simpleNames\n            ? Oas3Tools.sanitize(name, Oas3Tools.CaseStyle.PascalCase)\n            : Oas3Tools.capitalize(Oas3Tools.sanitize(name, Oas3Tools.CaseStyle.simple));\n        saneInputName = Oas3Tools.capitalize(saneName + 'Input');\n    }\n    Oas3Tools.storeSaneName(saneName, name, data.saneMap);\n    /**\n     * Recursively resolve allOf so type, properties, anyOf, oneOf, and\n     * required are resolved\n     */\n    const collapsedSchema = resolveAllOf(schema, {}, data, oas);\n    const targetGraphQLType = Oas3Tools.getSchemaTargetGraphQLType(collapsedSchema, data, oas);\n    const def = {\n        preferredName,\n        /**\n         * Note that schema may contain $ref or schema composition (e.g. allOf)\n         *\n         * TODO: the schema is used in getSchemaIndex, which allows us to check\n         * whether a dataDef has already been created for that particular\n         * schema and name pair. The look up should resolve references but\n         * currently, it does not.\n         */\n        schema,\n        required: [],\n        targetGraphQLType,\n        subDefinitions: undefined,\n        links: saneLinks,\n        graphQLTypeName: saneName,\n        graphQLInputObjectTypeName: saneInputName\n    };\n    // Used type names and defs of union and object types are pushed during creation\n    if (targetGraphQLType === TargetGraphQLType.object ||\n        targetGraphQLType === TargetGraphQLType.list ||\n        targetGraphQLType === TargetGraphQLType.enum) {\n        data.usedTypeNames.push(saneName);\n        data.usedTypeNames.push(saneInputName);\n        // Add the def to the master list\n        data.defs.push(def);\n    }\n    switch (targetGraphQLType) {\n        case TargetGraphQLType.object:\n            def.subDefinitions = {};\n            if (typeof collapsedSchema.properties === 'object' &&\n                Object.keys(collapsedSchema.properties).length > 0) {\n                addObjectPropertiesToDataDef(def, collapsedSchema, def.required, isInputObjectType, data, oas);\n            }\n            else {\n                handleWarning({\n                    mitigationType: MitigationTypes.OBJECT_MISSING_PROPERTIES,\n                    message: `Schema ${JSON.stringify(schema)} does not have ` +\n                        `any properties`,\n                    data,\n                    log: preprocessingLog\n                });\n                def.targetGraphQLType = TargetGraphQLType.json;\n            }\n            break;\n        case TargetGraphQLType.list:\n            if (typeof collapsedSchema.items === 'object') {\n                // Break schema down into component parts\n                // I.e. if it is an list type, create a reference to the list item type\n                // Or if it is an object type, create references to all of the field types\n                let itemsSchema = collapsedSchema.items;\n                let itemsName = `${name}ListItem`;\n                if ('$ref' in itemsSchema) {\n                    itemsName = itemsSchema.$ref.split('/').pop();\n                }\n                const extensionTypeName = collapsedSchema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName];\n                const subDefinition = createDataDef(\n                // Is this the correct classification for this name? It does not matter in the long run.\n                {\n                    fromExtension: extensionTypeName,\n                    fromRef: itemsName\n                }, itemsSchema, isInputObjectType, data, oas);\n                // Add list item reference\n                def.subDefinitions = subDefinition;\n            }\n            break;\n        case TargetGraphQLType.anyOfObject:\n            if (Array.isArray(collapsedSchema.anyOf)) {\n                /**\n                 * Sanity check\n                 *\n                 * Determining the targetGraphQLType should have checked the presence\n                 * of anyOf\n                 */\n                createAnyOfObject(saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas);\n            }\n            else {\n                throw new Error(`OpenAPI-to-GraphQL error: Cannot create object ` +\n                    `from anyOf because there is no anyOf in ` +\n                    `schema '${JSON.stringify(schemaOrRef, null, 2)}'`);\n            }\n            break;\n        case TargetGraphQLType.oneOfUnion:\n            /**\n             * Sanity check\n             *\n             * Determining the targetGraphQLType should have checked the presence\n             * of oneOf\n             */\n            if (Array.isArray(collapsedSchema.oneOf)) {\n                createOneOfUnion(saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas);\n            }\n            else {\n                throw new Error(`OpenAPI-to-GraphQL error: Cannot create union ` +\n                    `from oneOf because there is no oneOf in ` +\n                    `schema '${JSON.stringify(schemaOrRef, null, 2)}'`);\n            }\n            break;\n        case TargetGraphQLType.json:\n            def.targetGraphQLType = TargetGraphQLType.json;\n            break;\n        case null:\n            // No target GraphQL type\n            handleWarning({\n                mitigationType: MitigationTypes.UNKNOWN_TARGET_TYPE,\n                message: `No GraphQL target type could be identified for schema '${JSON.stringify(schema)}'.`,\n                data,\n                log: preprocessingLog\n            });\n            def.targetGraphQLType = TargetGraphQLType.json;\n            break;\n    }\n    return def;\n}\n/**\n * Returns the index of the data definition object in the given list that\n * contains the same schema and preferred name as the given one. Returns -1 if\n * that schema could not be found.\n */\nfunction getSchemaIndex(preferredName, schema, dataDefs) {\n    /**\n     * TODO: instead of iterating through the whole list every time, create a\n     * hashing function and store all of the DataDefinitions in a hashmap.\n     */\n    for (let index = 0; index < dataDefs.length; index++) {\n        const def = dataDefs[index];\n        /**\n         * TODO: deepEquals is not sufficient. We also need to resolve references.\n         * However, deepEquals should work for vast majority of cases.\n         */\n        if (preferredName === def.preferredName && deepEqual(schema, def.schema)) {\n            return index;\n        }\n    }\n    // The schema could not be found in the master list\n    return -1;\n}\n/**\n * Determines the preferred name to use for schema regardless of name collisions.\n *\n * In other words, determines the ideal name for a schema.\n *\n * Similar to getSchemaName() except it does not check if the name has already\n * been taken.\n */\nfunction getPreferredName(names) {\n    if (typeof names.preferred === 'string') {\n        return Oas3Tools.sanitize(names.preferred, Oas3Tools.CaseStyle.PascalCase); // CASE: preferred name already known\n    }\n    else if (typeof names.fromRef === 'string') {\n        return Oas3Tools.sanitize(names.fromRef, Oas3Tools.CaseStyle.PascalCase); // CASE: name from reference\n    }\n    else if (typeof names.fromSchema === 'string') {\n        return Oas3Tools.sanitize(names.fromSchema, Oas3Tools.CaseStyle.PascalCase); // CASE: name from schema (i.e., \"title\" property in schema)\n    }\n    else if (typeof names.fromPath === 'string') {\n        return Oas3Tools.sanitize(names.fromPath, Oas3Tools.CaseStyle.PascalCase); // CASE: name from path\n    }\n    else {\n        return 'PlaceholderName'; // CASE: placeholder name\n    }\n}\n/**\n * Determines name to use for schema from previously determined schemaNames and\n * considering not reusing existing names.\n */\nfunction getSchemaName(names, usedNames) {\n    if (Object.keys(names).length === 1 && typeof names.preferred === 'string') {\n        throw new Error(`Cannot create data definition without name(s), excluding the ` +\n            `preferred name.`);\n    }\n    let schemaName;\n    if (typeof names.fromExtension === 'string') {\n        const extensionTypeName = names.fromExtension;\n        if (!Oas3Tools.isSanitized(extensionTypeName)) {\n            throw new Error(`Cannot create type with name \"${extensionTypeName}\".\\nYou ` +\n                `provided \"${extensionTypeName}\" in ` +\n                `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName}, but it is not ` +\n                `GraphQL-safe.\"`);\n        }\n        if (usedNames.includes(extensionTypeName)) {\n            throw new Error(`Cannot create type with name \"${extensionTypeName}\".\\nYou provided ` +\n                `\"${names.fromExtension}\" in ` +\n                `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName}, but it conflicts ` +\n                `with another type named \"${extensionTypeName}\".`);\n        }\n        if (!usedNames.includes(extensionTypeName)) {\n            schemaName = names.fromExtension;\n        }\n    }\n    // CASE: name from reference\n    if (!schemaName && typeof names.fromRef === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromRef, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromRef;\n        }\n    }\n    // CASE: name from schema (i.e., \"title\" property in schema)\n    if (!schemaName && typeof names.fromSchema === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromSchema, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromSchema;\n        }\n    }\n    // CASE: name from path\n    if (!schemaName && typeof names.fromPath === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromPath, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromPath;\n        }\n    }\n    // CASE: all names are already used - create approximate name\n    if (!schemaName) {\n        schemaName = Oas3Tools.sanitize(typeof names.fromExtension === 'string'\n            ? names.fromExtension\n            : typeof names.fromRef === 'string'\n                ? names.fromRef\n                : typeof names.fromSchema === 'string'\n                    ? names.fromSchema\n                    : typeof names.fromPath === 'string'\n                        ? names.fromPath\n                        : 'PlaceholderName', Oas3Tools.CaseStyle.PascalCase);\n    }\n    if (usedNames.includes(schemaName)) {\n        let appendix = 2;\n        /**\n         * GraphQL Objects cannot share the name so if the name already exists in\n         * the master list append an incremental number until the name does not\n         * exist anymore.\n         */\n        while (usedNames.includes(`${schemaName}${appendix}`)) {\n            appendix++;\n        }\n        schemaName = `${schemaName}${appendix}`;\n    }\n    return schemaName;\n}\n/**\n * Sanitize the keys of a link object\n */\nfunction sanitizeLinks({ links, data }) {\n    const saneLinks = {};\n    if (typeof links === 'object') {\n        Object.keys(links).forEach((linkKey) => {\n            const link = links[linkKey];\n            const extensionFieldName = link[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName];\n            if (!Oas3Tools.isSanitized(extensionFieldName)) {\n                throw new Error(`Cannot create link field with name ` +\n                    `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it is not ` +\n                    `GraphQL-safe.\"`);\n            }\n            if (extensionFieldName in saneLinks) {\n                throw new Error(`Cannot create link field with name ` +\n                    `\"${extensionFieldName}\".\\nYou provided ` +\n                    `\"${extensionFieldName}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                    `conflicts with another field named \"${extensionFieldName}\".`);\n            }\n            const linkFieldName = Oas3Tools.sanitize(extensionFieldName || linkKey, !data.options.simpleNames\n                ? Oas3Tools.CaseStyle.camelCase\n                : Oas3Tools.CaseStyle.simple);\n            saneLinks[linkFieldName] = link;\n        });\n    }\n    return saneLinks;\n}\n/**\n * Given an existing data definition, collapse the link object with the existing\n * one captured in the data definition.\n *\n *\n */\nfunction collapseLinksIntoDataDefinition({ additionalLinks, existingDataDef, data }) {\n    /**\n     * Collapse links if possible, i.e. if the current operation has links,\n     * combine them with the prexisting ones\n     */\n    if (typeof existingDataDef.links === 'object') {\n        // Check if there are any overlapping links\n        Object.keys(existingDataDef.links).forEach((saneLinkKey) => {\n            if (!deepEqual(existingDataDef.links[saneLinkKey], additionalLinks[saneLinkKey])) {\n                handleWarning({\n                    mitigationType: MitigationTypes.DUPLICATE_LINK_KEY,\n                    message: `Multiple operations with the same response body share the same sanitized ` +\n                        `link key '${saneLinkKey}' but have different link definitions ` +\n                        `'${JSON.stringify(existingDataDef.links[saneLinkKey])}' and ` +\n                        `'${JSON.stringify(additionalLinks[saneLinkKey])}'.`,\n                    data,\n                    log: preprocessingLog\n                });\n                return;\n            }\n        });\n        /**\n         * Collapse the links\n         *\n         * Avoid overwriting preexisting links\n         */\n        existingDataDef.links = { ...additionalLinks, ...existingDataDef.links };\n    }\n    else {\n        // No preexisting links, so simply assign the links\n        existingDataDef.links = additionalLinks;\n    }\n}\n/**\n * Recursively add all of the properties of an object to the data definition\n */\nfunction addObjectPropertiesToDataDef(def, schema, required, isInputObjectType, data, oas) {\n    /**\n     * Resolve all required properties\n     *\n     * TODO: required may contain duplicates, which is not necessarily a problem\n     */\n    if (Array.isArray(schema.required)) {\n        schema.required.forEach((requiredProperty) => {\n            required.push(requiredProperty);\n        });\n    }\n    for (let propertyKey in schema.properties) {\n        if (!(propertyKey in def.subDefinitions)) {\n            let propSchemaName = propertyKey;\n            const propSchemaOrRef = schema.properties[propertyKey];\n            let propSchema;\n            if ('$ref' in propSchemaOrRef &&\n                typeof propSchemaOrRef.$ref === 'string') {\n                propSchemaName = propSchemaOrRef.$ref.split('/').pop();\n                propSchema = Oas3Tools.resolveRef(propSchemaOrRef.$ref, oas);\n            }\n            else {\n                propSchema = propSchemaOrRef;\n            }\n            const extensionTypeName = propSchema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName];\n            const subDefinition = createDataDef({\n                fromExtension: extensionTypeName,\n                fromRef: propSchemaName,\n                fromSchema: propSchema.title // TODO: Redundant because of fromRef but arguably, propertyKey is a better field name and title is a better type name\n            }, propSchema, isInputObjectType, data, oas);\n            // Add field type references\n            def.subDefinitions[propertyKey] = subDefinition;\n        }\n        else {\n            handleWarning({\n                mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                message: `By way of resolving 'allOf', multiple schemas contain ` +\n                    `properties with the same name, preventing consolidation. Cannot ` +\n                    `add property '${propertyKey}' from schema '${JSON.stringify(schema)}' ` +\n                    `to dataDefinition '${JSON.stringify(def)}'`,\n                data,\n                log: preprocessingLog\n            });\n        }\n    }\n}\n/**\n * Recursively traverse a schema and resolve allOf by appending the data to the\n * parent schema\n */\nfunction resolveAllOf(schema, references, data, oas) {\n    // Dereference schema\n    if ('$ref' in schema && typeof schema.$ref === 'string') {\n        if (schema.$ref in references) {\n            return references[schema.$ref];\n        }\n        const reference = schema.$ref;\n        schema = Oas3Tools.resolveRef(schema.$ref, oas);\n        references[reference] = schema;\n    }\n    /**\n     * TODO: Is there a better method to copy the schema?\n     *\n     * Copy the schema\n     */\n    const collapsedSchema = JSON.parse(JSON.stringify(schema));\n    // Resolve allOf\n    if (Array.isArray(collapsedSchema.allOf)) {\n        collapsedSchema.allOf.forEach((memberSchema) => {\n            const collapsedMemberSchema = resolveAllOf(memberSchema, references, data, oas);\n            // Collapse type if applicable\n            if (collapsedMemberSchema.type) {\n                if (!collapsedSchema.type) {\n                    collapsedSchema.type = collapsedMemberSchema.type;\n                    // Check for incompatible schema type\n                }\n                else if (collapsedSchema.type !== collapsedMemberSchema.type) {\n                    handleWarning({\n                        mitigationType: MitigationTypes.UNRESOLVABLE_SCHEMA,\n                        message: `Resolving 'allOf' field in schema '${JSON.stringify(collapsedSchema)}' ` + `results in incompatible schema type.`,\n                        data,\n                        log: preprocessingLog\n                    });\n                }\n            }\n            // Collapse properties if applicable\n            if ('properties' in collapsedMemberSchema) {\n                if (!('properties' in collapsedSchema)) {\n                    collapsedSchema.properties = {};\n                }\n                Object.entries(collapsedMemberSchema.properties).forEach(([propertyName, property]) => {\n                    if (!(propertyName in collapsedSchema.properties)) {\n                        collapsedSchema.properties[propertyName] = property;\n                        // Conflicting property\n                    }\n                    else {\n                        handleWarning({\n                            mitigationType: MitigationTypes.UNRESOLVABLE_SCHEMA,\n                            message: `Resolving 'allOf' field in schema '${JSON.stringify(collapsedSchema)}' ` +\n                                `results in incompatible property field '${propertyName}'.`,\n                            data,\n                            log: preprocessingLog\n                        });\n                    }\n                });\n            }\n            // Collapse oneOf if applicable\n            if ('oneOf' in collapsedMemberSchema) {\n                if (!('oneOf' in collapsedSchema)) {\n                    collapsedSchema.oneOf = [];\n                }\n                collapsedMemberSchema.oneOf.forEach((oneOfProperty) => {\n                    collapsedSchema.oneOf.push(oneOfProperty);\n                });\n            }\n            // Collapse anyOf if applicable\n            if ('anyOf' in collapsedMemberSchema) {\n                if (!('anyOf' in collapsedSchema)) {\n                    collapsedSchema.anyOf = [];\n                }\n                collapsedMemberSchema.anyOf.forEach((anyOfProperty) => {\n                    collapsedSchema.anyOf.push(anyOfProperty);\n                });\n            }\n            // Collapse required if applicable\n            if ('required' in collapsedMemberSchema) {\n                if (!('required' in collapsedSchema)) {\n                    collapsedSchema.required = [];\n                }\n                collapsedMemberSchema.required.forEach((requiredProperty) => {\n                    if (!collapsedSchema.required.includes(requiredProperty)) {\n                        collapsedSchema.required.push(requiredProperty);\n                    }\n                });\n            }\n        });\n    }\n    return collapsedSchema;\n}\n/**\n * In the context of schemas that use keywords that combine member schemas,\n * collect data on certain aspects so it is all in one place for processing.\n */\nfunction getMemberSchemaData(schemas, data, oas) {\n    const result = {\n        allTargetGraphQLTypes: [],\n        allProperties: [],\n        allRequired: [] // Contains the required of all the member schemas\n    };\n    schemas.forEach((schemaOrRef) => {\n        // Dereference schemas\n        let schema;\n        if ('$ref' in schemaOrRef && typeof schemaOrRef.$ref === 'string') {\n            schema = Oas3Tools.resolveRef(schemaOrRef.$ref, oas);\n        }\n        else {\n            schema = schemaOrRef;\n        }\n        // Consolidate target GraphQL type\n        const memberTargetGraphQLType = Oas3Tools.getSchemaTargetGraphQLType(schema, data, oas);\n        if (memberTargetGraphQLType) {\n            result.allTargetGraphQLTypes.push(memberTargetGraphQLType);\n        }\n        // Consolidate properties\n        if (schema.properties) {\n            result.allProperties.push(schema.properties);\n        }\n        // Consolidate required\n        if (schema.required) {\n            result.allRequired = result.allRequired.concat(schema.required);\n        }\n    });\n    return result;\n}\nfunction createAnyOfObject(saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas) {\n    /**\n     * Used to find incompatible properties\n     *\n     * Store a properties from the base and member schemas. Start with the base\n     * schema properties.\n     *\n     * If there are multiple properties with the same name, it only needs to store\n     * the contents of one of them.\n     *\n     * If it is conflicting, add to incompatiable\n     * properties; if not, do nothing.\n     */\n    const allProperties = {};\n    if ('properties' in collapsedSchema) {\n        Object.entries(collapsedSchema.properties).forEach(([propertyName, propertyObjectOrRef]) => {\n            let property;\n            if ('$ref' in propertyObjectOrRef &&\n                typeof propertyObjectOrRef.$ref === 'string') {\n                property = Oas3Tools.resolveRef(propertyObjectOrRef.$ref, oas);\n            }\n            else {\n                property = propertyObjectOrRef;\n            }\n            allProperties[propertyName] = property;\n        });\n    }\n    // Store the names of properties with conflicting contents\n    const incompatibleProperties = new Set();\n    // An array containing the properties of all member schemas\n    const memberProperties = [];\n    collapsedSchema.anyOf.forEach((memberSchemaOrRef) => {\n        // Collapsed schema should already be recursively resolved\n        let memberSchema;\n        if ('$ref' in memberSchemaOrRef &&\n            typeof memberSchemaOrRef.$ref === 'string') {\n            memberSchema = Oas3Tools.resolveRef(memberSchemaOrRef.$ref, oas);\n        }\n        else {\n            memberSchema = memberSchemaOrRef;\n        }\n        if (memberSchema.properties) {\n            const properties = {};\n            Object.entries(memberSchema.properties).forEach(([propertyName, propertyObjectOrRef]) => {\n                let property;\n                if ('$ref' in propertyObjectOrRef &&\n                    typeof propertyObjectOrRef.$ref === 'string') {\n                    property = Oas3Tools.resolveRef(propertyObjectOrRef.$ref, oas);\n                }\n                else {\n                    property = propertyObjectOrRef;\n                }\n                properties[propertyName] = property;\n            });\n            memberProperties.push(properties);\n        }\n    });\n    /**\n     * TODO: Check for consistent properties across all member schemas and\n     * make them into non-nullable properties by manipulating the\n     * required field\n     */\n    /**\n     * Add properties from the member schemas (from anyOf) as well as check\n     * for incompatible properties (conflicting properties between member\n     * schemas and other member schemas or the base schema)\n     */\n    memberProperties.forEach((properties) => {\n        Object.keys(properties).forEach((propertyName) => {\n            if (!incompatibleProperties.has(propertyName) && // Has not been already identified as a problematic property\n                typeof allProperties[propertyName] === 'object' &&\n                !deepEqual(properties[propertyName], allProperties[propertyName])) {\n                incompatibleProperties.add(propertyName);\n            }\n            /**\n             * Save property to check in future iterations\n             *\n             * Can overwrite. If there is an incompatible property, we are\n             * guaranteed to record it in incompatibleProperties\n             */\n            allProperties[propertyName] = properties[propertyName];\n        });\n    });\n    def.subDefinitions = {};\n    if (typeof collapsedSchema.properties === 'object' &&\n        Object.keys(collapsedSchema.properties).length > 0) {\n        /**\n         * TODO: Instead of creating the entire dataDefinition, disregard\n         * incompatible properties.\n         */\n        addObjectPropertiesToDataDef(def, collapsedSchema, def.required, isInputObjectType, data, oas);\n    }\n    memberProperties.forEach((properties) => {\n        Object.keys(properties).forEach((propertyName) => {\n            if (!incompatibleProperties.has(propertyName)) {\n                // Dereferenced by processing anyOfData\n                const propertySchema = properties[propertyName];\n                const extensionTypeName = propertySchema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName];\n                const subDefinition = createDataDef({\n                    fromExtension: extensionTypeName,\n                    fromRef: propertyName,\n                    fromSchema: propertySchema.title // TODO: Currently not utilized because of fromRef but arguably, propertyKey is a better field name and title is a better type name\n                }, propertySchema, isInputObjectType, data, oas);\n                /**\n                 * Add field type references\n                 * There should not be any collisions\n                 */\n                def.subDefinitions[propertyName] = subDefinition;\n            }\n        });\n    });\n    // Add in incompatible properties\n    incompatibleProperties.forEach((propertyName) => {\n        // TODO: add description\n        def.subDefinitions[propertyName] = {\n            targetGraphQLType: TargetGraphQLType.json\n        };\n    });\n    data.usedTypeNames.push(saneName);\n    data.usedTypeNames.push(saneInputName);\n    data.defs.push(def);\n    def.targetGraphQLType = TargetGraphQLType.object;\n    return def;\n}\nfunction createOneOfUnion(saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas) {\n    if (isInputObjectType) {\n        handleWarning({\n            mitigationType: MitigationTypes.INPUT_UNION,\n            message: `Input object types cannot be composed of union types.`,\n            data,\n            log: preprocessingLog\n        });\n        def.targetGraphQLType = TargetGraphQLType.json;\n        return def;\n    }\n    def.subDefinitions = [];\n    collapsedSchema.oneOf.forEach((memberSchemaOrRef) => {\n        // Collapsed schema should already be recursively resolved\n        let fromRef;\n        let memberSchema;\n        if ('$ref' in memberSchemaOrRef &&\n            typeof memberSchemaOrRef.$ref === 'string') {\n            fromRef = memberSchemaOrRef.$ref.split('/').pop();\n            memberSchema = Oas3Tools.resolveRef(memberSchemaOrRef.$ref, oas);\n        }\n        else {\n            memberSchema = memberSchemaOrRef;\n        }\n        const extensionTypeName = memberSchema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName];\n        const subDefinition = createDataDef({\n            fromExtension: extensionTypeName,\n            fromRef,\n            fromSchema: memberSchema.title,\n            fromPath: `${saneName}Member`\n        }, memberSchema, isInputObjectType, data, oas);\n        def.subDefinitions.push(subDefinition);\n    });\n    // Not all member schemas may have been turned into GraphQL member types\n    if (def.subDefinitions.length > 0 &&\n        def.subDefinitions.every((subDefinition) => {\n            return subDefinition.targetGraphQLType === TargetGraphQLType.object;\n        })) {\n        // Ensure all member schemas have been verified as object types\n        data.usedTypeNames.push(saneName);\n        data.usedTypeNames.push(saneInputName);\n        data.defs.push(def);\n        def.targetGraphQLType = TargetGraphQLType.oneOfUnion;\n        return def;\n    }\n    else {\n        handleWarning({\n            mitigationType: MitigationTypes.COMBINE_SCHEMAS,\n            message: `Schema '${JSON.stringify(def.schema)}' contains 'oneOf' so ` +\n                `create a GraphQL union type but all member schemas are not` +\n                `object types and union member types must be object types.`,\n            mitigationAddendum: `Use arbitrary JSON type instead.`,\n            data,\n            log: preprocessingLog\n        });\n        def.targetGraphQLType = TargetGraphQLType.json;\n        return def;\n    }\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { TargetGraphQLType } from './types/operation';\nimport { GraphQLScalarType, GraphQLObjectType, GraphQLString, GraphQLID, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLNonNull, GraphQLList, GraphQLInputObjectType, GraphQLEnumType, GraphQLUnionType } from 'graphql';\n// Imports:\nimport { GraphQLBigInt, GraphQLJSON } from 'graphql-scalars';\nimport * as Oas3Tools from './oas_3_tools';\nimport { getResolver, OPENAPI_TO_GRAPHQL } from './resolver_builder';\nimport { createDataDef } from './preprocessor';\nimport debug from 'debug';\nimport { handleWarning, sortObject, MitigationTypes } from './utils';\n/**\n * We need to slightly modify the GraphQLJSON type.\n *\n * We need to remove the _openAPIToGraphQL or else we will leak data about\n * the API requests. Therefore, we need to change the serialize() function\n * in the GraphQLJSON type.\n */\nconst CleanGraphQLJSON = new GraphQLScalarType({\n    ...GraphQLJSON.toConfig(),\n    serialize: (value) => {\n        let cleanValue;\n        /**\n         * If the value is an object and contains the _openAPIToGraphQL,\n         * make a copy of the object without said field.\n         *\n         * NOTE: The value will only contain the _openAPIToGraphQL field if\n         * an OAS operation is determined to return an arbitrary JSON type.\n         * Not if a property of the return type contains an arbitrary JSON\n         * type.\n         */\n        if (value &&\n            typeof value === 'object' &&\n            typeof value[OPENAPI_TO_GRAPHQL] === 'object') {\n            cleanValue = { ...value };\n            delete cleanValue[OPENAPI_TO_GRAPHQL];\n            /**\n             * As a GraphQLJSON type, the value can also be a scalar or array or\n             * an object without the _openAPIToGraphQL field. In that case,\n             * just use the original value.\n             */\n        }\n        else {\n            cleanValue = value;\n        }\n        // Use original serialize() function but with clean value\n        return GraphQLJSON.serialize(cleanValue);\n    }\n});\nconst translationLog = debug('translation');\n/**\n * Creates and returns a GraphQL type for the given JSON schema.\n */\nexport function getGraphQLType({ def, operation, data, iteration = 0, isInputObjectType = false, fetch }) {\n    const name = isInputObjectType\n        ? def.graphQLInputObjectTypeName\n        : def.graphQLTypeName;\n    // Avoid excessive iterations\n    if (iteration === 50) {\n        throw new Error(`GraphQL type ${name} has excessive nesting of other types`);\n    }\n    switch (def.targetGraphQLType) {\n        // CASE: object - create object type\n        case TargetGraphQLType.object:\n        case TargetGraphQLType.anyOfObject:\n            return createOrReuseOt({\n                def,\n                operation,\n                data,\n                iteration,\n                isInputObjectType,\n                fetch\n            });\n        // CASE: union - create union type\n        case TargetGraphQLType.oneOfUnion:\n            return createOrReuseUnion({\n                def,\n                operation,\n                data,\n                iteration,\n                fetch\n            });\n        // CASE: list - create list type\n        case TargetGraphQLType.list:\n            return createOrReuseList({\n                def,\n                operation,\n                data,\n                iteration,\n                isInputObjectType,\n                fetch\n            });\n        // CASE: enum - create enum type\n        case TargetGraphQLType.enum:\n            return createOrReuseEnum({\n                def,\n                data\n            });\n        // CASE: scalar - return scalar type\n        case TargetGraphQLType.string:\n            def.graphQLType = GraphQLString;\n            return def.graphQLType;\n        case TargetGraphQLType.integer:\n            def.graphQLType = GraphQLInt;\n            return def.graphQLType;\n        case TargetGraphQLType.float:\n            def.graphQLType = GraphQLFloat;\n            return def.graphQLType;\n        case TargetGraphQLType.boolean:\n            def.graphQLType = GraphQLBoolean;\n            return def.graphQLType;\n        case TargetGraphQLType.id:\n            def.graphQLType = GraphQLID;\n            return def.graphQLType;\n        case TargetGraphQLType.json:\n            def.graphQLType = CleanGraphQLJSON;\n            return def.graphQLType;\n        case TargetGraphQLType.bigint:\n            def.graphQLType = GraphQLBigInt;\n            return def.graphQLType;\n    }\n}\n/**\n * Creates an (input) object type or return an existing one, and stores it\n * in data\n *\n * A returned GraphQLObjectType has the following internal structure:\n *\n *   new GraphQLObjectType({\n *     name        // Optional name of the type\n *     description // Optional description of type\n *     fields      // REQUIRED returning fields\n *       type      // REQUIRED definition of the field type\n *       args      // Optional definition of types\n *       resolve   // Optional function defining how to obtain this type\n *   })\n */\nfunction createOrReuseOt({ def, operation, data, iteration, isInputObjectType, fetch }) {\n    // Try to reuse a preexisting (input) object type\n    // CASE: query - reuse object type\n    if (!isInputObjectType) {\n        if (def.graphQLType && typeof def.graphQLType !== 'undefined') {\n            translationLog(`Reuse object type '${def.graphQLTypeName}'` +\n                (typeof operation === 'object'\n                    ? ` (for operation '${operation.operationString}')`\n                    : ''));\n            return def.graphQLType;\n        }\n        // CASE: mutation - reuse input object type\n    }\n    else {\n        if (def.graphQLInputObjectType &&\n            typeof def.graphQLInputObjectType !== 'undefined') {\n            translationLog(`Reuse input object type '${def.graphQLInputObjectTypeName}'` +\n                (typeof operation === 'object'\n                    ? ` (for operation '${operation.operationString}')`\n                    : ''));\n            return def.graphQLInputObjectType;\n        }\n    }\n    // Cannot reuse preexisting (input) object type, therefore create one\n    const schema = def.schema;\n    const description = schema.description;\n    // CASE: query - create object type\n    if (!isInputObjectType) {\n        translationLog(`Create object type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object'\n                ? ` (for operation '${operation.operationString}')`\n                : ''));\n        def.graphQLType = new GraphQLObjectType({\n            name: def.graphQLTypeName,\n            description,\n            fields: () => {\n                return createFields({\n                    def,\n                    links: def.links,\n                    operation,\n                    data,\n                    iteration,\n                    isInputObjectType: false,\n                    fetch\n                });\n            }\n        });\n        return def.graphQLType;\n        // CASE: mutation - create input object type\n    }\n    else {\n        translationLog(`Create input object type '${def.graphQLInputObjectTypeName}'` +\n            (typeof operation === 'object'\n                ? ` (for operation '${operation.operationString}')`\n                : ''));\n        def.graphQLInputObjectType = new GraphQLInputObjectType({\n            name: def.graphQLInputObjectTypeName,\n            description,\n            fields: () => {\n                return createFields({\n                    def,\n                    links: {},\n                    operation,\n                    data,\n                    iteration,\n                    isInputObjectType: true,\n                    fetch\n                });\n            }\n        });\n        return def.graphQLInputObjectType;\n    }\n}\n/**\n * Creates a union type or return an existing one, and stores it in data\n */\nfunction createOrReuseUnion({ def, operation, data, iteration, fetch }) {\n    // Try to reuse existing union type\n    if (typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse union type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object'\n                ? ` (for operation '${operation.operationString}')`\n                : ''));\n        return def.graphQLType;\n    }\n    else {\n        translationLog(`Create union type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object'\n                ? ` (for operation '${operation.operationString}')`\n                : ''));\n        const schema = def.schema;\n        const description = typeof schema.description !== 'undefined'\n            ? schema.description\n            : 'No description available.';\n        const memberTypeDefinitions = def.subDefinitions;\n        const types = Object.values(memberTypeDefinitions).map((memberTypeDefinition) => {\n            return getGraphQLType({\n                def: memberTypeDefinition,\n                operation,\n                data,\n                iteration: iteration + 1,\n                isInputObjectType: false,\n                fetch\n            });\n        });\n        /**\n         * Check for ambiguous member types\n         *\n         * i.e. member types that can be confused with each other.\n         */\n        checkAmbiguousMemberTypes(def, types, data);\n        def.graphQLType = new GraphQLUnionType({\n            name: def.graphQLTypeName,\n            description,\n            types,\n            resolveType: (source, context, info) => {\n                const properties = Object.keys(source)\n                    // Remove custom _openAPIToGraphQL property used to pass data\n                    .filter((property) => property !== '_openAPIToGraphQL');\n                /**\n                 * Find appropriate member type\n                 *\n                 * TODO: currently, the check is performed by only checking the property\n                 * names. In the future, we should also check the types of those\n                 * properties.\n                 *\n                 * TODO: there is a chance a that an intended member type cannot be\n                 * identified if, for whatever reason, the return data is a superset\n                 * of the fields specified in the OAS\n                 */\n                return types.find((type) => {\n                    const typeFields = Object.keys(type.getFields());\n                    // The type should be a superset of the properties\n                    if (properties.length <= typeFields.length) {\n                        return properties.every((property) => typeFields.includes(property));\n                    }\n                    return false;\n                });\n            }\n        });\n        return def.graphQLType;\n    }\n}\n/**\n * Check for ambiguous member types\n *\n * i.e. member types that can be confused with each other.\n */\nfunction checkAmbiguousMemberTypes(def, types, data) {\n    types.sort((a, b) => {\n        const aFieldLength = Object.keys(a.getFields()).length;\n        const bFieldLength = Object.keys(b.getFields()).length;\n        if (aFieldLength < bFieldLength) {\n            return -1;\n        }\n        else if (aFieldLength < bFieldLength) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    });\n    for (let i = 0; i < types.length - 1; i++) {\n        const currentType = types[i];\n        for (let j = i + 1; j < types.length; j++) {\n            const otherType = types[j];\n            // TODO: Check the value, not just the field name\n            if (Object.keys(currentType.getFields()).every((field) => {\n                return Object.keys(otherType.getFields()).includes(field);\n            })) {\n                handleWarning({\n                    mitigationType: MitigationTypes.AMBIGUOUS_UNION_MEMBERS,\n                    message: `Union created from schema '${JSON.stringify(def)}' contains ` +\n                        `member types such as '${currentType}' and '${otherType}' ` +\n                        `which are ambiguous. Ambiguous member types can cause ` +\n                        `problems when trying to resolve types.`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n        }\n    }\n}\n/**\n * Creates a list type or returns an existing one, and stores it in data\n */\nfunction createOrReuseList({ def, operation, iteration, isInputObjectType, data, fetch }) {\n    const name = isInputObjectType\n        ? def.graphQLInputObjectTypeName\n        : def.graphQLTypeName;\n    // Try to reuse existing Object Type\n    if (!isInputObjectType &&\n        def.graphQLType &&\n        typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse GraphQLList '${def.graphQLTypeName}'`);\n        return def.graphQLType;\n    }\n    else if (isInputObjectType &&\n        def.graphQLInputObjectType &&\n        typeof def.graphQLInputObjectType !== 'undefined') {\n        translationLog(`Reuse GraphQLList '${def.graphQLInputObjectTypeName}'`);\n        return def.graphQLInputObjectType;\n    }\n    // Create new List Object Type\n    translationLog(`Create GraphQLList '${def.graphQLTypeName}'`);\n    // Get definition of the list item, which should be in the sub definitions\n    const itemDef = def.subDefinitions;\n    // Equivalent to schema.items\n    const itemsSchema = itemDef.schema;\n    // Equivalent to `{name}ListItem`\n    const itemsName = itemDef.graphQLTypeName;\n    const itemsType = getGraphQLType({\n        def: itemDef,\n        data,\n        operation,\n        iteration: iteration + 1,\n        isInputObjectType,\n        fetch\n    });\n    if (itemsType !== null) {\n        const listObjectType = new GraphQLList(itemsType);\n        // Store newly created list type\n        if (!isInputObjectType) {\n            def.graphQLType = listObjectType;\n        }\n        else {\n            def.graphQLInputObjectType = listObjectType;\n        }\n        return listObjectType;\n    }\n    else {\n        throw new Error(`Cannot create list item object type '${itemsName}' in list ` +\n            `'${name}' with schema '${JSON.stringify(itemsSchema)}'.`);\n    }\n}\n/**\n * Creates an enum type or returns an existing one, and stores it in data\n */\nfunction createOrReuseEnum({ def, data }) {\n    /**\n     * Try to reuse existing enum type\n     *\n     * Enum types do not have an input variant so only check def.ot\n     */\n    if (def.graphQLType && typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse GraphQLEnumType '${def.graphQLTypeName}'`);\n        return def.graphQLType;\n    }\n    else {\n        translationLog(`Create GraphQLEnumType '${def.graphQLTypeName}'`);\n        const values = {};\n        const extensionEnumMapping = def.schema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.EnumMapping] || {};\n        def.schema.enum.forEach((enumValue) => {\n            const enumValueString = enumValue.toString();\n            const extensionEnumValue = extensionEnumMapping[enumValueString];\n            if (!Oas3Tools.isSanitized(extensionEnumValue)) {\n                throw new Error(`Cannot create enum value \"${extensionEnumValue}\".\\nYou ` +\n                    `provided \"${extensionEnumValue}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.EnumMapping}, but it is not ` +\n                    `GraphQL-safe.\"`);\n            }\n            const emumValue = extensionEnumValue ||\n                Oas3Tools.sanitize(enumValueString, !data.options.simpleEnumValues\n                    ? Oas3Tools.CaseStyle.ALL_CAPS\n                    : Oas3Tools.CaseStyle.simple);\n            if (extensionEnumValue in values) {\n                throw new Error(`Cannot create enum value \"${extensionEnumValue}\".\\nYou ` +\n                    `provided \"${extensionEnumValue}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.EnumMapping}, but it ` +\n                    `conflicts with another value \"${extensionEnumValue}\".`);\n            }\n            values[emumValue] = { value: enumValue };\n        });\n        // Store newly created Enum Object Type\n        def.graphQLType = new GraphQLEnumType({\n            name: def.graphQLTypeName,\n            values\n        });\n        return def.graphQLType;\n    }\n}\n/**\n * Creates the fields object to be used by an (input) object type\n */\nfunction createFields({ def, links, operation, data, iteration, isInputObjectType, fetch }) {\n    let fields = {};\n    const fieldTypeDefinitions = def.subDefinitions;\n    // Create fields for properties\n    for (let fieldName in fieldTypeDefinitions) {\n        const fieldTypeDefinition = fieldTypeDefinitions[fieldName];\n        const fieldSchema = fieldTypeDefinition.schema;\n        // Get object type describing the property\n        const objectType = getGraphQLType({\n            def: fieldTypeDefinition,\n            operation,\n            data,\n            iteration: iteration + 1,\n            isInputObjectType,\n            fetch\n        });\n        const requiredProperty = typeof def.required === 'object' && def.required.includes(fieldName);\n        // Finally, add the object type to the fields (using sanitized field name)\n        if (objectType) {\n            const extensionFieldName = fieldSchema === null || fieldSchema === void 0 ? void 0 : fieldSchema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName];\n            if (!Oas3Tools.isSanitized(extensionFieldName)) {\n                throw new Error(`Cannot create field with name \"${extensionFieldName}\".\\nYou ` +\n                    `provided \"${extensionFieldName}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it is not ` +\n                    `GraphQL-safe.\"`);\n            }\n            if (extensionFieldName && extensionFieldName in fields) {\n                throw new Error(`Cannot create field with name \"${extensionFieldName}\".\\nYou ` +\n                    `provided \"${extensionFieldName}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                    `conflicts with another field named \"${extensionFieldName}\".`);\n            }\n            const saneFieldName = extensionFieldName ||\n                Oas3Tools.sanitize(fieldName, !data.options.simpleNames\n                    ? Oas3Tools.CaseStyle.camelCase\n                    : Oas3Tools.CaseStyle.simple);\n            const sanePropName = Oas3Tools.storeSaneName(saneFieldName, fieldName, data.saneMap);\n            fields[sanePropName] = {\n                type: requiredProperty\n                    ? new GraphQLNonNull(objectType)\n                    : objectType,\n                description: typeof fieldSchema === 'object' ? fieldSchema.description : null\n            };\n        }\n        else {\n            handleWarning({\n                mitigationType: MitigationTypes.CANNOT_GET_FIELD_TYPE,\n                message: `Cannot obtain GraphQL type for field '${fieldName}' in ` +\n                    `GraphQL type '${JSON.stringify(def.schema)}'.`,\n                data,\n                log: translationLog\n            });\n        }\n    }\n    if (typeof links === 'object' && // Links are present\n        !isInputObjectType // Only object type (input object types cannot make use of links)\n    ) {\n        for (let saneLinkKey in links) {\n            translationLog(`Create link '${saneLinkKey}'...`);\n            // Check if key is already in fields\n            if (saneLinkKey in fields) {\n                handleWarning({\n                    mitigationType: MitigationTypes.LINK_NAME_COLLISION,\n                    message: `Cannot create link '${saneLinkKey}' because parent ` +\n                        `object type already contains a field with the same ` +\n                        `(sanitized) name.`,\n                    data,\n                    log: translationLog\n                });\n            }\n            else {\n                const link = links[saneLinkKey];\n                // Get linked operation\n                let linkedOpId;\n                // TODO: href is yet another alternative to operationRef and operationId\n                if (typeof link.operationId === 'string') {\n                    linkedOpId = link.operationId;\n                }\n                else if (typeof link.operationRef === 'string') {\n                    linkedOpId = linkOpRefToOpId({\n                        links,\n                        linkKey: saneLinkKey,\n                        operation,\n                        data\n                    });\n                }\n                /**\n                 * linkedOpId may not be initialized because operationRef may lead to an\n                 * operation object that does not have an operationId\n                 */\n                if (typeof linkedOpId === 'string' && linkedOpId in data.operations) {\n                    const linkedOp = data.operations[linkedOpId];\n                    // Determine parameters provided via link\n                    let argsFromLink = link.parameters;\n                    // Get arguments that are not provided by the linked operation\n                    let dynamicParams = linkedOp.parameters;\n                    if (typeof argsFromLink === 'object') {\n                        dynamicParams = dynamicParams.filter((param) => {\n                            return typeof argsFromLink[param.name] === 'undefined';\n                        });\n                    }\n                    // Get resolve function for link\n                    const linkResolver = getResolver({\n                        operation: linkedOp,\n                        argsFromLink: argsFromLink,\n                        data,\n                        baseUrl: data.options.baseUrl,\n                        requestOptions: data.options.requestOptions,\n                        fetch\n                    });\n                    // Get arguments for link\n                    const args = getArgs({\n                        parameters: dynamicParams,\n                        operation: linkedOp,\n                        data,\n                        fetch\n                    });\n                    // Get response object type\n                    const resObjectType = linkedOp.responseDefinition.graphQLType !== undefined\n                        ? linkedOp.responseDefinition.graphQLType\n                        : getGraphQLType({\n                            def: linkedOp.responseDefinition,\n                            operation,\n                            data,\n                            iteration: iteration + 1,\n                            isInputObjectType: false,\n                            fetch\n                        });\n                    let description = link.description;\n                    if (data.options.equivalentToMessages && description) {\n                        description += `\\n\\nEquivalent to ${linkedOp.operationString}`;\n                    }\n                    // Finally, add the object type to the fields (using sanitized field name)\n                    // TODO: check if fields already has this field name\n                    fields[saneLinkKey] = {\n                        type: resObjectType,\n                        resolve: linkResolver,\n                        args,\n                        description\n                    };\n                }\n                else {\n                    handleWarning({\n                        mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                        message: `Cannot resolve target of link '${saneLinkKey}'`,\n                        data,\n                        log: translationLog\n                    });\n                }\n            }\n        }\n    }\n    fields = sortObject(fields);\n    return fields;\n}\n/**\n * Returns the operationId that an operationRef is associated to\n *\n * NOTE: If the operation does not natively have operationId, this function\n * will try to produce an operationId the same way preprocessor.js does it.\n *\n * Any changes to constructing operationIds in preprocessor.js should be\n * reflected here.\n */\nfunction linkOpRefToOpId({ links, linkKey, operation, data }) {\n    const link = links[linkKey];\n    if (typeof link.operationRef === 'string') {\n        // TODO: external refs\n        const operationRef = link.operationRef;\n        let linkLocation;\n        let linkRelativePathAndMethod;\n        /**\n         * Example relative path: '#/paths/~12.0~1repositories~1{username}/get'\n         * Example absolute path: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n         * Extract relative path from relative path\n         */\n        if (operationRef.substring(0, 8) === '#/paths/') {\n            linkRelativePathAndMethod = operationRef;\n            // Extract relative path from absolute path\n        }\n        else {\n            /**\n             * '#' may exist in other places in the path\n             * '/#/' is more likely to point to the beginning of the path\n             */\n            const firstPathIndex = operationRef.indexOf('#/paths/');\n            // Found a relative path candidate\n            if (firstPathIndex !== -1) {\n                // Check to see if there are other relative path candidates\n                const lastPathIndex = operationRef.lastIndexOf('#/paths/');\n                if (firstPathIndex !== lastPathIndex) {\n                    handleWarning({\n                        mitigationType: MitigationTypes.AMBIGUOUS_LINK,\n                        message: `The link '${linkKey}' in operation '${operation.operationString}' ` +\n                            `contains an ambiguous operationRef '${operationRef}', ` +\n                            `meaning it has multiple instances of the string '#/paths/'`,\n                        data,\n                        log: translationLog\n                    });\n                    return;\n                }\n                linkLocation = operationRef.substring(0, firstPathIndex);\n                linkRelativePathAndMethod = operationRef.substring(firstPathIndex);\n                // Cannot find relative path candidate\n            }\n            else {\n                handleWarning({\n                    mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                    message: `The link '${linkKey}' in operation '${operation.operationString}' ` +\n                        `does not contain a valid path in operationRef '${operationRef}', ` +\n                        `meaning it does not contain a string '#/paths/'`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n        }\n        // Infer operationId from relative path\n        if (typeof linkRelativePathAndMethod === 'string') {\n            let linkPath;\n            let linkMethod;\n            /**\n             * NOTE: I wish we could extract the linkedOpId by matching the\n             * linkedOpObject with an operation in data and extracting the operationId\n             * there but that does not seem to be possible especiially because you\n             * need to know the operationId just to access the operations so what I\n             * have to do is reconstruct the operationId the same way preprocessing\n             * does it\n             */\n            /**\n             * linkPath should be the path followed by the method\n             *\n             * Find the slash that divides the path from the method\n             */\n            const pivotSlashIndex = linkRelativePathAndMethod.lastIndexOf('/');\n            // Check if there are any '/' in the linkPath\n            if (pivotSlashIndex !== -1) {\n                // Get method\n                // Check if there is a method at the end of the linkPath\n                if (pivotSlashIndex !== linkRelativePathAndMethod.length - 1) {\n                    try {\n                        // Start at +1 because we do not want the starting '/'\n                        linkMethod = Oas3Tools.methodToHttpMethod(linkRelativePathAndMethod.substring(pivotSlashIndex + 1));\n                    }\n                    catch (_a) {\n                        handleWarning({\n                            mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                            message: `The operationRef '${operationRef}' contains an ` +\n                                `invalid HTTP method '${linkMethod}'`,\n                            data,\n                            log: translationLog\n                        });\n                        return;\n                    }\n                    // There is no method at the end of the path\n                }\n                else {\n                    handleWarning({\n                        mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                        message: `The operationRef '${operationRef}' does not contain an` +\n                            `HTTP method`,\n                        data,\n                        log: translationLog\n                    });\n                    return;\n                }\n                /**\n                 * Get path\n                 *\n                 * Substring starts at index 8 and ends at pivotSlashIndex to exclude\n                 * the '/'s at the ends of the path\n                 *\n                 * TODO: improve removing '/#/paths'?\n                 */\n                linkPath = linkRelativePathAndMethod.substring(8, pivotSlashIndex);\n                /**\n                 * linkPath is currently a JSON Pointer\n                 *\n                 * Revert the escaped '/', represented by '~1', to form intended path\n                 */\n                linkPath = linkPath.replace(/~1/g, '/');\n                // Find the right oas\n                const oas = typeof linkLocation === 'undefined'\n                    ? operation.oas\n                    : getOasFromLinkLocation(linkLocation, link, data);\n                // If the link was external, make sure that an OAS could be identified\n                if (typeof oas !== 'undefined') {\n                    if (typeof linkMethod === 'string' && typeof linkPath === 'string') {\n                        let linkedOpId;\n                        if (linkPath in oas.paths && linkMethod in oas.paths[linkPath]) {\n                            const linkedOpObject = oas.paths[linkPath][linkMethod];\n                            if ('operationId' in linkedOpObject) {\n                                linkedOpId = linkedOpObject.operationId;\n                            }\n                        }\n                        if (typeof linkedOpId !== 'string') {\n                            linkedOpId = Oas3Tools.generateOperationId(linkMethod, linkPath);\n                        }\n                        if (linkedOpId in data.operations) {\n                            return linkedOpId;\n                        }\n                        else {\n                            handleWarning({\n                                mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                                message: `The link '${linkKey}' references an operation with ` +\n                                    `operationId '${linkedOpId}' but no such operation exists. ` +\n                                    `Note that the operationId may be autogenerated but ` +\n                                    `regardless, the link could not be matched to an operation.`,\n                                data,\n                                log: translationLog\n                            });\n                            return;\n                        }\n                        // Path and method could not be found\n                    }\n                    else {\n                        handleWarning({\n                            mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                            message: `Cannot identify path and/or method, '${linkPath} and ` +\n                                `'${linkMethod}' respectively, from operationRef ` +\n                                `'${operationRef}' in link '${linkKey}'`,\n                            data,\n                            log: translationLog\n                        });\n                        return;\n                    }\n                    // External link could not be resolved\n                }\n                else {\n                    handleWarning({\n                        mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                        message: `The link '${link.operationRef}' references an external OAS ` +\n                            `but it was not provided`,\n                        data,\n                        log: translationLog\n                    });\n                    return;\n                }\n                // Cannot split relative path into path and method sections\n            }\n            else {\n                handleWarning({\n                    mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                    message: `Cannot extract path and/or method from operationRef ` +\n                        `'${operationRef}' in link '${linkKey}'`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n            // Cannot extract relative path from absolute path\n        }\n        else {\n            handleWarning({\n                mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                message: `Cannot extract path and/or method from operationRef ` +\n                    `'${operationRef}' in link '${linkKey}'`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n    }\n}\n/**\n * Determin if an argument should be created if the argument has already been\n * provided through the options\n */\nfunction skipArg(parameter, operation, data) {\n    if (typeof data.options === 'object') {\n        switch (parameter.in) {\n            case 'header':\n                // Check header option\n                if (typeof data.options.headers === 'object' &&\n                    parameter.name in data.options.headers) {\n                    return true;\n                }\n                else if (typeof data.options.headers === 'function') {\n                    const headers = data.options.headers(operation.method, operation.path, operation.oas.info.title);\n                    if (typeof headers === 'object') {\n                        return true;\n                    }\n                    // Check requestOptions option\n                }\n                else if (typeof data.options.requestOptions === 'object') {\n                    if (typeof data.options.requestOptions.headers === 'object' &&\n                        parameter.name in data.options.requestOptions.headers) {\n                        return true;\n                    }\n                    else if (typeof data.options.requestOptions.headers === 'function') {\n                        const headers = data.options.requestOptions.headers(operation.method, operation.path, operation.oas.info.title);\n                        if (typeof headers === 'object') {\n                            return true;\n                        }\n                    }\n                }\n                break;\n            case 'query':\n                // Check header option\n                if (typeof data.options.qs === 'object' &&\n                    parameter.name in data.options.qs) {\n                    return true;\n                    // Check requestOptions option\n                }\n                else if (typeof data.options.requestOptions === 'object' &&\n                    typeof data.options.requestOptions.qs === 'object' &&\n                    parameter.name in data.options.requestOptions.qs) {\n                    return true;\n                }\n                break;\n        }\n    }\n    return false;\n}\n/**\n * Creates the arguments for resolving a field\n *\n * Arguments that are provided via options will be ignored\n */\nexport function getArgs({ requestPayloadDef, parameters, operation, data, fetch }) {\n    let args = {};\n    // Handle params:\n    parameters.forEach((parameter) => {\n        // We need at least a name\n        if (typeof parameter.name !== 'string') {\n            handleWarning({\n                mitigationType: MitigationTypes.INVALID_OAS,\n                message: `The operation '${operation.operationString}' contains a ` +\n                    `parameter '${JSON.stringify(parameter)}' with no 'name' property`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n        // If this parameter is provided via options, ignore\n        if (skipArg(parameter, operation, data)) {\n            return;\n        }\n        /**\n         * Determine type of parameter\n         *\n         * The type of the parameter can either be contained in the \"schema\" field\n         * or the \"content\" field (but not both)\n         */\n        let schema;\n        if (typeof parameter.schema === 'object') {\n            schema = parameter.schema;\n        }\n        else if (typeof parameter.content === 'object') {\n            if (typeof parameter.content['application/json'] === 'object' &&\n                typeof parameter.content['application/json'].schema === 'object') {\n                schema = parameter.content['application/json'].schema;\n            }\n            else {\n                handleWarning({\n                    mitigationType: MitigationTypes.NON_APPLICATION_JSON_SCHEMA,\n                    message: `The operation '${operation.operationString}' contains a ` +\n                        `parameter '${JSON.stringify(parameter)}' that has a 'content' ` +\n                        `property but no schemas in application/json format. The ` +\n                        `parameter will not be created`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n        }\n        else {\n            // Invalid OAS according to 3.0.2\n            handleWarning({\n                mitigationType: MitigationTypes.INVALID_OAS,\n                message: `The operation '${operation.operationString}' contains a ` +\n                    `parameter '${JSON.stringify(parameter)}' with no 'schema' or ` +\n                    `'content' property`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n        /**\n         * Resolving the reference is necessary later in the code and by doing it,\n         * we can avoid doing it a second time in resolveRev()\n         */\n        if ('$ref' in schema) {\n            schema = Oas3Tools.resolveRef(schema.$ref, operation.oas);\n        }\n        const paramDef = createDataDef({\n            fromSchema: parameter.name,\n            fromExtension: schema[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.TypeName]\n        }, schema, true, data, operation.oas);\n        const type = getGraphQLType({\n            def: paramDef,\n            operation,\n            data,\n            iteration: 0,\n            isInputObjectType: true,\n            fetch\n        });\n        /**\n         * Sanitize the argument name\n         *\n         * NOTE: when matching these parameters back to requests, we need to again\n         * use the real parameter name\n         */\n        const saneName = Oas3Tools.sanitize(parameter.name, !data.options.simpleNames\n            ? Oas3Tools.CaseStyle.camelCase\n            : Oas3Tools.CaseStyle.simple);\n        // Parameters are not required when a default exists:\n        let hasDefault = false;\n        if (typeof parameter.schema === 'object') {\n            let schema = parameter.schema;\n            if ('$ref' in schema) {\n                schema = Oas3Tools.resolveRef(schema.$ref, operation.oas);\n            }\n            if (typeof schema.default !== 'undefined') {\n                hasDefault = true;\n            }\n        }\n        const paramRequired = parameter.required && !hasDefault;\n        args[saneName] = {\n            type: paramRequired ? new GraphQLNonNull(type) : type,\n            description: parameter.description // Might be undefined\n        };\n    });\n    // Add limit argument\n    if (data.options.addLimitArgument &&\n        typeof operation.responseDefinition === 'object' &&\n        operation.responseDefinition.schema.type === 'array' &&\n        // Only add limit argument to lists of object types, not to lists of scalar types\n        (operation.responseDefinition.subDefinitions.schema\n            .type === 'object' ||\n            operation.responseDefinition.subDefinitions.schema\n                .type === 'array')) {\n        // Make sure slicing arguments will not overwrite preexisting arguments\n        if ('limit' in args) {\n            handleWarning({\n                mitigationType: MitigationTypes.LIMIT_ARGUMENT_NAME_COLLISION,\n                message: `The 'limit' argument cannot be added ` +\n                    `because of a preexisting argument in ` +\n                    `operation ${operation.operationString}`,\n                data,\n                log: translationLog\n            });\n        }\n        else {\n            args['limit'] = {\n                type: GraphQLInt,\n                description: `Auto-generated argument that limits the size of ` +\n                    `returned list of objects/list, selecting the first \\`n\\` ` +\n                    `elements of the list`\n            };\n        }\n    }\n    // Handle request payload (if present):\n    if (typeof requestPayloadDef === 'object') {\n        const reqObjectType = getGraphQLType({\n            def: requestPayloadDef,\n            data,\n            operation,\n            isInputObjectType: true,\n            fetch\n        });\n        // Sanitize the argument name\n        const saneName = data.options.genericPayloadArgName\n            ? 'requestBody'\n            : Oas3Tools.uncapitalize(requestPayloadDef.graphQLInputObjectTypeName); // Already sanitized\n        const reqRequired = typeof operation === 'object' &&\n            typeof operation.payloadRequired === 'boolean'\n            ? operation.payloadRequired\n            : false;\n        args[saneName] = {\n            type: reqRequired ? new GraphQLNonNull(reqObjectType) : reqObjectType,\n            // TODO: addendum to the description explaining this is the request body\n            description: requestPayloadDef.schema.description\n        };\n    }\n    args = sortObject(args);\n    return args;\n}\n/**\n * Used in the context of links, specifically those using an external operationRef\n * If the reference is an absolute reference, determine the type of location\n *\n * For example, name reference, file path, web-hosted OAS link, etc.\n */\nfunction getLinkLocationType(linkLocation) {\n    // TODO: currently we only support the title as a link location\n    return 'title';\n}\n/**\n * Used in the context of links, specifically those using an external operationRef\n * Based on the location of the OAS, retrieve said OAS\n */\nfunction getOasFromLinkLocation(linkLocation, link, data) {\n    // May be an external reference\n    switch (getLinkLocationType(linkLocation)) {\n        case 'title':\n            // Get the possible\n            const possibleOass = data.oass.filter((oas) => {\n                return oas.info.title === linkLocation;\n            });\n            // Check if there are an ambiguous OASs\n            if (possibleOass.length === 1) {\n                // No ambiguity\n                return possibleOass[0];\n            }\n            else if (possibleOass.length > 1) {\n                // Some ambiguity\n                handleWarning({\n                    mitigationType: MitigationTypes.AMBIGUOUS_LINK,\n                    message: `The operationRef '${link.operationRef}' references an ` +\n                        `OAS '${linkLocation}' but multiple OASs share the same title`,\n                    data,\n                    log: translationLog\n                });\n            }\n            else {\n                // No OAS had the expected title\n                handleWarning({\n                    mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                    message: `The operationRef '${link.operationRef}' references an ` +\n                        `OAS '${linkLocation}' but no such OAS was provided`,\n                    data,\n                    log: translationLog\n                });\n            }\n            break;\n        // // TODO\n        // case 'url':\n        //   break\n        // // TODO\n        // case 'file':\n        //   break\n        // TODO: should title be default?\n        // In cases of names like api.io\n        default:\n            handleWarning({\n                mitigationType: MitigationTypes.UNRESOLVABLE_LINK,\n                message: `The link location of the operationRef ` +\n                    `'${link.operationRef}' is currently not supported\\n` +\n                    `Currently only the title of the OAS is supported`,\n                data,\n                log: translationLog\n            });\n    }\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n/**\n * Utilities related to GraphQL.\n */\nimport { GraphQLObjectType, GraphQLString } from 'graphql';\n/**\n * Returns empty GraphQLObjectType.\n */\nexport function getEmptyObjectType(name) {\n    return new GraphQLObjectType({\n        name: name + 'Placeholder',\n        description: 'Placeholder object',\n        fields: {\n            message: {\n                type: GraphQLString,\n                description: 'Placeholder field',\n                resolve: () => {\n                    return 'This is a placeholder field.';\n                }\n            }\n        }\n    });\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n/**\n * Functions to create viewers that allow users to pass credentials to resolve\n * functions used by OpenAPI-to-GraphQL.\n */\n// Type imports:\nimport { GraphQLString, GraphQLObjectType, GraphQLNonNull } from 'graphql';\nimport { GraphQLOperationType } from './types/graphql';\n// Imports:\nimport { getGraphQLType } from './schema_builder';\nimport * as Oas3Tools from './oas_3_tools';\nimport debug from 'debug';\nimport { handleWarning, sortObject, MitigationTypes } from './utils';\nimport { createDataDef } from './preprocessor';\nconst translationLog = debug('translation');\n/**\n * Load the field object in the appropriate root object\n *\n * i.e. inside either rootQueryFields/rootMutationFields or inside\n * rootQueryFields/rootMutationFields for further processing\n */\nexport function createAndLoadViewer(queryFields, operationType, data, fetch) {\n    const results = {};\n    /**\n     * To ensure that viewers have unique names, we add a numerical postfix.\n     *\n     * This object keeps track of what the postfix should be.\n     *\n     * The key is the security scheme type and the value is\n     * the current highest postfix used for viewers of that security scheme type.\n     */\n    const viewerNamePostfix = {};\n    /**\n     * Used to collect all fields in the given querFields object, no matter which\n     * protocol. Used to populate anyAuthViewer.\n     */\n    const anyAuthFields = {};\n    for (let protocolName in queryFields) {\n        Object.assign(anyAuthFields, queryFields[protocolName]);\n        /**\n         * Check if the name has already been used (i.e. in the list)\n         * if so, create a new name and add it to the list\n         */\n        const securityType = data.security[protocolName].def.type;\n        let viewerType;\n        /**\n         * HTTP is not an authentication protocol\n         * HTTP covers a number of different authentication type\n         * change the typeName to match the exact authentication type (e.g. basic\n         * authentication)\n         */\n        if (securityType === 'http') {\n            let scheme = data.security[protocolName].def.scheme;\n            switch (scheme) {\n                case 'basic':\n                    viewerType = 'basicAuth';\n                    break;\n                default:\n                    handleWarning({\n                        mitigationType: MitigationTypes.UNSUPPORTED_HTTP_SECURITY_SCHEME,\n                        message: `Currently unsupported HTTP authentication protocol ` +\n                            `type 'http' and scheme '${scheme}'`,\n                        data,\n                        log: translationLog\n                    });\n                    continue;\n            }\n        }\n        else {\n            viewerType = securityType;\n        }\n        // Create name for the viewer\n        let viewerName = operationType === GraphQLOperationType.Query\n            ? Oas3Tools.sanitize(`viewer ${viewerType}`, Oas3Tools.CaseStyle.camelCase)\n            : operationType === GraphQLOperationType.Mutation\n                ? Oas3Tools.sanitize(`mutation viewer ${viewerType}`, Oas3Tools.CaseStyle.camelCase)\n                : Oas3Tools.sanitize(`subscription viewer ${viewerType}`, Oas3Tools.CaseStyle.camelCase);\n        // Ensure unique viewer name\n        // If name already exists, append a number at the end of the name\n        if (!(viewerType in viewerNamePostfix)) {\n            viewerNamePostfix[viewerType] = 1;\n        }\n        else {\n            viewerName += ++viewerNamePostfix[viewerType];\n        }\n        // Add the viewer object type to the specified root query object type\n        results[viewerName] = getViewerOT(viewerName, protocolName, securityType, queryFields[protocolName], data);\n    }\n    // Create name for the AnyAuth viewer\n    const anyAuthObjectName = operationType === GraphQLOperationType.Query\n        ? 'viewerAnyAuth'\n        : operationType === GraphQLOperationType.Mutation\n            ? 'mutationViewerAnyAuth'\n            : 'subscriptionViewerAnyAuth';\n    // Add the AnyAuth object type to the specified root query object type\n    results[anyAuthObjectName] = getViewerAnyAuthOT(anyAuthObjectName, anyAuthFields, data, fetch);\n    return results;\n}\n/**\n * Get the viewer object, resolve function, and arguments\n */\nfunction getViewerOT(name, protocolName, securityType, queryFields, data) {\n    const scheme = data.security[protocolName];\n    // Resolve function:\n    const resolve = (source, args, context, info) => {\n        const security = {};\n        const saneProtocolName = Oas3Tools.sanitize(protocolName, Oas3Tools.CaseStyle.camelCase);\n        security[Oas3Tools.storeSaneName(saneProtocolName, protocolName, data.saneMap)] = args;\n        /**\n         * Viewers are always root, so we can instantiate _openAPIToGraphQL here without\n         * previously checking for its existence\n         */\n        return {\n            _openAPIToGraphQL: {\n                security\n            }\n        };\n    };\n    // Arguments:\n    /**\n     * Do not sort because they are already \"sorted\" in preprocessing.\n     * Otherwise, for basic auth, \"password\" will appear before \"username\"\n     */\n    const args = {};\n    if (typeof scheme === 'object') {\n        for (let parameterName in scheme.parameters) {\n            // The parameter name should be already sane as it is provided by OpenAPI-to-GraphQL\n            const saneParameterName = Oas3Tools.sanitize(parameterName, Oas3Tools.CaseStyle.camelCase);\n            args[saneParameterName] = { type: new GraphQLNonNull(GraphQLString) };\n        }\n    }\n    let typeDescription = `A viewer for security scheme '${protocolName}'`;\n    /**\n     * HTTP authentication uses different schemes. It is not sufficient to name\n     * only the security type\n     */\n    let description = securityType === 'http'\n        ? `A viewer that wraps all operations authenticated via security scheme ` +\n            `'${protocolName}', which is of type 'http' '${scheme.def.scheme}'`\n        : `A viewer that wraps all operations authenticated via security scheme ` +\n            `'${protocolName}', which is of type '${securityType}'`;\n    if (data.oass.length !== 1) {\n        typeDescription += ` in OAS '${scheme.oas.info.title}'`;\n        description = `, in OAS '${scheme.oas.info.title}`;\n    }\n    return {\n        type: new GraphQLObjectType({\n            name: Oas3Tools.capitalize(name),\n            description: typeDescription,\n            fields: () => queryFields\n        }),\n        resolve,\n        args,\n        description\n    };\n}\n/**\n * Create an object containing an AnyAuth viewer, its resolve function,\n * and its args.\n */\nfunction getViewerAnyAuthOT(name, queryFields, data, fetch) {\n    // Resolve function:\n    const resolve = (source, args, context, info) => {\n        return {\n            _openAPIToGraphQL: {\n                security: args\n            }\n        };\n    };\n    // Arguments:\n    let args = {};\n    for (let protocolName in data.security) {\n        // Create input object types for the viewer arguments\n        const def = createDataDef({ fromRef: protocolName }, data.security[protocolName].schema, true, data, data.security[protocolName].oas);\n        const type = getGraphQLType({\n            def,\n            data,\n            isInputObjectType: true,\n            fetch\n        });\n        const saneProtocolName = Oas3Tools.sanitize(protocolName, Oas3Tools.CaseStyle.camelCase);\n        args[Oas3Tools.storeSaneName(saneProtocolName, protocolName, data.saneMap)] = { type };\n    }\n    args = sortObject(args);\n    return {\n        type: new GraphQLObjectType({\n            name: Oas3Tools.capitalize(name),\n            description: 'Warning: Not every request will work with this viewer type',\n            fields: () => queryFields\n        }),\n        resolve,\n        args,\n        description: `A viewer that wraps operations for all available ` +\n            `authentication mechanisms`\n    };\n}\n","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { GraphQLOperationType } from './types/graphql';\nimport { GraphQLSchema, GraphQLObjectType, } from 'graphql';\n// Imports:\nimport { getGraphQLType, getArgs } from './schema_builder';\nimport { getResolver, getSubscribe, getPublishResolver } from './resolver_builder';\nimport * as GraphQLTools from './graphql_tools';\nimport { preprocessOas } from './preprocessor';\nimport * as Oas3Tools from './oas_3_tools';\nimport { createAndLoadViewer } from './auth_builder';\nimport { sortObject, handleWarning, MitigationTypes } from './utils';\nimport crossFetch from 'cross-fetch';\nimport debug from 'debug';\nconst translationLog = debug('translation');\nconst DEFAULT_OPTIONS = {\n    report: {\n        warnings: [],\n        numOps: 0,\n        numOpsQuery: 0,\n        numOpsMutation: 0,\n        numOpsSubscription: 0,\n        numQueriesCreated: 0,\n        numMutationsCreated: 0,\n        numSubscriptionsCreated: 0\n    },\n    // Setting default options\n    strict: false,\n    // Schema options\n    operationIdFieldNames: false,\n    fillEmptyResponses: false,\n    addLimitArgument: false,\n    idFormats: [],\n    selectQueryOrMutationField: {},\n    genericPayloadArgName: false,\n    simpleNames: false,\n    simpleEnumValues: false,\n    singularNames: false,\n    createSubscriptionsFromCallbacks: false,\n    // Resolver options\n    headers: {},\n    qs: {},\n    requestOptions: {},\n    customResolvers: {},\n    customSubscriptionResolvers: {},\n    // Authentication options\n    viewer: true,\n    sendOAuthTokenInQuery: false,\n    // Validation options\n    oasValidatorOptions: {},\n    swagger2OpenAPIOptions: {},\n    // Logging options\n    provideErrorExtensions: true,\n    equivalentToMessages: true,\n    fetch: crossFetch\n};\n/**\n * Creates a GraphQL interface from the given OpenAPI Specification (2 or 3).\n */\nexport async function createGraphQLSchema(spec, options) {\n    // Setting default options\n    const internalOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n    };\n    if (Array.isArray(spec)) {\n        // Convert all non-OAS 3 into OAS 3\n        const oass = await Promise.all(spec.map((ele) => Oas3Tools.getValidOAS3(ele, internalOptions.oasValidatorOptions, internalOptions.swagger2OpenAPIOptions)));\n        return translateOpenAPIToGraphQL(oass, internalOptions);\n    }\n    else {\n        /**\n         * Check if the spec is a valid OAS 3\n         * If the spec is OAS 2.0, attempt to translate it into 3, then try to\n         * translate the spec into a GraphQL schema\n         */\n        const oas = await Oas3Tools.getValidOAS3(spec, internalOptions.oasValidatorOptions, internalOptions.swagger2OpenAPIOptions);\n        return translateOpenAPIToGraphQL([oas], internalOptions);\n    }\n}\n/**\n * Creates a GraphQL interface from the given OpenAPI Specification 3\n */\nexport function translateOpenAPIToGraphQL(oass, { strict, report, \n// Schema options\noperationIdFieldNames, fillEmptyResponses, addLimitArgument, idFormats, selectQueryOrMutationField, genericPayloadArgName, simpleNames, simpleEnumValues, singularNames, createSubscriptionsFromCallbacks, \n// Resolver options\nheaders, qs, requestOptions, connectOptions, baseUrl, customResolvers, customSubscriptionResolvers, \n// Authentication options\nviewer, tokenJSONpath, sendOAuthTokenInQuery, \n// Validation options\noasValidatorOptions, swagger2OpenAPIOptions, \n// Logging options\nprovideErrorExtensions, equivalentToMessages, fetch }) {\n    const options = {\n        strict,\n        report,\n        // Schema options\n        operationIdFieldNames,\n        fillEmptyResponses,\n        addLimitArgument,\n        idFormats,\n        selectQueryOrMutationField,\n        genericPayloadArgName,\n        simpleNames,\n        simpleEnumValues,\n        singularNames,\n        createSubscriptionsFromCallbacks,\n        // Resolver options\n        headers,\n        qs,\n        requestOptions,\n        connectOptions,\n        baseUrl,\n        customResolvers,\n        customSubscriptionResolvers,\n        // Authentication options\n        viewer,\n        tokenJSONpath,\n        sendOAuthTokenInQuery,\n        // Validation options\n        oasValidatorOptions,\n        swagger2OpenAPIOptions,\n        // Logging options\n        provideErrorExtensions,\n        equivalentToMessages,\n        fetch\n    };\n    translationLog(`Options: ${JSON.stringify(options)}`);\n    /**\n     * Extract information from the OASs and put it inside a data structure that\n     * is easier for OpenAPI-to-GraphQL to use\n     */\n    const data = preprocessOas(oass, options);\n    preliminaryChecks(options, data);\n    // Query, Mutation, and Subscription fields\n    let queryFields = {};\n    let mutationFields = {};\n    let subscriptionFields = {};\n    // Authenticated Query, Mutation, and Subscription fields\n    let authQueryFields = {};\n    let authMutationFields = {};\n    let authSubscriptionFields = {};\n    // Add Query and Mutation fields\n    Object.entries(data.operations).forEach(([operationId, operation]) => {\n        translationLog(`Process operation '${operation.operationString}'...`);\n        // Check if the operation should be added as a Query or Mutation\n        if (operation.operationType === GraphQLOperationType.Query) {\n            addQueryFields({\n                authQueryFields,\n                queryFields,\n                operationId,\n                operation,\n                options,\n                data\n            });\n        }\n        else if (operation.operationType === GraphQLOperationType.Mutation) {\n            addMutationFields({\n                authMutationFields,\n                mutationFields,\n                operationId,\n                operation,\n                options,\n                data\n            });\n        }\n    });\n    // Add Subscription fields\n    Object.entries(data.callbackOperations).forEach(([operationId, operation]) => {\n        translationLog(`Process operation '${operationId}'...`);\n        addSubscriptionFields({\n            authSubscriptionFields,\n            subscriptionFields,\n            operationId,\n            operation,\n            options,\n            data\n        });\n    });\n    // Sorting fields\n    queryFields = sortObject(queryFields);\n    mutationFields = sortObject(mutationFields);\n    subscriptionFields = sortObject(subscriptionFields);\n    authQueryFields = sortObject(authQueryFields);\n    Object.keys(authQueryFields).forEach((key) => {\n        authQueryFields[key] = sortObject(authQueryFields[key]);\n    });\n    authMutationFields = sortObject(authMutationFields);\n    Object.keys(authMutationFields).forEach((key) => {\n        authMutationFields[key] = sortObject(authMutationFields[key]);\n    });\n    authSubscriptionFields = sortObject(authSubscriptionFields);\n    Object.keys(authSubscriptionFields).forEach((key) => {\n        authSubscriptionFields[key] = sortObject(authSubscriptionFields[key]);\n    });\n    // Count created Query, Mutation, and Subscription fields\n    report.numQueriesCreated =\n        Object.keys(queryFields).length +\n            Object.keys(authQueryFields).reduce((sum, key) => {\n                return sum + Object.keys(authQueryFields[key]).length;\n            }, 0);\n    report.numMutationsCreated =\n        Object.keys(mutationFields).length +\n            Object.keys(authMutationFields).reduce((sum, key) => {\n                return sum + Object.keys(authMutationFields[key]).length;\n            }, 0);\n    report.numSubscriptionsCreated =\n        Object.keys(subscriptionFields).length +\n            Object.keys(authSubscriptionFields).reduce((sum, key) => {\n                return sum + Object.keys(authSubscriptionFields[key]).length;\n            }, 0);\n    /**\n     * Organize authenticated Query, Mutation, and Subscriptions fields into\n     * viewer objects.\n     */\n    if (Object.keys(authQueryFields).length > 0) {\n        Object.assign(queryFields, createAndLoadViewer(authQueryFields, GraphQLOperationType.Query, data, fetch));\n    }\n    if (Object.keys(authMutationFields).length > 0) {\n        Object.assign(mutationFields, createAndLoadViewer(authMutationFields, GraphQLOperationType.Mutation, data, fetch));\n    }\n    if (Object.keys(authSubscriptionFields).length > 0) {\n        Object.assign(subscriptionFields, createAndLoadViewer(authSubscriptionFields, GraphQLOperationType.Subscription, data, fetch));\n    }\n    // Build up the schema\n    const schemaConfig = {\n        query: Object.keys(queryFields).length > 0\n            ? new GraphQLObjectType({\n                name: 'Query',\n                fields: queryFields\n            })\n            : GraphQLTools.getEmptyObjectType('Query'),\n        mutation: Object.keys(mutationFields).length > 0\n            ? new GraphQLObjectType({\n                name: 'Mutation',\n                fields: mutationFields\n            })\n            : null,\n        subscription: Object.keys(subscriptionFields).length > 0\n            ? new GraphQLObjectType({\n                name: 'Subscription',\n                fields: subscriptionFields\n            })\n            : null\n    };\n    /**\n     * Fill in yet undefined object types to avoid GraphQLSchema from breaking.\n     *\n     * The reason: once creating the schema, the 'fields' thunks will resolve and\n     * if a field references an undefined object type, GraphQL will throw.\n     */\n    Object.entries(data.operations).forEach(([opId, operation]) => {\n        if (typeof operation.responseDefinition.graphQLType === 'undefined') {\n            operation.responseDefinition.graphQLType =\n                GraphQLTools.getEmptyObjectType(operation.responseDefinition.graphQLTypeName);\n        }\n    });\n    const schema = new GraphQLSchema(schemaConfig);\n    return { schema, report, data };\n}\nfunction addQueryFields({ authQueryFields, queryFields, operationId, operation, options, data }) {\n    const { operationIdFieldNames, singularNames, baseUrl, requestOptions, connectOptions, fetch } = options;\n    const field = getFieldForOperation(operation, baseUrl, data, requestOptions, connectOptions, fetch);\n    const saneOperationId = Oas3Tools.sanitize(operationId, Oas3Tools.CaseStyle.camelCase);\n    // Field name provided by x-graphql-field-name OAS extension\n    const extensionFieldName = operation.operation[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName];\n    if (!Oas3Tools.isSanitized(extensionFieldName)) {\n        throw new Error(`Cannot create query field with name \"${extensionFieldName}\".\\nYou ` +\n            `provided \"${extensionFieldName}\" in ` +\n            `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it is not ` +\n            `GraphQL-safe.\"`);\n    }\n    const generatedFieldName = operationIdFieldNames\n        ? saneOperationId // Sanitized (generated) operationId\n        : singularNames\n            ? Oas3Tools.sanitize(\n            // Generated singular name\n            Oas3Tools.inferResourceNameFromPath(operation.path), Oas3Tools.CaseStyle.camelCase)\n            : Oas3Tools.uncapitalize(\n            // Generated type name (to be used as a field name)\n            operation.responseDefinition.graphQLTypeName);\n    /**\n     * The name of the field\n     *\n     * Priority order:\n     *  1. (extensionFieldName) if the field name is provided by\n     * x-graphql-field-name OAS extension, use it.\n     *\n     *  2. (operationIdFieldNames) if the operationIdFieldNames option is set\n     * to true, then use the sane operationId.\n     *\n     *  3. (singularNames) if the singularNames option is set to true, then\n     * generate a singular name and use it.\n     *\n     *  4. (default) use the generated type name and use it.\n     */\n    let fieldName = extensionFieldName || generatedFieldName;\n    // Generate viewer\n    if (operation.inViewer) {\n        for (let securityRequirement of operation.securityRequirements) {\n            if (typeof authQueryFields[securityRequirement] !== 'object') {\n                authQueryFields[securityRequirement] = {};\n            }\n            // Check for extensionFieldName because it can create conflicts\n            if (extensionFieldName &&\n                extensionFieldName in authQueryFields[securityRequirement]) {\n                throw new Error(`Cannot create query field with name \"${extensionFieldName}\".\\nYou ` +\n                    ` provided \"${extensionFieldName}\" in ` +\n                    `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it conflicts ` +\n                    `with another field named \"${extensionFieldName}\".`);\n            }\n            /**\n             * If using fieldName will cause a conflict, then try to use the\n             * operationId instead.\n             *\n             * For example, the default behavior is to use the type name as a\n             * field name and multiple operations can return the same type.\n             */\n            if (fieldName in authQueryFields[securityRequirement]) {\n                fieldName = saneOperationId;\n            }\n            // Final fieldName verification\n            if (fieldName in authQueryFields[securityRequirement]) {\n                handleWarning({\n                    mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                    message: `Multiple operations have the same name ` +\n                        `'${fieldName}' and security requirement ` +\n                        `'${securityRequirement}'. GraphQL field names must be ` +\n                        `unique so only one can be added to the authentication ` +\n                        `viewer. Operation '${operation.operationString}' will be ignored.`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n            authQueryFields[securityRequirement][fieldName] = field;\n        }\n    }\n    else {\n        // Check for extensionFieldName because it can create conflicts\n        if (extensionFieldName && extensionFieldName in queryFields) {\n            throw new Error(`Cannot create query field with name \"${extensionFieldName}\".\\nYou ` +\n                `provided \"${extensionFieldName}\" in ` +\n                `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it conflicts ` +\n                `with another field named \"${extensionFieldName}\".`);\n        }\n        /**\n         * If using fieldName will cause a conflict, then try to use the\n         * operationId instead.\n         *\n         * For example, the default behavior is to use the type name as a\n         * field name and multiple operations can return the same type.\n         */\n        if (fieldName in queryFields) {\n            fieldName = saneOperationId;\n        }\n        // Final fieldName verification\n        if (fieldName in queryFields) {\n            handleWarning({\n                mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                message: `Multiple operations have the same name ` +\n                    `'${fieldName}'. GraphQL field names must be ` +\n                    `unique so only one can be added to the Query object. ` +\n                    `Operation '${operation.operationString}' will be ignored.`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n        // Add field into Query\n        queryFields[fieldName] = field;\n    }\n}\nfunction addMutationFields({ authMutationFields, mutationFields, operationId, operation, options, data }) {\n    const { singularNames, baseUrl, requestOptions, connectOptions, fetch } = options;\n    const field = getFieldForOperation(operation, baseUrl, data, requestOptions, connectOptions, fetch);\n    const saneOperationId = Oas3Tools.sanitize(operationId, Oas3Tools.CaseStyle.camelCase);\n    // Field name provided by x-graphql-field-name OAS extension\n    const extensionFieldName = operation.operation[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName];\n    if (!Oas3Tools.isSanitized(extensionFieldName)) {\n        throw new Error(`Cannot create mutation field with name \"${extensionFieldName}\".\\nYou ` +\n            `provided \"${extensionFieldName}\" in ` +\n            `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it is not ` +\n            `GraphQL-safe.\"`);\n    }\n    const generatedFieldName = singularNames\n        ? Oas3Tools.sanitize(\n        // Generated singular name with HTTP method\n        `${operation.method}${Oas3Tools.inferResourceNameFromPath(operation.path)}`, Oas3Tools.CaseStyle.camelCase)\n        : saneOperationId; // (Generated) operationId (for mutations, operationId is guaranteed unique)\n    /**\n     * The name of the field\n     *\n     * Priority order:\n     *  1. (extensionFieldName) if the field name is provided by\n     * x-graphql-field-name OAS extension, use it.\n     *\n     *  2. (singularNames) if the singularNames option is set to true, then\n     * generate a singular name with the HTTP method and use it.\n     *\n     *  3. (default) use the (generated) operationId.\n     */\n    const fieldName = extensionFieldName || generatedFieldName;\n    // Generate viewer\n    if (operation.inViewer) {\n        for (let securityRequirement of operation.securityRequirements) {\n            if (typeof authMutationFields[securityRequirement] !== 'object') {\n                authMutationFields[securityRequirement] = {};\n            }\n            // Check for extensionFieldName because it can create conflicts\n            if (extensionFieldName &&\n                extensionFieldName in authMutationFields[securityRequirement]) {\n                throw new Error(`Cannot create mutation field with name ` +\n                    `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" ` +\n                    `in ${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                    `conflicts with another field named \"${extensionFieldName}\".`);\n            }\n            // Final fieldName verification\n            if (fieldName in authMutationFields[securityRequirement]) {\n                handleWarning({\n                    mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                    message: `Multiple operations have the same name ` +\n                        `'${fieldName}' and security requirement ` +\n                        `'${securityRequirement}'. GraphQL field names must be ` +\n                        `unique so only one can be added to the authentication ` +\n                        `viewer. Operation '${operation.operationString}' will be ignored.`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n            // Add field into viewer\n            authMutationFields[securityRequirement][fieldName] = field;\n        }\n        // No viewer\n    }\n    else {\n        // Check for extensionFieldName because it can create conflicts\n        if (extensionFieldName && extensionFieldName in mutationFields) {\n            throw new Error(`Cannot create mutation field with name ` +\n                `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" ` +\n                `in ${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                `conflicts with another field named \"${extensionFieldName}\".`);\n        }\n        // Final fieldName verification\n        if (fieldName in mutationFields) {\n            handleWarning({\n                mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                message: `Multiple operations have the same name ` +\n                    `'${fieldName}'. GraphQL field names must be ` +\n                    `unique so only one can be added to the Mutation object. ` +\n                    `Operation '${operation.operationString}' will be ignored.`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n        // Add field into Mutation\n        mutationFields[fieldName] = field;\n    }\n}\nfunction addSubscriptionFields({ authSubscriptionFields, subscriptionFields, operationId, operation, options, data }) {\n    const { baseUrl, requestOptions, connectOptions, fetch } = options;\n    const field = getFieldForOperation(operation, baseUrl, data, requestOptions, connectOptions, fetch);\n    const saneOperationId = Oas3Tools.sanitize(operationId, Oas3Tools.CaseStyle.camelCase);\n    const extensionFieldName = operation.operation[Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName];\n    if (!Oas3Tools.isSanitized(extensionFieldName)) {\n        throw new Error(`Cannot create subscription field with name ` +\n            `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" in ` +\n            `${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it is not ` +\n            `GraphQL-safe.\"`);\n    }\n    const fieldName = extensionFieldName || saneOperationId;\n    // Generate viewer\n    if (operation.inViewer) {\n        for (let securityRequirement of operation.securityRequirements) {\n            if (typeof authSubscriptionFields[securityRequirement] !== 'object') {\n                authSubscriptionFields[securityRequirement] = {};\n            }\n            if (extensionFieldName &&\n                extensionFieldName in authSubscriptionFields[securityRequirement]) {\n                throw new Error(`Cannot create subscription field with name ` +\n                    `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" ` +\n                    `in ${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                    `conflicts with another field named \"${extensionFieldName}\".`);\n            }\n            // Final fieldName verification\n            if (fieldName in authSubscriptionFields[securityRequirement]) {\n                handleWarning({\n                    mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                    message: `Multiple operations have the same name ` +\n                        `'${fieldName}' and security requirement ` +\n                        `'${securityRequirement}'. GraphQL field names must be ` +\n                        `unique so only one can be added to the authentication ` +\n                        `viewer. Operation '${operation.operationString}' will be ignored.`,\n                    data,\n                    log: translationLog\n                });\n                return;\n            }\n            // Add field into viewer\n            authSubscriptionFields[securityRequirement][fieldName] = field;\n        }\n        // No viewer\n    }\n    else {\n        if (extensionFieldName && extensionFieldName in subscriptionFields) {\n            throw new Error(`Cannot create subscription field with name ` +\n                `\"${extensionFieldName}\".\\nYou provided \"${extensionFieldName}\" ` +\n                `in ${Oas3Tools.OAS_GRAPHQL_EXTENSIONS.FieldName}, but it ` +\n                `conflicts with another field named \"${extensionFieldName}\".`);\n        }\n        // Final fieldName verification\n        if (fieldName in subscriptionFields) {\n            handleWarning({\n                mitigationType: MitigationTypes.DUPLICATE_FIELD_NAME,\n                message: `Multiple operations have the same name ` +\n                    `'${fieldName}'. GraphQL field names must be ` +\n                    `unique so only one can be added to the Mutation object. ` +\n                    `Operation '${operation.operationString}' will be ignored.`,\n                data,\n                log: translationLog\n            });\n            return;\n        }\n        // Add field into Subscription\n        subscriptionFields[fieldName] = field;\n    }\n}\n/**\n * Creates the field object for the given operation.\n */\nfunction getFieldForOperation(operation, baseUrl, data, requestOptions, connectOptions, fetch) {\n    // Create GraphQL Type for response:\n    const type = getGraphQLType({\n        def: operation.responseDefinition,\n        data,\n        operation,\n        fetch\n    });\n    const payloadSchemaName = operation.payloadDefinition\n        ? operation.payloadDefinition.graphQLInputObjectTypeName\n        : null;\n    const args = getArgs({\n        /**\n         * Even though these arguments seems redundent because of the operation\n         * argument, the function cannot be refactored because it is also used to\n         * create arguments for links. The operation argument is really used to pass\n         * data to other functions.\n         */\n        requestPayloadDef: operation.payloadDefinition,\n        parameters: operation.parameters,\n        operation,\n        data,\n        fetch\n    });\n    // Get resolver and subscribe function for Subscription fields\n    if (operation.operationType === GraphQLOperationType.Subscription) {\n        const responseSchemaName = operation.responseDefinition\n            ? operation.responseDefinition.graphQLTypeName\n            : null;\n        const resolve = getPublishResolver({\n            operation,\n            responseName: responseSchemaName,\n            data,\n            fetch\n        });\n        const subscribe = getSubscribe({\n            operation,\n            payloadName: payloadSchemaName,\n            data,\n            baseUrl,\n            connectOptions\n        });\n        return {\n            type,\n            resolve,\n            subscribe,\n            args,\n            description: operation.description\n        };\n        // Get resolver for Query and Mutation fields\n    }\n    else {\n        const resolve = getResolver({\n            operation,\n            payloadName: payloadSchemaName,\n            data,\n            baseUrl,\n            requestOptions,\n            fetch\n        });\n        return {\n            type,\n            resolve,\n            args,\n            description: operation.description\n        };\n    }\n}\n/**\n * Ensure that the customResolvers/customSubscriptionResolvers object is a\n * triply nested object using the name of the OAS, the path, and the method\n * as keys.\n */\nfunction checkCustomResolversStructure(customResolvers, data) {\n    if (typeof customResolvers === 'object') {\n        // Check that all OASs that are referenced in the customResolvers are provided\n        Object.keys(customResolvers)\n            .filter((title) => {\n            // If no OAS contains this title\n            return !data.oass.some((oas) => {\n                return title === oas.info.title;\n            });\n        })\n            .forEach((title) => {\n            handleWarning({\n                mitigationType: MitigationTypes.CUSTOM_RESOLVER_UNKNOWN_OAS,\n                message: `Custom resolvers reference OAS '${title}' but no such ` +\n                    `OAS was provided`,\n                data,\n                log: translationLog\n            });\n        });\n        // TODO: Only run the following test on OASs that exist. See previous check.\n        Object.keys(customResolvers).forEach((title) => {\n            // Get all operations from a particular OAS\n            const operations = Object.values(data.operations).filter((operation) => {\n                return title === operation.oas.info.title;\n            });\n            Object.keys(customResolvers[title]).forEach((path) => {\n                Object.keys(customResolvers[title][path]).forEach((method) => {\n                    if (!operations.some((operation) => {\n                        return path === operation.path && method === operation.method;\n                    })) {\n                        handleWarning({\n                            mitigationType: MitigationTypes.CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD,\n                            message: `A custom resolver references an operation with ` +\n                                `path '${path}' and method '${method}' but no such operation ` +\n                                `exists in OAS '${title}'`,\n                            data,\n                            log: translationLog\n                        });\n                    }\n                });\n            });\n        });\n    }\n}\n/**\n * Ensures that the options are valid\n */\nfunction preliminaryChecks(options, data) {\n    // Check if OASs have unique titles\n    const titles = data.oass.map((oas) => {\n        return oas.info.title;\n    });\n    // Find duplicates among titles\n    new Set(titles.filter((title, index) => {\n        return titles.indexOf(title) !== index;\n    })).forEach((title) => {\n        handleWarning({\n            mitigationType: MitigationTypes.MULTIPLE_OAS_SAME_TITLE,\n            message: `Multiple OAS share the same title '${title}'`,\n            data,\n            log: translationLog\n        });\n    });\n    // Check customResolvers\n    checkCustomResolversStructure(options.customResolvers, data);\n    // Check customSubscriptionResolvers\n    checkCustomResolversStructure(options.customSubscriptionResolvers, data);\n}\nexport { CaseStyle, sanitize } from './oas_3_tools';\nexport { GraphQLOperationType } from './types/graphql';\n"],"names":["GraphQLOperationType","debug","Swagger2OpenAPI.convertObj","OASValidator.validate","jsonptr.JsonPointer","CaseStyle","pluralize.singular","PubSub","translationLog","httpLog","Oas3Tools.getBaseUrl","Oas3Tools.sanitize","Oas3Tools.CaseStyle","Oas3Tools.desanitizeObjectKeys","Oas3Tools.sanitizeObjectKeys","Oas3Tools.resolveRef","Oas3Tools.HTTP_METHODS","Oas3Tools.trim","JSONPath","GraphQLError","preprocessingLog","Oas3Tools.getResponseSchemaAndNames","Oas3Tools.generateOperationId","Oas3Tools.getRequestSchemaAndNames","Oas3Tools.getLinks","Oas3Tools.getParameters","Oas3Tools.getSecurityRequirements","Oas3Tools.getServers","Oas3Tools.countOperations","Oas3Tools.countOperationsMutation","Oas3Tools.countOperationsQuery","Oas3Tools.countOperationsSubscription","Oas3Tools.isHttpMethod","Oas3Tools.formatOperationString","Oas3Tools.getSecuritySchemes","Oas3Tools.capitalize","Oas3Tools.storeSaneName","Oas3Tools.getSchemaTargetGraphQLType","Oas3Tools.OAS_GRAPHQL_EXTENSIONS","Oas3Tools.isSanitized","GraphQLScalarType","GraphQLJSON","GraphQLString","GraphQLInt","GraphQLFloat","GraphQLBoolean","GraphQLID","GraphQLBigInt","GraphQLObjectType","GraphQLInputObjectType","GraphQLUnionType","GraphQLList","GraphQLEnumType","GraphQLNonNull","Oas3Tools.methodToHttpMethod","Oas3Tools.uncapitalize","Oas3Tools.getValidOAS3","GraphQLTools.getEmptyObjectType","GraphQLSchema","Oas3Tools.inferResourceNameFromPath"],"mappings":"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"}