import { Writer, Reader } from "protobufjs/minimal";
import { Duration } from "./google/protobuf/duration";
export declare const protobufPackage = "wgpb";
export declare enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    ERROR = 2,
    WARNING = 3,
    PANIC = 4,
    FATAL = 5
}
export declare function logLevelFromJSON(object: any): LogLevel;
export declare function logLevelToJSON(object: LogLevel): string;
export declare enum AuthProviderKind {
    AuthProviderGithub = 0,
    AuthProviderOIDC = 1
}
export declare function authProviderKindFromJSON(object: any): AuthProviderKind;
export declare function authProviderKindToJSON(object: AuthProviderKind): string;
export declare enum ApiCacheKind {
    NO_CACHE = 0,
    IN_MEMORY_CACHE = 1,
    REDIS_CACHE = 2
}
export declare function apiCacheKindFromJSON(object: any): ApiCacheKind;
export declare function apiCacheKindToJSON(object: ApiCacheKind): string;
export declare enum InjectVariableKind {
    UUID = 0,
    DATE_TIME = 1,
    ENVIRONMENT_VARIABLE = 2
}
export declare function injectVariableKindFromJSON(object: any): InjectVariableKind;
export declare function injectVariableKindToJSON(object: InjectVariableKind): string;
export declare enum Claim {
    EMAIL = 0,
    EMAIL_VERIFIED = 1,
    NAME = 2,
    NICKNAME = 3,
    LOCATION = 4,
    PROVIDER = 5
}
export declare function claimFromJSON(object: any): Claim;
export declare function claimToJSON(object: Claim): string;
export declare enum OperationType {
    QUERY = 0,
    MUTATION = 1,
    SUBSCRIPTION = 2
}
export declare function operationTypeFromJSON(object: any): OperationType;
export declare function operationTypeToJSON(object: OperationType): string;
export declare enum DataSourceKind {
    STATIC = 0,
    REST = 1,
    GRAPHQL = 2,
    POSTGRESQL = 3,
    MYSQL = 4,
    SQLSERVER = 5,
    MONGODB = 6,
    SQLITE = 7
}
export declare function dataSourceKindFromJSON(object: any): DataSourceKind;
export declare function dataSourceKindToJSON(object: DataSourceKind): string;
export declare enum UpstreamAuthenticationKind {
    UpstreamAuthenticationJWT = 0,
    UpstreamAuthenticationJWTWithAccessTokenExchange = 1
}
export declare function upstreamAuthenticationKindFromJSON(object: any): UpstreamAuthenticationKind;
export declare function upstreamAuthenticationKindToJSON(object: UpstreamAuthenticationKind): string;
export declare enum SigningMethod {
    SigningMethodHS256 = 0
}
export declare function signingMethodFromJSON(object: any): SigningMethod;
export declare function signingMethodToJSON(object: SigningMethod): string;
export declare enum HTTPMethod {
    GET = 0,
    POST = 1,
    PUT = 2,
    DELETE = 3,
    OPTIONS = 4
}
export declare function hTTPMethodFromJSON(object: any): HTTPMethod;
export declare function hTTPMethodToJSON(object: HTTPMethod): string;
export declare enum ArgumentSource {
    OBJECT_FIELD = 0,
    FIELD_ARGUMENT = 1
}
export declare function argumentSourceFromJSON(object: any): ArgumentSource;
export declare function argumentSourceToJSON(object: ArgumentSource): string;
export declare enum ArgumentRenderConfiguration {
    RENDER_ARGUMENT_DEFAULT = 0,
    RENDER_ARGUMENT_AS_GRAPHQL_VALUE = 1,
    RENDER_ARGUMENT_AS_ARRAY_CSV = 2
}
export declare function argumentRenderConfigurationFromJSON(object: any): ArgumentRenderConfiguration;
export declare function argumentRenderConfigurationToJSON(object: ArgumentRenderConfiguration): string;
export declare enum AnalyticsRequestType {
    PersistedQuery = 0,
    PersistedMutation = 1,
    PersistedSubscription = 3,
    PersistedLiveQuery = 4,
    DynamicQuery = 5,
    DynamicMutation = 6,
    DynamicSubscription = 7
}
export declare function analyticsRequestTypeFromJSON(object: any): AnalyticsRequestType;
export declare function analyticsRequestTypeToJSON(object: AnalyticsRequestType): string;
export declare enum ConfigurationVariableKind {
    STATIC_CONFIGURATION_VARIABLE = 0,
    ENV_CONFIGURATION_VARIABLE = 1,
    PLACEHOLDER_CONFIGURATION_VARIABLE = 2
}
export declare function configurationVariableKindFromJSON(object: any): ConfigurationVariableKind;
export declare function configurationVariableKindToJSON(object: ConfigurationVariableKind): string;
export interface WunderNodeConfig {
    server: Server | undefined;
    logging: Logging | undefined;
    apis: Api[];
}
export interface Server {
    gracefulShutdownTimeout: Duration | undefined;
    keepAlive: Duration | undefined;
    readTimeout: Duration | undefined;
    writeTimeout: Duration | undefined;
    idleTimeout: Duration | undefined;
    certificates: Certificate[];
}
export interface Certificate {
    keyPem: string;
    certPem: string;
}
export interface Logging {
    level: LogLevel;
}
export interface Api {
    hosts: string[];
    pathPrefix: string;
    engineConfiguration: EngineConfiguration | undefined;
    enableSingleFlight: boolean;
    enableGraphqlEndpoint: boolean;
    operations: Operation[];
    corsConfiguration: CorsConfiguration | undefined;
    primaryHost: string;
    deploymentId: string;
    cacheConfig: ApiCacheConfig | undefined;
    apiConfigHash: string;
    authenticationConfig: ApiAuthenticationConfig | undefined;
    s3UploadConfiguration: S3UploadConfiguration[];
}
export interface ApiAuthenticationConfig {
    cookieBased: CookieBasedAuthentication | undefined;
    hooks: ApiAuthenticationHooks | undefined;
    jwksBased: JwksBasedAuthentication | undefined;
}
export interface JwksBasedAuthentication {
    providers: JwksAuthProvider[];
}
export interface JwksAuthProvider {
    jwksUrl: ConfigurationVariable | undefined;
    jwksJson: ConfigurationVariable | undefined;
    userInfoEndpoint: ConfigurationVariable | undefined;
    userInfoCacheTtlSeconds: number;
}
export interface ApiAuthenticationHooks {
    postAuthentication: boolean;
    mutatingPostAuthentication: boolean;
    revalidateAuthentication: boolean;
}
export interface CookieBasedAuthentication {
    providers: AuthProvider[];
    authorizedRedirectUris: ConfigurationVariable[];
    authorizedRedirectUriRegexes: ConfigurationVariable[];
    hashKey: ConfigurationVariable | undefined;
    blockKey: ConfigurationVariable | undefined;
}
export interface AuthProvider {
    id: string;
    kind: AuthProviderKind;
    githubConfig: GithubAuthProviderConfig | undefined;
    oidcConfig: OpenIDConnectAuthProviderConfig | undefined;
}
export interface GithubAuthProviderConfig {
    clientId: ConfigurationVariable | undefined;
    clientSecret: ConfigurationVariable | undefined;
}
export interface OpenIDConnectAuthProviderConfig {
    issuer: ConfigurationVariable | undefined;
    clientId: ConfigurationVariable | undefined;
    clientSecret: ConfigurationVariable | undefined;
}
export interface ApiCacheConfig {
    kind: ApiCacheKind;
    inMemoryConfig: InMemoryCacheConfig | undefined;
    redisConfig: RedisCacheConfig | undefined;
}
export interface InMemoryCacheConfig {
    maxSize: number;
}
export interface RedisCacheConfig {
    redisUrlEnvVar: string;
}
export interface Operation {
    name: string;
    content: string;
    operationType: OperationType;
    variablesSchema: string;
    responseSchema: string;
    cacheConfig: OperationCacheConfig | undefined;
    authenticationConfig: OperationAuthenticationConfig | undefined;
    liveQueryConfig: OperationLiveQueryConfig | undefined;
    authorizationConfig: OperationAuthorizationConfig | undefined;
    hooksConfiguration: OperationHooksConfiguration | undefined;
    variablesConfiguration: OperationVariablesConfiguration | undefined;
    /**
     * internal operations are only accessible internally, e.g. to hooks
     * they cannot be reached from the public surface of the API
     */
    internal: boolean;
}
export interface OperationVariablesConfiguration {
    injectVariables: VariableInjectionConfiguration[];
}
export interface VariableInjectionConfiguration {
    variableName: string;
    variableKind: InjectVariableKind;
    dateFormat: string;
    environmentVariableName: string;
}
export interface OperationHooksConfiguration {
    preResolve: boolean;
    postResolve: boolean;
    mutatingPreResolve: boolean;
    mutatingPostResolve: boolean;
    mockResolve: MockResolveHookConfiguration | undefined;
}
export interface MockResolveHookConfiguration {
    enable: boolean;
    subscriptionPollingIntervalMillis: number;
}
export interface OperationAuthorizationConfig {
    claims: ClaimConfig[];
    roleConfig: OperationRoleConfig | undefined;
}
export interface OperationRoleConfig {
    /** the user must match all roles */
    requireMatchAll: string[];
    /** the user must match at least one of the roles */
    requireMatchAny: string[];
    /** the user must not match all of the roles */
    denyMatchAll: string[];
    /** the user must not match any of the roles */
    denyMatchAny: string[];
}
export interface ClaimConfig {
    variableName: string;
    claim: Claim;
}
export interface OperationLiveQueryConfig {
    enable: boolean;
    pollingIntervalSeconds: number;
}
export interface OperationAuthenticationConfig {
    authRequired: boolean;
}
export interface OperationCacheConfig {
    enable: boolean;
    maxAge: number;
    public: boolean;
    staleWhileRevalidate: number;
}
export interface EngineConfiguration {
    defaultFlushInterval: number;
    datasourceConfigurations: DataSourceConfiguration[];
    fieldConfigurations: FieldConfiguration[];
    graphqlSchema: string;
    typeConfigurations: TypeConfiguration[];
}
export interface DataSourceConfiguration {
    kind: DataSourceKind;
    rootNodes: TypeField[];
    childNodes: TypeField[];
    overrideFieldPathFromAlias: boolean;
    customRest: DatasourcecustomRest | undefined;
    customGraphql: DatasourcecustomGraphql | undefined;
    customStatic: DatasourcecustomStatic | undefined;
    customDatabase: DatasourcecustomDatabase | undefined;
    directives: DirectiveConfiguration[];
}
export interface DirectiveConfiguration {
    directiveName: string;
    renameTo: string;
}
export interface DatasourcecustomRest {
    fetch: FetchConfiguration | undefined;
    subscription: RESTSubscriptionConfiguration | undefined;
    statusCodeTypeMappings: StatusCodeTypeMapping[];
    defaultTypeName: string;
}
export interface StatusCodeTypeMapping {
    statusCode: number;
    typeName: string;
    injectStatusCodeIntoBody: boolean;
}
export interface DatasourcecustomGraphql {
    fetch: FetchConfiguration | undefined;
    subscription: GraphQLSubscriptionConfiguration | undefined;
    federation: GraphQLFederationConfiguration | undefined;
    upstreamSchema: string;
}
export interface DatasourcecustomDatabase {
    databaseURL: ConfigurationVariable | undefined;
    prismaSchema: string;
    graphqlSchema: string;
    /** closeTimeoutSeconds define that the database connection will be closed after the given amount of seconds of inactivity */
    closeTimeoutSeconds: number;
}
export interface GraphQLFederationConfiguration {
    enabled: boolean;
    serviceSdl: string;
}
export interface DatasourcecustomStatic {
    data: ConfigurationVariable | undefined;
}
export interface GraphQLSubscriptionConfiguration {
    enabled: boolean;
    url: ConfigurationVariable | undefined;
}
export interface FetchConfiguration {
    url: ConfigurationVariable | undefined;
    method: HTTPMethod;
    header: {
        [key: string]: HTTPHeader;
    };
    body: ConfigurationVariable | undefined;
    query: URLQueryConfiguration[];
    upstreamAuthentication: UpstreamAuthentication | undefined;
}
export interface FetchConfiguration_HeaderEntry {
    key: string;
    value: HTTPHeader | undefined;
}
export interface UpstreamAuthentication {
    kind: UpstreamAuthenticationKind;
    jwtConfig: JwtUpstreamAuthenticationConfig | undefined;
    jwtWithAccessTokenExchangeConfig: JwtUpstreamAuthenticationWithAccessTokenExchange | undefined;
}
export interface JwtUpstreamAuthenticationConfig {
    secret: ConfigurationVariable | undefined;
    signingMethod: SigningMethod;
}
export interface JwtUpstreamAuthenticationWithAccessTokenExchange {
    secret: ConfigurationVariable | undefined;
    signingMethod: SigningMethod;
    accessTokenExchangeEndpoint: ConfigurationVariable | undefined;
}
export interface RESTSubscriptionConfiguration {
    enabled: boolean;
    pollingIntervalMillis: number;
    skipPublishSameResponse: boolean;
}
export interface URLQueryConfiguration {
    name: string;
    value: string;
}
export interface HTTPHeader {
    values: ConfigurationVariable[];
}
export interface TypeConfiguration {
    typeName: string;
    renameTo: string;
}
export interface FieldConfiguration {
    typeName: string;
    fieldName: string;
    disableDefaultFieldMapping: boolean;
    path: string[];
    argumentsConfiguration: ArgumentConfiguration[];
    requiresFields: string[];
}
export interface TypeField {
    typeName: string;
    fieldNames: string[];
}
export interface ArgumentConfiguration {
    name: string;
    sourceType: ArgumentSource;
    sourcePath: string[];
    renderConfiguration: ArgumentRenderConfiguration;
}
export interface RequestAnalyticsRecord {
    requestId: string;
    deploymentId: string;
    method: HTTPMethod;
    path: string;
    host: string;
    startTime: Date | undefined;
    duration: Duration | undefined;
    statusCode: number;
    bodySizeBytes: number;
    remoteIp: string;
    nodePhysicalLocation: string;
    nodeId: string;
    nodeInstanceId: string;
    sdkVersion: string;
    operationType: AnalyticsRequestType;
    cacheHit: boolean;
    sub: string;
}
export interface WunderNodeAnalyticsData {
    requests: RequestAnalyticsRecord[];
}
export interface WunderGraphConfiguration {
    api: UserDefinedApi | undefined;
    apiId: string;
    deploymentName: string;
    environmentIds: string[];
    apiName: string;
    dangerouslyEnableGraphQLEndpoint: boolean;
}
export interface S3UploadConfiguration {
    name: string;
    endpoint: ConfigurationVariable | undefined;
    accessKeyID: ConfigurationVariable | undefined;
    secretAccessKey: ConfigurationVariable | undefined;
    bucketName: ConfigurationVariable | undefined;
    bucketLocation: ConfigurationVariable | undefined;
    useSSL: boolean;
}
export interface UserDefinedApi {
    engineConfiguration: EngineConfiguration | undefined;
    enableGraphqlEndpoint: boolean;
    operations: Operation[];
    corsConfiguration: CorsConfiguration | undefined;
    authenticationConfig: ApiAuthenticationConfig | undefined;
    s3UploadConfiguration: S3UploadConfiguration[];
    additionalHostNames: ConfigurationVariable[];
}
export interface CorsConfiguration {
    /**
     * AllowedOrigins is a list of origins a cross-domain request can be executed from.
     * If the special "*" value is present in the list, all origins will be allowed.
     * An origin may contain a wildcard (*) to replace 0 or more characters
     * (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penalty.
     * Only one wildcard can be used per origin.
     * Default value is ["*"]
     */
    allowedOrigins: ConfigurationVariable[];
    /**
     * AllowedMethods is a list of methods the client is allowed to use with
     * cross-domain requests. Default value is simple methods (HEAD, GET and POST).
     */
    allowedMethods: string[];
    /**
     * AllowedHeaders is list of non simple headers the client is allowed to use with
     * cross-domain requests.
     * If the special "*" value is present in the list, all headers will be allowed.
     * Default value is [] but "Origin" is always appended to the list.
     */
    allowedHeaders: string[];
    /**
     * ExposedHeaders indicates which headers are safe to expose to the API of a CORS
     * API specification
     */
    exposedHeaders: string[];
    /**
     * MaxAge indicates how long (in seconds) the results of a preflight request
     * can be cached
     */
    maxAge: number;
    /**
     * AllowCredentials indicates whether the request can include user credentials like
     * cookies, HTTP authentication or client side SSL certificates.
     */
    allowCredentials: boolean;
}
export interface ConfigurationVariable {
    kind: ConfigurationVariableKind;
    staticVariableContent: string;
    environmentVariableName: string;
    environmentVariableDefaultValue: string;
    placeholderVariableName: string;
}
export declare const WunderNodeConfig: {
    encode(message: WunderNodeConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): WunderNodeConfig;
    fromJSON(object: any): WunderNodeConfig;
    toJSON(message: WunderNodeConfig): unknown;
    fromPartial(object: DeepPartial<WunderNodeConfig>): WunderNodeConfig;
};
export declare const Server: {
    encode(message: Server, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Server;
    fromJSON(object: any): Server;
    toJSON(message: Server): unknown;
    fromPartial(object: DeepPartial<Server>): Server;
};
export declare const Certificate: {
    encode(message: Certificate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Certificate;
    fromJSON(object: any): Certificate;
    toJSON(message: Certificate): unknown;
    fromPartial(object: DeepPartial<Certificate>): Certificate;
};
export declare const Logging: {
    encode(message: Logging, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Logging;
    fromJSON(object: any): Logging;
    toJSON(message: Logging): unknown;
    fromPartial(object: DeepPartial<Logging>): Logging;
};
export declare const Api: {
    encode(message: Api, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Api;
    fromJSON(object: any): Api;
    toJSON(message: Api): unknown;
    fromPartial(object: DeepPartial<Api>): Api;
};
export declare const ApiAuthenticationConfig: {
    encode(message: ApiAuthenticationConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ApiAuthenticationConfig;
    fromJSON(object: any): ApiAuthenticationConfig;
    toJSON(message: ApiAuthenticationConfig): unknown;
    fromPartial(object: DeepPartial<ApiAuthenticationConfig>): ApiAuthenticationConfig;
};
export declare const JwksBasedAuthentication: {
    encode(message: JwksBasedAuthentication, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): JwksBasedAuthentication;
    fromJSON(object: any): JwksBasedAuthentication;
    toJSON(message: JwksBasedAuthentication): unknown;
    fromPartial(object: DeepPartial<JwksBasedAuthentication>): JwksBasedAuthentication;
};
export declare const JwksAuthProvider: {
    encode(message: JwksAuthProvider, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): JwksAuthProvider;
    fromJSON(object: any): JwksAuthProvider;
    toJSON(message: JwksAuthProvider): unknown;
    fromPartial(object: DeepPartial<JwksAuthProvider>): JwksAuthProvider;
};
export declare const ApiAuthenticationHooks: {
    encode(message: ApiAuthenticationHooks, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ApiAuthenticationHooks;
    fromJSON(object: any): ApiAuthenticationHooks;
    toJSON(message: ApiAuthenticationHooks): unknown;
    fromPartial(object: DeepPartial<ApiAuthenticationHooks>): ApiAuthenticationHooks;
};
export declare const CookieBasedAuthentication: {
    encode(message: CookieBasedAuthentication, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): CookieBasedAuthentication;
    fromJSON(object: any): CookieBasedAuthentication;
    toJSON(message: CookieBasedAuthentication): unknown;
    fromPartial(object: DeepPartial<CookieBasedAuthentication>): CookieBasedAuthentication;
};
export declare const AuthProvider: {
    encode(message: AuthProvider, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): AuthProvider;
    fromJSON(object: any): AuthProvider;
    toJSON(message: AuthProvider): unknown;
    fromPartial(object: DeepPartial<AuthProvider>): AuthProvider;
};
export declare const GithubAuthProviderConfig: {
    encode(message: GithubAuthProviderConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): GithubAuthProviderConfig;
    fromJSON(object: any): GithubAuthProviderConfig;
    toJSON(message: GithubAuthProviderConfig): unknown;
    fromPartial(object: DeepPartial<GithubAuthProviderConfig>): GithubAuthProviderConfig;
};
export declare const OpenIDConnectAuthProviderConfig: {
    encode(message: OpenIDConnectAuthProviderConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OpenIDConnectAuthProviderConfig;
    fromJSON(object: any): OpenIDConnectAuthProviderConfig;
    toJSON(message: OpenIDConnectAuthProviderConfig): unknown;
    fromPartial(object: DeepPartial<OpenIDConnectAuthProviderConfig>): OpenIDConnectAuthProviderConfig;
};
export declare const ApiCacheConfig: {
    encode(message: ApiCacheConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ApiCacheConfig;
    fromJSON(object: any): ApiCacheConfig;
    toJSON(message: ApiCacheConfig): unknown;
    fromPartial(object: DeepPartial<ApiCacheConfig>): ApiCacheConfig;
};
export declare const InMemoryCacheConfig: {
    encode(message: InMemoryCacheConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): InMemoryCacheConfig;
    fromJSON(object: any): InMemoryCacheConfig;
    toJSON(message: InMemoryCacheConfig): unknown;
    fromPartial(object: DeepPartial<InMemoryCacheConfig>): InMemoryCacheConfig;
};
export declare const RedisCacheConfig: {
    encode(message: RedisCacheConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): RedisCacheConfig;
    fromJSON(object: any): RedisCacheConfig;
    toJSON(message: RedisCacheConfig): unknown;
    fromPartial(object: DeepPartial<RedisCacheConfig>): RedisCacheConfig;
};
export declare const Operation: {
    encode(message: Operation, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Operation;
    fromJSON(object: any): Operation;
    toJSON(message: Operation): unknown;
    fromPartial(object: DeepPartial<Operation>): Operation;
};
export declare const OperationVariablesConfiguration: {
    encode(message: OperationVariablesConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationVariablesConfiguration;
    fromJSON(object: any): OperationVariablesConfiguration;
    toJSON(message: OperationVariablesConfiguration): unknown;
    fromPartial(object: DeepPartial<OperationVariablesConfiguration>): OperationVariablesConfiguration;
};
export declare const VariableInjectionConfiguration: {
    encode(message: VariableInjectionConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): VariableInjectionConfiguration;
    fromJSON(object: any): VariableInjectionConfiguration;
    toJSON(message: VariableInjectionConfiguration): unknown;
    fromPartial(object: DeepPartial<VariableInjectionConfiguration>): VariableInjectionConfiguration;
};
export declare const OperationHooksConfiguration: {
    encode(message: OperationHooksConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationHooksConfiguration;
    fromJSON(object: any): OperationHooksConfiguration;
    toJSON(message: OperationHooksConfiguration): unknown;
    fromPartial(object: DeepPartial<OperationHooksConfiguration>): OperationHooksConfiguration;
};
export declare const MockResolveHookConfiguration: {
    encode(message: MockResolveHookConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): MockResolveHookConfiguration;
    fromJSON(object: any): MockResolveHookConfiguration;
    toJSON(message: MockResolveHookConfiguration): unknown;
    fromPartial(object: DeepPartial<MockResolveHookConfiguration>): MockResolveHookConfiguration;
};
export declare const OperationAuthorizationConfig: {
    encode(message: OperationAuthorizationConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationAuthorizationConfig;
    fromJSON(object: any): OperationAuthorizationConfig;
    toJSON(message: OperationAuthorizationConfig): unknown;
    fromPartial(object: DeepPartial<OperationAuthorizationConfig>): OperationAuthorizationConfig;
};
export declare const OperationRoleConfig: {
    encode(message: OperationRoleConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationRoleConfig;
    fromJSON(object: any): OperationRoleConfig;
    toJSON(message: OperationRoleConfig): unknown;
    fromPartial(object: DeepPartial<OperationRoleConfig>): OperationRoleConfig;
};
export declare const ClaimConfig: {
    encode(message: ClaimConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ClaimConfig;
    fromJSON(object: any): ClaimConfig;
    toJSON(message: ClaimConfig): unknown;
    fromPartial(object: DeepPartial<ClaimConfig>): ClaimConfig;
};
export declare const OperationLiveQueryConfig: {
    encode(message: OperationLiveQueryConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationLiveQueryConfig;
    fromJSON(object: any): OperationLiveQueryConfig;
    toJSON(message: OperationLiveQueryConfig): unknown;
    fromPartial(object: DeepPartial<OperationLiveQueryConfig>): OperationLiveQueryConfig;
};
export declare const OperationAuthenticationConfig: {
    encode(message: OperationAuthenticationConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationAuthenticationConfig;
    fromJSON(object: any): OperationAuthenticationConfig;
    toJSON(message: OperationAuthenticationConfig): unknown;
    fromPartial(object: DeepPartial<OperationAuthenticationConfig>): OperationAuthenticationConfig;
};
export declare const OperationCacheConfig: {
    encode(message: OperationCacheConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): OperationCacheConfig;
    fromJSON(object: any): OperationCacheConfig;
    toJSON(message: OperationCacheConfig): unknown;
    fromPartial(object: DeepPartial<OperationCacheConfig>): OperationCacheConfig;
};
export declare const EngineConfiguration: {
    encode(message: EngineConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): EngineConfiguration;
    fromJSON(object: any): EngineConfiguration;
    toJSON(message: EngineConfiguration): unknown;
    fromPartial(object: DeepPartial<EngineConfiguration>): EngineConfiguration;
};
export declare const DataSourceConfiguration: {
    encode(message: DataSourceConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DataSourceConfiguration;
    fromJSON(object: any): DataSourceConfiguration;
    toJSON(message: DataSourceConfiguration): unknown;
    fromPartial(object: DeepPartial<DataSourceConfiguration>): DataSourceConfiguration;
};
export declare const DirectiveConfiguration: {
    encode(message: DirectiveConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DirectiveConfiguration;
    fromJSON(object: any): DirectiveConfiguration;
    toJSON(message: DirectiveConfiguration): unknown;
    fromPartial(object: DeepPartial<DirectiveConfiguration>): DirectiveConfiguration;
};
export declare const DatasourcecustomRest: {
    encode(message: DatasourcecustomRest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DatasourcecustomRest;
    fromJSON(object: any): DatasourcecustomRest;
    toJSON(message: DatasourcecustomRest): unknown;
    fromPartial(object: DeepPartial<DatasourcecustomRest>): DatasourcecustomRest;
};
export declare const StatusCodeTypeMapping: {
    encode(message: StatusCodeTypeMapping, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): StatusCodeTypeMapping;
    fromJSON(object: any): StatusCodeTypeMapping;
    toJSON(message: StatusCodeTypeMapping): unknown;
    fromPartial(object: DeepPartial<StatusCodeTypeMapping>): StatusCodeTypeMapping;
};
export declare const DatasourcecustomGraphql: {
    encode(message: DatasourcecustomGraphql, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DatasourcecustomGraphql;
    fromJSON(object: any): DatasourcecustomGraphql;
    toJSON(message: DatasourcecustomGraphql): unknown;
    fromPartial(object: DeepPartial<DatasourcecustomGraphql>): DatasourcecustomGraphql;
};
export declare const DatasourcecustomDatabase: {
    encode(message: DatasourcecustomDatabase, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DatasourcecustomDatabase;
    fromJSON(object: any): DatasourcecustomDatabase;
    toJSON(message: DatasourcecustomDatabase): unknown;
    fromPartial(object: DeepPartial<DatasourcecustomDatabase>): DatasourcecustomDatabase;
};
export declare const GraphQLFederationConfiguration: {
    encode(message: GraphQLFederationConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): GraphQLFederationConfiguration;
    fromJSON(object: any): GraphQLFederationConfiguration;
    toJSON(message: GraphQLFederationConfiguration): unknown;
    fromPartial(object: DeepPartial<GraphQLFederationConfiguration>): GraphQLFederationConfiguration;
};
export declare const DatasourcecustomStatic: {
    encode(message: DatasourcecustomStatic, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DatasourcecustomStatic;
    fromJSON(object: any): DatasourcecustomStatic;
    toJSON(message: DatasourcecustomStatic): unknown;
    fromPartial(object: DeepPartial<DatasourcecustomStatic>): DatasourcecustomStatic;
};
export declare const GraphQLSubscriptionConfiguration: {
    encode(message: GraphQLSubscriptionConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): GraphQLSubscriptionConfiguration;
    fromJSON(object: any): GraphQLSubscriptionConfiguration;
    toJSON(message: GraphQLSubscriptionConfiguration): unknown;
    fromPartial(object: DeepPartial<GraphQLSubscriptionConfiguration>): GraphQLSubscriptionConfiguration;
};
export declare const FetchConfiguration: {
    encode(message: FetchConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): FetchConfiguration;
    fromJSON(object: any): FetchConfiguration;
    toJSON(message: FetchConfiguration): unknown;
    fromPartial(object: DeepPartial<FetchConfiguration>): FetchConfiguration;
};
export declare const FetchConfiguration_HeaderEntry: {
    encode(message: FetchConfiguration_HeaderEntry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): FetchConfiguration_HeaderEntry;
    fromJSON(object: any): FetchConfiguration_HeaderEntry;
    toJSON(message: FetchConfiguration_HeaderEntry): unknown;
    fromPartial(object: DeepPartial<FetchConfiguration_HeaderEntry>): FetchConfiguration_HeaderEntry;
};
export declare const UpstreamAuthentication: {
    encode(message: UpstreamAuthentication, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): UpstreamAuthentication;
    fromJSON(object: any): UpstreamAuthentication;
    toJSON(message: UpstreamAuthentication): unknown;
    fromPartial(object: DeepPartial<UpstreamAuthentication>): UpstreamAuthentication;
};
export declare const JwtUpstreamAuthenticationConfig: {
    encode(message: JwtUpstreamAuthenticationConfig, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): JwtUpstreamAuthenticationConfig;
    fromJSON(object: any): JwtUpstreamAuthenticationConfig;
    toJSON(message: JwtUpstreamAuthenticationConfig): unknown;
    fromPartial(object: DeepPartial<JwtUpstreamAuthenticationConfig>): JwtUpstreamAuthenticationConfig;
};
export declare const JwtUpstreamAuthenticationWithAccessTokenExchange: {
    encode(message: JwtUpstreamAuthenticationWithAccessTokenExchange, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): JwtUpstreamAuthenticationWithAccessTokenExchange;
    fromJSON(object: any): JwtUpstreamAuthenticationWithAccessTokenExchange;
    toJSON(message: JwtUpstreamAuthenticationWithAccessTokenExchange): unknown;
    fromPartial(object: DeepPartial<JwtUpstreamAuthenticationWithAccessTokenExchange>): JwtUpstreamAuthenticationWithAccessTokenExchange;
};
export declare const RESTSubscriptionConfiguration: {
    encode(message: RESTSubscriptionConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): RESTSubscriptionConfiguration;
    fromJSON(object: any): RESTSubscriptionConfiguration;
    toJSON(message: RESTSubscriptionConfiguration): unknown;
    fromPartial(object: DeepPartial<RESTSubscriptionConfiguration>): RESTSubscriptionConfiguration;
};
export declare const URLQueryConfiguration: {
    encode(message: URLQueryConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): URLQueryConfiguration;
    fromJSON(object: any): URLQueryConfiguration;
    toJSON(message: URLQueryConfiguration): unknown;
    fromPartial(object: DeepPartial<URLQueryConfiguration>): URLQueryConfiguration;
};
export declare const HTTPHeader: {
    encode(message: HTTPHeader, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): HTTPHeader;
    fromJSON(object: any): HTTPHeader;
    toJSON(message: HTTPHeader): unknown;
    fromPartial(object: DeepPartial<HTTPHeader>): HTTPHeader;
};
export declare const TypeConfiguration: {
    encode(message: TypeConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): TypeConfiguration;
    fromJSON(object: any): TypeConfiguration;
    toJSON(message: TypeConfiguration): unknown;
    fromPartial(object: DeepPartial<TypeConfiguration>): TypeConfiguration;
};
export declare const FieldConfiguration: {
    encode(message: FieldConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): FieldConfiguration;
    fromJSON(object: any): FieldConfiguration;
    toJSON(message: FieldConfiguration): unknown;
    fromPartial(object: DeepPartial<FieldConfiguration>): FieldConfiguration;
};
export declare const TypeField: {
    encode(message: TypeField, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): TypeField;
    fromJSON(object: any): TypeField;
    toJSON(message: TypeField): unknown;
    fromPartial(object: DeepPartial<TypeField>): TypeField;
};
export declare const ArgumentConfiguration: {
    encode(message: ArgumentConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ArgumentConfiguration;
    fromJSON(object: any): ArgumentConfiguration;
    toJSON(message: ArgumentConfiguration): unknown;
    fromPartial(object: DeepPartial<ArgumentConfiguration>): ArgumentConfiguration;
};
export declare const RequestAnalyticsRecord: {
    encode(message: RequestAnalyticsRecord, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): RequestAnalyticsRecord;
    fromJSON(object: any): RequestAnalyticsRecord;
    toJSON(message: RequestAnalyticsRecord): unknown;
    fromPartial(object: DeepPartial<RequestAnalyticsRecord>): RequestAnalyticsRecord;
};
export declare const WunderNodeAnalyticsData: {
    encode(message: WunderNodeAnalyticsData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): WunderNodeAnalyticsData;
    fromJSON(object: any): WunderNodeAnalyticsData;
    toJSON(message: WunderNodeAnalyticsData): unknown;
    fromPartial(object: DeepPartial<WunderNodeAnalyticsData>): WunderNodeAnalyticsData;
};
export declare const WunderGraphConfiguration: {
    encode(message: WunderGraphConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): WunderGraphConfiguration;
    fromJSON(object: any): WunderGraphConfiguration;
    toJSON(message: WunderGraphConfiguration): unknown;
    fromPartial(object: DeepPartial<WunderGraphConfiguration>): WunderGraphConfiguration;
};
export declare const S3UploadConfiguration: {
    encode(message: S3UploadConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): S3UploadConfiguration;
    fromJSON(object: any): S3UploadConfiguration;
    toJSON(message: S3UploadConfiguration): unknown;
    fromPartial(object: DeepPartial<S3UploadConfiguration>): S3UploadConfiguration;
};
export declare const UserDefinedApi: {
    encode(message: UserDefinedApi, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): UserDefinedApi;
    fromJSON(object: any): UserDefinedApi;
    toJSON(message: UserDefinedApi): unknown;
    fromPartial(object: DeepPartial<UserDefinedApi>): UserDefinedApi;
};
export declare const CorsConfiguration: {
    encode(message: CorsConfiguration, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): CorsConfiguration;
    fromJSON(object: any): CorsConfiguration;
    toJSON(message: CorsConfiguration): unknown;
    fromPartial(object: DeepPartial<CorsConfiguration>): CorsConfiguration;
};
export declare const ConfigurationVariable: {
    encode(message: ConfigurationVariable, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ConfigurationVariable;
    fromJSON(object: any): ConfigurationVariable;
    toJSON(message: ConfigurationVariable): unknown;
    fromPartial(object: DeepPartial<ConfigurationVariable>): ConfigurationVariable;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
