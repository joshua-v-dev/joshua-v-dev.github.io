"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wunderctlExec = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const wunderctlExec = (args) => {
    if (args.timeout === undefined) {
        args.timeout = 10000;
    }
    let result;
    for (let i = 0; i < 4; i++) {
        try {
            switch (i) {
                case 0:
                    result = exec1(args);
                    if (!result.error) {
                        return result;
                    }
                    continue;
                case 1:
                    result = exec2(args);
                    if (!result.error) {
                        return result;
                    }
                    continue;
                case 2:
                    result = exec3(args);
                    if (!result.error) {
                        return result;
                    }
                    continue;
                case 3:
                    result = exec4(args);
                    if (!result.error) {
                        return result;
                    }
                    continue;
            }
        }
        catch (e) {
            console.log(e);
        }
    }
    console.log("wunderctlExec: failed to execute wunderctl, make sure it is installed and in your PATH");
    return result;
};
exports.wunderctlExec = wunderctlExec;
const exec1 = (args) => {
    return cross_spawn_1.default.sync("wunderctl", args.cmd, {
        cwd: process.cwd(),
        encoding: "utf-8",
        timeout: args.timeout,
        stdio: "pipe",
        env: {
            ...process.env,
        },
    });
};
const exec2 = (args) => {
    return cross_spawn_1.default.sync(path_1.default.join(os_1.default.homedir(), ".wundergraph", "wunderctl"), args.cmd, {
        cwd: process.cwd(),
        encoding: "utf-8",
        timeout: args.timeout,
        stdio: "pipe",
        env: {
            ...process.env,
        }
    });
};
const exec3 = (args) => {
    return cross_spawn_1.default.sync("yarn", ["wunderctl", ...args.cmd], {
        cwd: process.cwd(),
        encoding: "utf-8",
        timeout: args.timeout,
        stdio: "pipe",
        env: {
            ...process.env,
        }
    });
};
const exec4 = (args) => {
    return cross_spawn_1.default.sync("npm", ["run", "wunderctl", ...args.cmd], {
        cwd: process.cwd(),
        encoding: "utf-8",
        timeout: args.timeout,
        stdio: "pipe",
        env: {
            ...process.env,
        }
    });
};
