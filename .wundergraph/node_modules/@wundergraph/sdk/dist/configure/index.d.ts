import { Api, Application } from "../definition";
import { GraphQLOperation } from "../graphql/operations";
import { Template } from "../codegen";
import { AuthProvider, ConfigurationVariable, CorsConfiguration } from "@wundergraph/protobuf/dist/wundernode_config";
import { AuthenticationProvider } from "./authentication";
import { LinkConfiguration } from "../linkbuilder";
export declare class EnvironmentVariable {
    constructor(name: string, defaultValue?: string);
    name: string;
    defaultValue?: string;
}
export declare class PlaceHolder {
    constructor(name: string);
    name: string;
    readonly _identifier = "placeholder";
}
export declare type InputVariable = string | EnvironmentVariable | PlaceHolder;
export declare const resolveVariable: (variable: InputVariable) => string;
export interface WunderGraphCorsConfiguration {
    allowedOrigins: InputVariable[];
    allowedMethods?: string[];
    allowedHeaders?: string[];
    exposedHeaders?: string[];
    maxAge?: number;
    allowCredentials?: boolean;
}
export interface WunderGraphConfigApplicationConfig {
    application: Application;
    codeGenerators?: CodeGen[];
    cors: WunderGraphCorsConfiguration;
    s3UploadProvider?: S3Provider;
    operations?: OperationsConfiguration;
    hooks?: HooksConfiguration;
    authorization?: {
        roles?: string[];
    };
    authentication?: {
        cookieBased?: {
            providers: AuthenticationProvider[];
            authorizedRedirectUris?: InputVariable[];
            authorizedRedirectUriRegexes?: InputVariable[];
        };
        tokenBased?: {
            providers: TokenAuthProvider[];
        };
    };
    links?: LinkConfiguration;
    dotGraphQLConfig?: DotGraphQLConfig;
    security?: SecurityConfig;
}
export interface TokenAuthProvider {
    jwksJSON?: InputVariable;
    jwksURL?: InputVariable;
    userInfoEndpoint?: InputVariable;
    userInfoCacheTtlSeconds?: number;
}
export interface SecurityConfig {
    enableGraphQLEndpoint?: boolean;
    allowedHosts?: InputVariable[];
}
export interface DotGraphQLConfig {
    hasDotWunderGraphDirectory?: boolean;
}
export interface HooksConfiguration {
    authentication?: {
        postAuthentication?: any;
        mutatingPostAuthentication?: any;
        revalidate?: any;
    };
    queries?: {
        [operationName: string]: {
            mockResolve?: any;
            preResolve?: any;
            postResolve?: any;
            mutatingPreResolve?: any;
            mutatingPostResolve?: any;
        };
    };
    mutations?: {
        [operationName: string]: {
            mockResolve?: any;
            preResolve?: any;
            postResolve?: any;
            mutatingPreResolve?: any;
            mutatingPostResolve?: any;
        };
    };
}
interface S3UploadConfiguration {
    name: string;
    endpoint: InputVariable;
    accessKeyID: InputVariable;
    secretAccessKey: InputVariable;
    bucketName: InputVariable;
    bucketLocation: InputVariable;
    useSSL: boolean;
}
interface OperationsConfiguration {
    defaultConfig: BaseOperationConfiguration;
    queries: ConfigureQuery;
    mutations: ConfigureMutation;
    subscriptions: ConfigureSubscription;
    custom?: any;
}
export interface BaseOperationConfiguration {
    authentication: {
        required: boolean;
    };
}
export declare type S3Provider = S3UploadConfiguration[];
export interface QueryConfiguration extends BaseOperationConfiguration {
    caching: {
        enable: boolean;
        public: boolean;
        maxAge: number;
        staleWhileRevalidate: number;
    };
    liveQuery: {
        enable: boolean;
        pollingIntervalSeconds: number;
    };
}
export interface MutationConfiguration extends BaseOperationConfiguration {
}
export interface SubscriptionConfiguration extends BaseOperationConfiguration {
}
declare type ConfigureQuery = (config: BaseOperationConfiguration) => QueryConfiguration;
declare type ConfigureMutation = (config: BaseOperationConfiguration) => MutationConfiguration;
declare type ConfigureSubscription = (config: BaseOperationConfiguration) => SubscriptionConfiguration;
export interface DeploymentAPI {
    apiConfig: () => {
        id: string;
        name: string;
    };
}
export interface DeploymentEnvironment {
    environmentConfig: () => {
        id: string;
        name: string;
    };
}
export interface CodeGen {
    path?: string;
    templates: Template[];
}
export interface ResolvedApplication {
    Name: string;
    EnableSingleFlight: boolean;
    EngineConfiguration: Api<any>;
    Operations: GraphQLOperation[];
    CorsConfiguration: CorsConfiguration;
    S3UploadProvider: S3Provider;
}
interface ResolvedDeployment {
    name: string;
    api: {
        id: string;
        name: string;
    };
    environment: {
        id: string;
        name: string;
    };
    path: string;
}
export interface ResolvedWunderGraphConfig {
    application: ResolvedApplication;
    deployment: ResolvedDeployment;
    sdkVersion: string;
    authentication: {
        roles: string[];
        cookieBased: AuthProvider[];
        tokenBased: TokenAuthProvider[];
        authorizedRedirectUris: ConfigurationVariable[];
        authorizedRedirectUriRegexes: ConfigurationVariable[];
        hooks: {
            postAuthentication: boolean;
            mutatingPostAuthentication: boolean;
            revalidateAuthentication: boolean;
        };
    };
    enableGraphQLEndpoint: boolean;
    security: {
        additionalHosts: ConfigurationVariable[];
    };
}
export declare const mapInputVariable: (stringOrEnvironmentVariable: InputVariable) => ConfigurationVariable;
export declare const configureWunderGraphApplication: (config: WunderGraphConfigApplicationConfig) => void;
export interface PublishConfiguration {
    organization: string;
    apiName: string;
    apis: Promise<Api<any>>[];
    public: boolean;
    title: string;
    shortDescription?: string;
    markdownDescriptionFile?: string;
    keywords: string[];
}
export interface PublishResult {
    organization: string;
    apiName: string;
    title: string;
    shortDescription: string;
    markdownDescription: string;
    public: boolean;
    keywords: string[];
    api: Api<any>;
    placeHolders: PublishConfigurationPlaceholder[];
}
interface PublishConfigurationPlaceholder {
    name: string;
    optional: boolean;
}
export declare const configurePublishWunderGraphAPI: (configuration: PublishConfiguration) => void;
export declare const parsePublishResultWithVariables: (raw: string, variables: {
    [key: string]: string;
}) => PublishResult;
export declare const resolveIntegration: (rawApi: string, variables: {
    [key: string]: string;
}, apiNamespace?: string | undefined) => Promise<Api<any>>;
export {};
