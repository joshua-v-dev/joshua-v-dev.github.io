"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupSchema = void 0;
const graphql_1 = require("graphql");
const cleanupSchema = (schema, customFloatScalars, customIntScalars) => {
    var _a, _b, _c;
    const printed = (0, graphql_1.printSchema)(schema);
    const ast = (0, graphql_1.parse)(printed);
    const queryTypeName = (_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name;
    const mutationTypeName = (_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name;
    const subscriptionTypeName = (_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name;
    const cleanAst = (0, graphql_1.visit)(ast, {
        SchemaDefinition: (node) => {
            const operationTypes = [];
            if (queryTypeName) {
                operationTypes.push({
                    kind: "OperationTypeDefinition",
                    operation: "query",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Query"
                        },
                    },
                });
            }
            if (mutationTypeName) {
                operationTypes.push({
                    kind: "OperationTypeDefinition",
                    operation: "mutation",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Mutation",
                        },
                    },
                });
            }
            if (subscriptionTypeName) {
                operationTypes.push({
                    kind: "OperationTypeDefinition",
                    operation: "subscription",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Subscription",
                        },
                    },
                });
            }
            const schemaNode = {
                ...node,
                operationTypes,
            };
            return schemaNode;
        },
        ObjectTypeDefinition: node => {
            if (node.name.value === queryTypeName) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Query"
                    }
                };
            }
            if (node.name.value === mutationTypeName) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Mutation"
                    }
                };
            }
            if (node.name.value === subscriptionTypeName) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Subscription"
                    }
                };
            }
            switch (node.name.value) {
                case "_Service":
                case "Entity":
                    return null;
            }
            if (node.name.value.startsWith("__")) {
                return null;
            }
        },
        UnionTypeDefinition: node => {
            switch (node.name.value) {
                case "_Entity":
                    return null;
            }
            if (node.name.value.startsWith("__")) {
                return null;
            }
        },
        ScalarTypeDefinition: node => {
            switch (node.name.value) {
                case "_Any":
                case "_FieldSet":
                    return null;
            }
            if (node.name.value.startsWith("__")) {
                return null;
            }
            if (customFloatScalars.includes(node.name.value)) {
                return null;
            }
            if (customIntScalars.includes(node.name.value)) {
                return null;
            }
        },
        NamedType: node => {
            if (customFloatScalars.includes(node.name.value)) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Float",
                    },
                };
            }
            if (customIntScalars.includes(node.name.value)) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Int",
                    },
                };
            }
        },
        DirectiveDefinition: node => {
            switch (node.name.value) {
                case "key":
                case "extends":
                case "external":
                case "requires":
                case "provides":
                    return null;
            }
        },
        FieldDefinition: {
            enter: node => {
                switch (node.name.value) {
                    case "_entities":
                    case "_service":
                        return null;
                }
                if (node.name.value.startsWith("__")) {
                    return null;
                }
                if (node.description) {
                    if (node.description.value === "") {
                        return {
                            ...node,
                            description: undefined,
                        };
                    }
                    if (node.description.block === true) {
                        const description = {
                            ...node.description,
                            block: false,
                        };
                        return {
                            ...node,
                            description,
                        };
                    }
                }
            }
        },
        InputValueDefinition: {
            enter: node => {
                if (node.description) {
                    if (node.description.value === "") {
                        return {
                            ...node,
                            description: undefined,
                        };
                    }
                    if (node.description.block === true) {
                        const description = {
                            ...node.description,
                            block: false,
                        };
                        return {
                            ...node,
                            description,
                        };
                    }
                }
            }
        },
    });
    return (0, graphql_1.print)(cleanAst);
};
exports.cleanupSchema = cleanupSchema;
