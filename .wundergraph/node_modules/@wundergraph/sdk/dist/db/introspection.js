"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupPrismaSchema = exports.introspectPrismaDatabaseWithRetries = void 0;
const wunderctlexec_1 = require("../wunderctlexec");
const configure_1 = require("../configure");
const graphql_1 = require("graphql");
const introspectPrismaDatabase = (databaseURL, databaseSchema) => {
    var _a;
    const result = (0, wunderctlexec_1.wunderctlExec)({ cmd: ["introspect", databaseSchema, databaseURL] });
    if (result === undefined || result.status !== 0) {
        return {
            success: false,
            message: (_a = result === null || result === void 0 ? void 0 : result.output.join("")) !== null && _a !== void 0 ? _a : "unknown error",
            graphql_schema: "",
            prisma_schema: "",
        };
    }
    const output = result.output.join("");
    const out = JSON.parse(output);
    const dataSourceStart = out.prisma_schema.indexOf("datasource");
    const dataSourceEnd = out.prisma_schema.indexOf("}", dataSourceStart) + 1;
    out.prisma_schema = out.prisma_schema.replace(out.prisma_schema.substring(dataSourceStart, dataSourceEnd), "");
    while (out.prisma_schema.startsWith("\n")) {
        out.prisma_schema = out.prisma_schema.substring(1);
    }
    out.success = true;
    return out;
};
const introspectPrismaDatabaseWithRetries = (databaseURL, databaseSchema, maxRetries) => {
    const resolvedURL = (0, configure_1.resolveVariable)(databaseURL);
    for (let i = 0; i < maxRetries; i++) {
        try {
            const result = introspectPrismaDatabase(resolvedURL, databaseSchema);
            if (result.success) {
                return {
                    ...result,
                    graphql_schema: (0, exports.cleanupPrismaSchema)(result.graphql_schema),
                };
            }
            console.log("database introspection failed: " + (result.message || ""));
        }
        catch (e) {
            console.log("database introspection failed: " + e);
        }
        console.log(`retrying database introspection ${i + 1}/${maxRetries}`);
    }
    const message = `introspection of ${databaseSchema} database failed after 5 attempts, make sure it's accessible at: ${databaseURL}
    Did you forget to add tables to the database? Make sure, you've run your initial migration.
    The introspection fails if there are no tables.
    Are you using a custom database schema? Make sure it's selected in the database URL.
    Please restart \"wunderctl up\" once the DB is running.
    `;
    return {
        success: false,
        message,
        prisma_schema: "",
        graphql_schema: "",
    };
};
exports.introspectPrismaDatabaseWithRetries = introspectPrismaDatabaseWithRetries;
const floatScalars = ["Float32", "Float64", "Decimal"];
const intScalars = ["Int8", "Int16", "Int32", "Int64", "UInt8", "UInt16", "UInt32", "UInt64", "BigInt"];
const cleanupPrismaSchema = (schema) => {
    const document = (0, graphql_1.parse)(schema);
    const cleaned = (0, graphql_1.visit)(document, {
        NamedType: node => {
            if (floatScalars.includes(node.name.value)) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Float",
                    },
                };
            }
            if (intScalars.includes(node.name.value)) {
                return {
                    ...node,
                    name: {
                        ...node.name,
                        value: "Int",
                    },
                };
            }
        }
    });
    return (0, graphql_1.print)(cleaned);
};
exports.cleanupPrismaSchema = cleanupPrismaSchema;
