"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const fs = __importStar(require("fs"));
const runTest = async (testFile, snapShot, statusCodeUnions) => {
    const exists = fs.existsSync(testFile);
    if (!exists) {
        return;
    }
    const fileContents = fs.readFileSync(testFile).toString();
    const actual = await (0, index_1.openApiSpecificationToRESTApiObject)(fileContents, {
        apiNamespace: "api",
        authentication: undefined,
        headers: undefined,
        source: {
            kind: "string",
            openAPISpec: fileContents,
        },
        statusCodeUnions,
    });
    expect(actual.Schema).toMatchSnapshot(snapShot + "_" + "schema");
    expect(JSON.stringify(actual.DataSources, null, 2)).toMatchSnapshot(snapShot + "_" + "data_sources");
    expect(JSON.stringify(actual.Fields, null, 2)).toMatchSnapshot(snapShot + "_" + "fields");
};
test("complex oas3", async () => {
    await runTest("src/v2openapi/testdata/complex_oas3.json", "complex_oas3");
});
test("complex2 oas3", async () => {
    await runTest("src/v2openapi/testdata/complex_2.json", "complex2_oas3");
});
test("httpbin", async () => {
    await runTest("src/v2openapi/testdata/httpbin.json", "httpbin");
});
test("simple petstore", async () => {
    await runTest("src/v2openapi/testdata/simple_petstore.json", "petstore");
});
test("users", async () => {
    await runTest("src/v2openapi/testdata/users.json", "users");
});
test("json placeholder", async () => {
    await runTest("src/v2openapi/testdata/jsonplaceholder.v1.yaml", "json_placeholder");
});
test("fusion", async () => {
    await runTest("src/v2openapi/testdata/fusion.yaml", "fusion");
});
test("fusion with statusCodeUnions", async () => {
    await runTest("src/v2openapi/testdata/fusion.yaml", "fusion", true);
});
test("fusion v2 with statusCodeUnions", async () => {
    await runTest("src/v2openapi/testdata/fusionauth_v2.yml", "fusion_v2", true);
});
test("weather", async () => {
    await runTest("src/v2openapi/testdata/weather.yaml", "weather");
});
