"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const definition_1 = require("../definition");
const graphql_1 = require("graphql");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
const index_1 = __importDefault(require("./index"));
const configure_1 = require("../configure");
test("renameTypes", async () => {
    const schema = `type User {name: String!} type Query {me: User!}`;
    const api = new Promise(resolve => {
        resolve(new definition_1.GraphQLApi(schema, [
            {
                RootNodes: [
                    {
                        typeName: "Query",
                        fieldNames: ["me"]
                    }
                ],
                ChildNodes: [
                    {
                        typeName: "User",
                        fieldNames: ["name"]
                    }
                ],
                Kind: wundernode_config_1.DataSourceKind.GRAPHQL,
                Custom: {
                    Federation: {
                        Enabled: false,
                        ServiceSDL: "",
                    },
                    Subscription: {
                        Enabled: false,
                        URL: (0, configure_1.mapInputVariable)(""),
                    },
                    Fetch: {
                        method: wundernode_config_1.HTTPMethod.POST,
                        url: (0, configure_1.mapInputVariable)("example.com"),
                        query: [],
                        header: {},
                        body: (0, configure_1.mapInputVariable)(""),
                        upstreamAuthentication: undefined,
                    },
                    UpstreamSchema: "",
                },
                Directives: [],
            }
        ], [
            {
                typeName: "User",
                fieldName: "name",
                disableDefaultFieldMapping: true,
                argumentsConfiguration: [],
                requiresFields: [],
                path: [],
            }
        ], []));
    });
    const renamed = await index_1.default.renameTypes(api, {
        from: "User",
        to: "PetStore_User"
    });
    const renamedSchema = (0, graphql_1.print)((0, graphql_1.parse)("type PetStore_User {name: String!} type Query {me: PetStore_User!}"));
    const expected = await new definition_1.GraphQLApi(renamedSchema, [
        {
            RootNodes: [
                {
                    typeName: "Query",
                    fieldNames: ["me"]
                }
            ],
            ChildNodes: [
                {
                    typeName: "PetStore_User",
                    fieldNames: ["name"]
                }
            ],
            Kind: wundernode_config_1.DataSourceKind.GRAPHQL,
            Custom: {
                Federation: {
                    Enabled: false,
                    ServiceSDL: "",
                },
                Subscription: {
                    Enabled: false,
                    URL: (0, configure_1.mapInputVariable)(""),
                },
                Fetch: {
                    method: wundernode_config_1.HTTPMethod.POST,
                    url: (0, configure_1.mapInputVariable)("example.com"),
                    query: [],
                    header: {},
                    body: (0, configure_1.mapInputVariable)(""),
                    upstreamAuthentication: undefined,
                },
                UpstreamSchema: "",
            },
            Directives: [],
        }
    ], [
        {
            typeName: "PetStore_User",
            fieldName: "name",
            disableDefaultFieldMapping: true,
            argumentsConfiguration: [],
            requiresFields: [],
            path: [],
        }
    ], []);
    chai_1.assert.equal(pretty(renamed), pretty(expected));
});
test("renameTypeFields", async () => {
    const schema = `type User {name: String!} type Query {me: User!}`;
    const api = new Promise(resolve => {
        resolve(new definition_1.GraphQLApi(schema, [
            {
                RootNodes: [
                    {
                        typeName: "Query",
                        fieldNames: ["me"]
                    }
                ],
                ChildNodes: [
                    {
                        typeName: "User",
                        fieldNames: ["name"]
                    }
                ],
                Kind: wundernode_config_1.DataSourceKind.GRAPHQL,
                Custom: {
                    Federation: {
                        Enabled: false,
                        ServiceSDL: "",
                    },
                    Subscription: {
                        Enabled: false,
                        URL: (0, configure_1.mapInputVariable)(""),
                    },
                    Fetch: {
                        method: wundernode_config_1.HTTPMethod.POST,
                        url: (0, configure_1.mapInputVariable)("example.com"),
                        query: [],
                        header: {},
                        body: (0, configure_1.mapInputVariable)(""),
                        upstreamAuthentication: undefined,
                    },
                    UpstreamSchema: "",
                },
                Directives: [],
            }
        ], [
            {
                typeName: "Query",
                fieldName: "me",
                disableDefaultFieldMapping: true,
                argumentsConfiguration: [],
                requiresFields: [],
                path: ["me"],
            },
            {
                typeName: "Query",
                fieldName: "other",
                disableDefaultFieldMapping: true,
                argumentsConfiguration: [
                    {
                        name: "arg",
                        sourceType: wundernode_config_1.ArgumentSource.OBJECT_FIELD,
                        sourcePath: ["me"],
                        renderConfiguration: wundernode_config_1.ArgumentRenderConfiguration.RENDER_ARGUMENT_DEFAULT,
                    }
                ],
                requiresFields: ["me"],
                path: [],
            }
        ], []));
    });
    const renamed = await index_1.default.renameFields(api, {
        typeName: "Query",
        fromFieldName: "me",
        toFieldName: "user",
    });
    const updatedSchema = (0, graphql_1.print)((0, graphql_1.parse)(`type User {name: String!} type Query {user: User!}`));
    const expected = await new Promise(resolve => {
        resolve(new definition_1.GraphQLApi(updatedSchema, [
            {
                RootNodes: [
                    {
                        typeName: "Query",
                        fieldNames: ["user"]
                    }
                ],
                ChildNodes: [
                    {
                        typeName: "User",
                        fieldNames: ["name"]
                    }
                ],
                Kind: wundernode_config_1.DataSourceKind.GRAPHQL,
                Custom: {
                    Federation: {
                        Enabled: false,
                        ServiceSDL: "",
                    },
                    Subscription: {
                        Enabled: false,
                        URL: (0, configure_1.mapInputVariable)(""),
                    },
                    Fetch: {
                        method: wundernode_config_1.HTTPMethod.POST,
                        url: (0, configure_1.mapInputVariable)("example.com"),
                        query: [],
                        header: {},
                        body: (0, configure_1.mapInputVariable)(""),
                        upstreamAuthentication: undefined,
                    },
                    UpstreamSchema: "",
                },
                Directives: [],
            }
        ], [
            {
                typeName: "Query",
                fieldName: "user",
                disableDefaultFieldMapping: true,
                argumentsConfiguration: [],
                requiresFields: [],
                path: ["user"],
            },
            {
                typeName: "Query",
                fieldName: "other",
                disableDefaultFieldMapping: true,
                argumentsConfiguration: [
                    {
                        name: "arg",
                        sourceType: wundernode_config_1.ArgumentSource.OBJECT_FIELD,
                        sourcePath: ["user"],
                        renderConfiguration: wundernode_config_1.ArgumentRenderConfiguration.RENDER_ARGUMENT_DEFAULT,
                    }
                ],
                requiresFields: ["user"],
                path: [],
            }
        ], []));
    });
    chai_1.assert.equal(pretty(renamed), pretty(expected));
});
const pretty = (input) => {
    return JSON.stringify(input, null, "  ");
};
