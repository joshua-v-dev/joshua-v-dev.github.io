"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const namespacing_1 = require("./namespacing");
const graphql_1 = require("graphql");
const chai_1 = require("chai");
test("apply namespace to starwars schema", () => {
    const actual = (0, namespacing_1.applyNameSpaceToGraphQLSchema)(starWarsSchema, "api");
    const expected = (0, graphql_1.print)((0, graphql_1.parse)(renamedStarWarsSchema));
    chai_1.assert.equal(actual, expected);
});
test("apply undefined namespace to starwars schema", () => {
    const actual = (0, namespacing_1.applyNameSpaceToGraphQLSchema)(starWarsSchema, undefined);
    const expected = (0, graphql_1.print)((0, graphql_1.parse)(starWarsSchema));
    chai_1.assert.equal(actual, expected);
});
test("apply namespace to directive configuration", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const actual = (0, namespacing_1.applyNamespaceToDirectiveConfiguration)(schema, "api");
    const expected = [
        {
            directiveName: "api_customFormat",
            renameTo: "customFormat"
        }
    ];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("apply undefined namespace to directive configuration", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const actual = (0, namespacing_1.applyNamespaceToDirectiveConfiguration)(schema, undefined);
    const expected = [];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("apply namespace to type fields", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldNames: [
                "hero",
                "droid",
            ]
        },
        {
            typeName: "Mutation",
            fieldNames: [
                "createReview"
            ]
        },
        {
            typeName: "Subscription",
            fieldNames: [
                "remainingJedis"
            ]
        },
        {
            typeName: "Review",
            fieldNames: [
                "id",
                "stars"
            ]
        },
        {
            typeName: "Starship",
            fieldNames: [
                "name",
                "length"
            ]
        }
    ];
    const actual = (0, namespacing_1.applyNameSpaceToTypeFields)(input, schema, "api");
    const expected = [
        {
            typeName: "Query",
            fieldNames: [
                "api_hero",
                "api_droid",
            ]
        },
        {
            typeName: "Mutation",
            fieldNames: [
                "api_createReview"
            ]
        },
        {
            typeName: "Subscription",
            fieldNames: [
                "api_remainingJedis"
            ]
        },
        {
            typeName: "api_Review",
            fieldNames: [
                "id",
                "stars"
            ]
        },
        {
            typeName: "api_Starship",
            fieldNames: [
                "name",
                "length"
            ]
        }
    ];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("apply undefined namespace to type fields", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldNames: [
                "hero",
                "droid",
            ]
        },
        {
            typeName: "Mutation",
            fieldNames: [
                "createReview"
            ]
        },
        {
            typeName: "Subscription",
            fieldNames: [
                "remainingJedis"
            ]
        },
        {
            typeName: "Review",
            fieldNames: [
                "id",
                "stars"
            ]
        },
        {
            typeName: "Starship",
            fieldNames: [
                "name",
                "length"
            ]
        }
    ];
    const actual = (0, namespacing_1.applyNameSpaceToTypeFields)(input, schema, undefined);
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(input, null, "  "));
});
test("apply namespace to field configurations", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldName: "hero",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "droid",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        }
    ];
    const actual = (0, namespacing_1.applyNameSpaceToFieldConfigurations)(input, schema, "api");
    const expected = [
        {
            typeName: "Query",
            fieldName: "api_hero",
            disableDefaultFieldMapping: false,
            path: ["hero"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "api_droid",
            disableDefaultFieldMapping: false,
            path: ["droid"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "api_Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "api_search",
            disableDefaultFieldMapping: false,
            path: ["search"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "api_stringList",
            disableDefaultFieldMapping: false,
            path: ["stringList"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "api_nestedStringList",
            disableDefaultFieldMapping: false,
            path: ["nestedStringList"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Mutation",
            fieldName: "api_createReview",
            disableDefaultFieldMapping: false,
            path: ["createReview"],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Subscription",
            fieldName: "api_remainingJedis",
            disableDefaultFieldMapping: false,
            path: ["remainingJedis"],
            argumentsConfiguration: [],
            requiresFields: []
        },
    ];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("apply undefined namespace to field configurations", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldName: "hero",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "droid",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        }
    ];
    const actual = (0, namespacing_1.applyNameSpaceToFieldConfigurations)(input, schema, undefined);
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(input, null, "  "));
});
test("apply namespace to existing root field configurations", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldName: "hero",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "droid",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        }
    ];
    const actual = (0, namespacing_1.applyNamespaceToExistingRootFieldConfigurations)(input, schema, "api");
    const expected = [
        {
            typeName: "Query",
            fieldName: "api_hero",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "api_droid",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "api_Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
    ];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("apply undefined namespace to existing root field configurations", () => {
    const schema = (0, graphql_1.buildSchema)(starWarsSchema);
    const input = [
        {
            typeName: "Query",
            fieldName: "hero",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Query",
            fieldName: "droid",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        },
        {
            typeName: "Starship",
            fieldName: "name",
            disableDefaultFieldMapping: false,
            path: [],
            argumentsConfiguration: [],
            requiresFields: []
        }
    ];
    const actual = (0, namespacing_1.applyNamespaceToExistingRootFieldConfigurations)(input, schema, undefined);
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(input, null, "  "));
});
test("generate type configurations for namespace", () => {
    const actual = (0, namespacing_1.generateTypeConfigurationsForNamespace)(starWarsSchema, "api");
    const expected = [
        {
            typeName: "api_SearchResult",
            renameTo: "SearchResult"
        },
        {
            typeName: "api_DateTime",
            renameTo: "DateTime"
        },
        {
            typeName: "api_ReviewInput",
            renameTo: "ReviewInput"
        },
        {
            typeName: "api_Review",
            renameTo: "Review"
        },
        {
            typeName: "api_Episode",
            renameTo: "Episode"
        },
        {
            typeName: "api_Character",
            renameTo: "Character"
        },
        {
            typeName: "api_Human",
            renameTo: "Human"
        },
        {
            typeName: "api_Droid",
            renameTo: "Droid"
        },
        {
            typeName: "api_Starship",
            renameTo: "Starship"
        },
    ];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
test("generate type configurations for undefined namespace", () => {
    const actual = (0, namespacing_1.generateTypeConfigurationsForNamespace)(starWarsSchema, undefined);
    const expected = [];
    chai_1.assert.equal(JSON.stringify(actual, null, "  "), JSON.stringify(expected, null, "  "));
});
const starWarsSchema = `
union SearchResult = Human | Droid | Starship

scalar DateTime
scalar JSON

directive @customFormat on FIELD
directive @skip on FIELD
directive @include on FIELD
directive @deprecated on FIELD
directive @specifiedBy on SCALAR

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    hero: Character
    droid(id: ID!): Droid
    search(name: String!): SearchResult
	stringList: [String]
	nestedStringList: [String]
}

type Mutation {
	createReview(episode: Episode!, review: ReviewInput!): Review
}

type Subscription {
    remainingJedis: Int!
}

input ReviewInput {
    stars: Int!
    commentary: String
}

type Review {
    id: ID!
    stars: Int!
    commentary: String
}

enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
}

interface Character {
    name: String!
    friends: [Character]
}

type Human implements Character {
    name: String!
    height: String!
    friends: [Character]
}

type Droid implements Character {
    name: String!
    primaryFunction: String!
    friends: [Character]
}

type Starship {
    name: String!
    length: Float!
}`;
const renamedStarWarsSchema = `
union api_SearchResult = api_Human | api_Droid | api_Starship

scalar api_DateTime
scalar JSON

directive @api_customFormat on FIELD
directive @skip on FIELD
directive @include on FIELD
directive @deprecated on FIELD
directive @specifiedBy on SCALAR

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    api_hero: api_Character
    api_droid(id: ID!): api_Droid
    api_search(name: String!): api_SearchResult
	api_stringList: [String]
	api_nestedStringList: [String]
}

type Mutation {
	api_createReview(episode: api_Episode!, review: api_ReviewInput!): api_Review
}

type Subscription {
    api_remainingJedis: Int!
}

input api_ReviewInput {
    stars: Int!
    commentary: String
}

type api_Review {
    id: ID!
    stars: Int!
    commentary: String
}

enum api_Episode {
    NEWHOPE
    EMPIRE
    JEDI
}

interface api_Character {
    name: String!
    friends: [api_Character]
}

type api_Human implements api_Character {
    name: String!
    height: String!
    friends: [api_Character]
}

type api_Droid implements api_Character {
    name: String!
    primaryFunction: String!
    friends: [api_Character]
}

type api_Starship {
    name: String!
    length: Float!
}`;
