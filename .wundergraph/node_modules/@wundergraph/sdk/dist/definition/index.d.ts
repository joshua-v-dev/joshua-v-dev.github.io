import { ConfigurationVariable, DataSourceKind, DirectiveConfiguration, FetchConfiguration, FieldConfiguration, StatusCodeTypeMapping, TypeConfiguration, TypeField, UpstreamAuthentication } from "@wundergraph/protobuf/dist/wundernode_config";
import { InputVariable } from "../configure";
export interface ApplicationConfig {
    name: string;
    apis: Promise<Api<any>>[];
}
export declare class Application {
    constructor(config: ApplicationConfig);
    name: string;
    apis: Promise<Api<any>>[];
}
export interface RenameType {
    from: string;
    to: string;
}
export interface RenameTypes {
    renameTypes: (rename: RenameType[]) => void;
}
export interface RenameTypeField {
    typeName: string;
    fromFieldName: string;
    toFieldName: string;
}
export interface RenameTypeFields {
    renameTypeFields: (rename: RenameTypeField[]) => void;
}
export declare class Api<T> implements RenameTypes, RenameTypeFields {
    constructor(schema: string, dataSources: DataSource<T>[], fields: FieldConfiguration[], types: TypeConfiguration[]);
    DefaultFlushInterval: number;
    Schema: string;
    DataSources: DataSource<T>[];
    Fields: FieldConfiguration[];
    Types: TypeConfiguration[];
    renameTypes(rename: RenameType[]): void;
    renameTypeFields(rename: RenameTypeField[]): void;
}
export declare const createMockApi: (sdl: string, apiNamespace?: string | undefined) => Promise<Api<any>>;
export declare class GraphQLApi extends Api<GraphQLApiCustom> {
}
export declare class RESTApi extends Api<RESTApiCustom> {
}
export declare class PostgresqlApi extends Api<DatabaseApiCustom> {
}
export declare class MySQLApi extends Api<DatabaseApiCustom> {
}
export declare class PlanetscaleApi extends Api<DatabaseApiCustom> {
}
export declare class SQLiteApi extends Api<DatabaseApiCustom> {
}
export declare class SQLServerApi extends Api<DatabaseApiCustom> {
}
export interface DataSource<Custom extends {} = {}> {
    Kind: DataSourceKind;
    RootNodes: TypeField[];
    ChildNodes: TypeField[];
    Custom: Custom;
    Directives: DirectiveConfiguration[];
}
export interface GraphQLIntrospection extends GraphQLUpstream {
    loadSchemaFromString?: any;
    customFloatScalars?: string[];
    customIntScalars?: string[];
}
export interface GraphQLFederationIntrospection {
    upstreams: Omit<GraphQLUpstream, "apiNamespace">[];
    apiNamespace?: string;
}
export interface DatabaseIntrospection {
    databaseURL: InputVariable;
    apiNamespace?: string;
}
export interface HTTPUpstream {
    apiNamespace?: string;
    headers?: (builder: IHeadersBuilder) => IHeadersBuilder;
    authentication?: HTTPUpstreamAuthentication;
}
export interface IHeadersBuilder {
    addStaticHeader: (key: string, value: InputVariable) => IHeadersBuilder;
    addClientRequestHeader: (key: string, requestHeaderName: string) => IHeadersBuilder;
}
export declare class HeadersBuilder {
    private headers;
    addEnvironmentVariableHeader: (key: string, environmentVariableName: string) => this;
    addStaticHeader: (key: string, value: InputVariable) => this;
    addClientRequestHeader: (key: string, requestHeaderName: string) => this;
    build: () => HeaderConfiguration[];
}
export declare type HTTPUpstreamAuthentication = JWTAuthentication | JWTAuthenticationWithAccessTokenExchange;
export interface JWTAuthentication {
    kind: "jwt";
    secret: InputVariable;
    signingMethod: JWTSigningMethod;
}
export interface JWTAuthenticationWithAccessTokenExchange {
    kind: "jwt_with_access_token_exchange";
    secret: InputVariable;
    signingMethod: JWTSigningMethod;
    accessTokenExchangeEndpoint: InputVariable;
}
export declare type JWTSigningMethod = "HS256";
export interface GraphQLUpstream extends HTTPUpstream {
    url: InputVariable;
    subscriptionsURL?: InputVariable;
}
export interface OpenAPIIntrospectionFile {
    kind: "file";
    filePath: string;
}
export interface OpenAPIIntrospectionString {
    kind: "string";
    openAPISpec: string;
}
export interface OpenAPIIntrospectionObject {
    kind: "object";
    openAPIObject: {};
}
export declare type OpenAPIIntrospectionSource = OpenAPIIntrospectionFile | OpenAPIIntrospectionString | OpenAPIIntrospectionObject;
export interface HeaderConfiguration {
    key: string;
    valueSource: "static" | "env" | "clientRequest" | "placeholder";
    value: string;
    defaultValue?: string;
}
export interface OpenAPIIntrospection extends HTTPUpstream {
    source: OpenAPIIntrospectionSource;
    statusCodeUnions?: boolean;
}
export interface StaticApiCustom {
    data: ConfigurationVariable;
}
export interface RESTApiCustom {
    Fetch: FetchConfiguration;
    Subscription: SubscriptionConfiguration;
    DefaultTypeName: string;
    StatusCodeTypeMappings: StatusCodeTypeMapping[];
}
export interface DatabaseApiCustom {
    prisma_schema: string;
    graphql_schema: string;
    databaseURL: ConfigurationVariable;
}
export interface SubscriptionConfiguration {
    Enabled: boolean;
    PollingIntervalMillis?: number;
    SkipPublishSameResponse?: boolean;
}
export interface GraphQLApiCustom {
    Federation: {
        Enabled: boolean;
        ServiceSDL: string;
    };
    Fetch: FetchConfiguration;
    Subscription: {
        Enabled: boolean;
        URL: ConfigurationVariable;
    };
    UpstreamSchema: string;
}
export declare const introspect: {
    graphql: (introspection: GraphQLIntrospection) => Promise<GraphQLApi>;
    postgresql: (introspection: DatabaseIntrospection) => Promise<PostgresqlApi>;
    mysql: (introspection: DatabaseIntrospection) => Promise<MySQLApi>;
    planetscale: (introspection: DatabaseIntrospection) => Promise<PlanetscaleApi>;
    sqlite: (introspection: DatabaseIntrospection) => Promise<SQLiteApi>;
    sqlserver: (introspection: DatabaseIntrospection) => Promise<SQLServerApi>;
    federation: (introspection: GraphQLFederationIntrospection) => Promise<GraphQLApi>;
    openApi: (introspection: OpenAPIIntrospection) => Promise<RESTApi>;
};
export declare const buildUpstreamAuthentication: (upstream: HTTPUpstream) => (UpstreamAuthentication | undefined);
