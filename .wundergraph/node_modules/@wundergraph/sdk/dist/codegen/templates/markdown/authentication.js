"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationProviderConfiguration = void 0;
// @ts-ignore
const configure_auth_providers_md_handlebars_1 = __importDefault(require("./configure_auth_providers.md.handlebars"));
const typescript_1 = require("../typescript");
const handlebars_1 = __importDefault(require("handlebars"));
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
class AuthenticationProviderConfiguration {
    generate(config) {
        const input = (0, typescript_1.loadFile)(configure_auth_providers_md_handlebars_1.default);
        const model = {
            providers: config.authentication.cookieBased
                .filter(p => p.id !== "demo")
                .map(p => {
                let providerKind = "not defined";
                switch (p.kind) {
                    case wundernode_config_1.AuthProviderKind.AuthProviderGithub:
                        providerKind = "GitHub";
                        break;
                    case wundernode_config_1.AuthProviderKind.AuthProviderOIDC:
                        providerKind = "OpenID Connect";
                        break;
                }
                return {
                    //apiName: config.application.Name,
                    apiName: "api",
                    //branch: config.deployment.name,
                    branch: "main",
                    hostPort: config.deployment.environment.name,
                    protocol: "http",
                    providerID: p.id,
                    providerKind,
                };
            })
        };
        const tmpl = handlebars_1.default.compile(input);
        const content = tmpl(model);
        return Promise.resolve([
            {
                path: "CONFIGURE_AUTH_PROVIDERS.md",
                content: content,
                doNotEditHeader: false,
            }
        ]);
    }
}
exports.AuthenticationProviderConfiguration = AuthenticationProviderConfiguration;
