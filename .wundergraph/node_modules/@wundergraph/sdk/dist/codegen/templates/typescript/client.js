"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelImports = exports.liveQueries = exports.operations = exports.TypeScriptClient = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const index_1 = require("./index");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
const object_hash_1 = __importDefault(require("object-hash"));
// @ts-ignore
const client_ts_handlebars_1 = __importDefault(require("./client.ts.handlebars"));
class TypeScriptClient {
    constructor(reactNative) {
        this.reactNative = reactNative || false;
    }
    generate(config) {
        const input = (0, index_1.loadFile)(client_ts_handlebars_1.default);
        const tmpl = handlebars_1.default.compile(input);
        const _queries = (0, exports.operations)(config.application, wundernode_config_1.OperationType.QUERY, false);
        const _liveQueries = (0, exports.liveQueries)(config.application, false);
        const _mutations = (0, exports.operations)(config.application, wundernode_config_1.OperationType.MUTATION, false);
        const _subscriptions = (0, exports.operations)(config.application, wundernode_config_1.OperationType.SUBSCRIPTION, false);
        const productionBaseURL = "https://" + config.deployment.environment.name;
        const developmentBaseURL = "http://localhost:9991";
        const content = tmpl({
            modelImports: (0, exports.modelImports)(config.application, false),
            baseURL: process.env.NODE_ENV === "production" ? productionBaseURL : developmentBaseURL,
            sdkVersion: config.sdkVersion,
            applicationPath: config.deployment.path,
            applicationHash: (0, object_hash_1.default)(config).substring(0, 8),
            queries: _queries,
            liveQueries: _liveQueries,
            hasLiveQueries: _liveQueries.length !== 0,
            hasQueries: _queries.length !== 0,
            mutations: _mutations,
            hasMutations: _mutations.length !== 0,
            subscriptions: _subscriptions,
            hasSubscriptions: _subscriptions.length !== 0,
            hasSubscriptionsOrLiveQueries: _subscriptions.length + _liveQueries.length !== 0,
            authProviders: config.authentication.cookieBased.map(provider => provider.id),
            hasAuthProviders: config.authentication.cookieBased.length !== 0,
            hasS3Provider: config.application.S3UploadProvider.length > 0,
            s3Provider: config.application.S3UploadProvider,
            reactNative: this.reactNative,
        });
        return Promise.resolve([
            {
                path: "client.ts",
                content: (0, index_1.formatTypeScript)(content),
                doNotEditHeader: true,
            }
        ]);
    }
}
exports.TypeScriptClient = TypeScriptClient;
const filteredOperations = (application, includeInternal) => includeInternal ? application.Operations : application.Operations.filter(op => !op.Internal);
const operations = (application, operationType, includeInternal) => filteredOperations(application, includeInternal).filter(op => op.OperationType === operationType).map(op => ({
    operationName: op.Name,
    path: op.Name,
    hasInput: op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0,
    hasInternalInput: op.InjectedVariablesSchema.properties && Object.keys(op.InjectedVariablesSchema.properties).length !== 0,
}));
exports.operations = operations;
const liveQueries = (application, includeInternal) => filteredOperations(application, includeInternal).filter(op => op.OperationType === wundernode_config_1.OperationType.QUERY && op.LiveQuery && op.LiveQuery.enable).map(op => ({
    operationName: op.Name,
    path: op.Name,
    hasInput: op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0,
    hasInternalInput: op.InjectedVariablesSchema.properties && Object.keys(op.InjectedVariablesSchema.properties).length !== 0,
}));
exports.liveQueries = liveQueries;
const modelImports = (application, includeInternal) => {
    return filteredOperations(application, includeInternal)
        .map(op => {
        let out = `${op.Name}Response`;
        if (op.VariablesSchema.properties && Object.keys(op.VariablesSchema.properties).length !== 0) {
            out += `,${op.Name}Input`;
        }
        if (includeInternal && op.InternalVariablesSchema.properties && Object.keys(op.InternalVariablesSchema.properties).length !== 0) {
            out += `,Internal${op.Name}Input`;
        }
        if (includeInternal && op.InjectedVariablesSchema.properties && Object.keys(op.InjectedVariablesSchema.properties).length !== 0) {
            out += `,Injected${op.Name}Input`;
        }
        return out;
    }).join(",");
};
exports.modelImports = modelImports;
