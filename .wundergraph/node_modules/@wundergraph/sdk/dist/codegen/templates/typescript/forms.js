"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forms = void 0;
const index_1 = require("./index");
const wundernode_config_1 = require("@wundergraph/protobuf/dist/wundernode_config");
const handlebars_1 = __importDefault(require("handlebars"));
// @ts-ignore
const forms_tsx_handlebars_1 = __importDefault(require("./forms.tsx.handlebars"));
const react_1 = require("./react");
class Forms {
    generate(config) {
        const liveQueries = config.application.Operations
            .filter(react_1.hasInput)
            .filter(react_1.isNotInternal)
            .filter(op => { var _a; return op.OperationType === wundernode_config_1.OperationType.QUERY && ((_a = op.LiveQuery) === null || _a === void 0 ? void 0 : _a.enable) === true; })
            .map(op => ({
            name: op.Name,
            inputType: op.Name + "Input",
            responseType: op.Name + "Response"
        }));
        const queries = config.application.Operations
            .filter(react_1.hasInput)
            .filter(react_1.isNotInternal)
            .filter(op => op.OperationType === wundernode_config_1.OperationType.QUERY)
            .map(op => ({
            name: op.Name,
            inputType: op.Name + "Input",
            responseType: op.Name + "Response"
        }));
        const mutations = config.application.Operations
            .filter(react_1.hasInput)
            .filter(react_1.isNotInternal)
            .filter(op => op.OperationType === wundernode_config_1.OperationType.MUTATION)
            .map(op => ({
            name: op.Name,
            inputType: op.Name + "Input",
            responseType: op.Name + "Response"
        }));
        const subscriptions = config.application.Operations
            .filter(react_1.hasInput)
            .filter(react_1.isNotInternal)
            .filter(op => op.OperationType === wundernode_config_1.OperationType.SUBSCRIPTION)
            .map(op => ({
            name: op.Name,
            inputType: op.Name + "Input",
            responseType: op.Name + "Response"
        }));
        const modelImports = config.application.Operations
            .filter(react_1.hasInput)
            .filter(react_1.isNotInternal)
            .map(op => (op.Name + "Input," + op.Name + "Response"))
            .join(",");
        const hooks = [];
        if (queries.length !== 0) {
            hooks.push("useQuery");
        }
        if (liveQueries.length !== 0) {
            hooks.push("useLiveQuery");
        }
        if (mutations.length !== 0) {
            hooks.push("useMutation");
        }
        if (subscriptions.length !== 0) {
            hooks.push("useSubscription");
        }
        const hookImports = hooks.join(",");
        const model = {
            liveQueries,
            hasLiveQueries: liveQueries.length !== 0,
            queries,
            hasQueries: queries.length !== 0,
            mutations,
            hasMutations: mutations.length !== 0,
            subscriptions,
            hasSubscriptions: subscriptions.length !== 0,
            hasHookImports: (queries.length + mutations.length + subscriptions.length) !== 0,
            hasModelImports: (queries.length + mutations.length + subscriptions.length) !== 0,
            modelImports,
            hookImports,
        };
        const input = (0, index_1.loadFile)(forms_tsx_handlebars_1.default);
        const tmpl = handlebars_1.default.compile(input);
        const content = tmpl(model);
        return Promise.resolve([
            {
                path: "forms.tsx",
                content: (0, index_1.formatTypeScript)(content),
                doNotEditHeader: true,
            }
        ]);
    }
}
exports.Forms = Forms;
