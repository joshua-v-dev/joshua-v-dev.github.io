directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """customFormat must conform to the Golang specification for specifying a date time format"""
  customFormat: String
) on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

type Query {
  spacex_users(distinct_on: [users_select_column_spacex!], limit: Int, offset: Int, order_by: [users_order_by_spacex!], where: users_bool_exp_spacex): [users_spacex!]!
  spacex_users_aggregate(distinct_on: [users_select_column_spacex!], limit: Int, offset: Int, order_by: [users_order_by_spacex!], where: users_bool_exp_spacex): users_aggregate_spacex!
  spacex_users_by_pk(id: uuid_spacex!): users_spacex
  spacex_capsules(find: CapsulesFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Capsule_spacex]
  spacex_capsulesPast(find: CapsulesFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Capsule_spacex]
  spacex_capsulesUpcoming(find: CapsulesFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Capsule_spacex]
  spacex_capsule(id: ID!): Capsule_spacex
  spacex_company: Info_spacex
  spacex_cores(find: CoresFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Core_spacex]
  spacex_coresPast(find: CoresFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Core_spacex]
  spacex_coresUpcoming(find: CoresFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Core_spacex]
  spacex_core(id: ID!): Core_spacex
  spacex_dragons(limit: Int, offset: Int): [Dragon_spacex]
  spacex_dragon(id: ID!): Dragon_spacex
  spacex_histories(find: HistoryFind_spacex, limit: Int, offset: Int, order: String, sort: String): [History_spacex]
  spacex_historiesResult(find: HistoryFind_spacex, limit: Int, offset: Int, order: String, sort: String): HistoriesResult_spacex
  spacex_history(id: ID!): History_spacex
  spacex_landpads(limit: Int, offset: Int): [Landpad_spacex]
  spacex_landpad(id: ID!): Landpad_spacex
  spacex_launches(find: LaunchFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Launch_spacex]
  spacex_launchesPast(find: LaunchFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Launch_spacex]
  spacex_launchesPastResult(find: LaunchFind_spacex, limit: Int, offset: Int, order: String, sort: String): LaunchesPastResult_spacex
  spacex_launchesUpcoming(find: LaunchFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Launch_spacex]
  spacex_launch(id: ID!): Launch_spacex
  spacex_launchLatest(offset: Int): Launch_spacex
  spacex_launchNext(offset: Int): Launch_spacex
  spacex_launchpads(limit: Int, offset: Int): [Launchpad_spacex]
  spacex_launchpad(id: ID!): Launchpad_spacex
  spacex_missions(find: MissionsFind_spacex, limit: Int, offset: Int): [Mission_spacex]
  spacex_missionsResult(find: MissionsFind_spacex, limit: Int, offset: Int): MissionResult_spacex
  spacex_mission(id: ID!): Mission_spacex
  spacex_payloads(find: PayloadsFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Payload_spacex]
  spacex_payload(id: ID!): Payload_spacex
  spacex_roadster: Roadster_spacex
  spacex_rockets(limit: Int, offset: Int): [Rocket_spacex]
  spacex_rocketsResult(limit: Int, offset: Int): RocketsResult_spacex
  spacex_rocket(id: ID!): Rocket_spacex
  spacex_ships(find: ShipsFind_spacex, limit: Int, offset: Int, order: String, sort: String): [Ship_spacex]
  spacex_shipsResult(find: ShipsFind_spacex, limit: Int, offset: Int, order: String, sort: String): ShipsResult_spacex
  spacex_ship(id: ID!): Ship_spacex
}

enum users_select_column_spacex {
  id
  name
  rocket
  timestamp
  twitter
}

input users_order_by_spacex {
  id: order_by_spacex
  name: order_by_spacex
  rocket: order_by_spacex
  timestamp: order_by_spacex
  twitter: order_by_spacex
}

enum order_by_spacex {
  asc
  asc_nulls_first
  asc_nulls_last
  desc
  desc_nulls_first
  desc_nulls_last
}

input users_bool_exp_spacex {
  _and: [users_bool_exp_spacex]
  _not: users_bool_exp_spacex
  _or: [users_bool_exp_spacex]
  id: uuid_comparison_exp_spacex
  name: String_comparison_exp_spacex
  rocket: String_comparison_exp_spacex
  timestamp: timestamptz_comparison_exp_spacex
  twitter: String_comparison_exp_spacex
}

input uuid_comparison_exp_spacex {
  _eq: uuid_spacex
  _gt: uuid_spacex
  _gte: uuid_spacex
  _in: [uuid_spacex!]
  _is_null: Boolean
  _lt: uuid_spacex
  _lte: uuid_spacex
  _neq: uuid_spacex
  _nin: [uuid_spacex!]
}

scalar uuid_spacex

input String_comparison_exp_spacex {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

input timestamptz_comparison_exp_spacex {
  _eq: timestamptz_spacex
  _gt: timestamptz_spacex
  _gte: timestamptz_spacex
  _in: [timestamptz_spacex!]
  _is_null: Boolean
  _lt: timestamptz_spacex
  _lte: timestamptz_spacex
  _neq: timestamptz_spacex
  _nin: [timestamptz_spacex!]
}

scalar timestamptz_spacex

type users_spacex {
  id: uuid_spacex!
  name: String
  rocket: String
  timestamp: timestamptz_spacex!
  twitter: String
}

type users_aggregate_spacex {
  aggregate: users_aggregate_fields_spacex
  nodes: [users_spacex!]!
}

type users_aggregate_fields_spacex {
  count(columns: [users_select_column_spacex!], distinct: Boolean): Int
  max: users_max_fields_spacex
  min: users_min_fields_spacex
}

type users_max_fields_spacex {
  name: String
  rocket: String
  timestamp: timestamptz_spacex
  twitter: String
}

type users_min_fields_spacex {
  name: String
  rocket: String
  timestamp: timestamptz_spacex
  twitter: String
}

input CapsulesFind_spacex {
  id: ID
  landings: Int
  mission: String
  original_launch: Date_spacex
  reuse_count: Int
  status: String
  type: String
}

scalar Date_spacex

type Capsule_spacex {
  id: ID
  landings: Int
  missions: [CapsuleMission_spacex]
  original_launch: Date_spacex
  reuse_count: Int
  status: String
  type: String
  dragon: Dragon_spacex
}

type CapsuleMission_spacex {
  flight: Int
  name: String
}

type Dragon_spacex {
  active: Boolean
  crew_capacity: Int
  description: String
  diameter: Distance_spacex
  dry_mass_kg: Int
  dry_mass_lb: Int
  first_flight: String
  heat_shield: DragonHeatShield_spacex
  height_w_trunk: Distance_spacex
  id: ID
  launch_payload_mass: Mass_spacex
  launch_payload_vol: Volume_spacex
  name: String
  orbit_duration_yr: Int
  pressurized_capsule: DragonPressurizedCapsule_spacex
  return_payload_mass: Mass_spacex
  return_payload_vol: Volume_spacex
  sidewall_angle_deg: Float
  thrusters: [DragonThrust_spacex]
  trunk: DragonTrunk_spacex
  type: String
  wikipedia: String
}

type Distance_spacex {
  feet: Float
  meters: Float
}

type DragonHeatShield_spacex {
  dev_partner: String
  material: String
  size_meters: Float
  temp_degrees: Int
}

type Mass_spacex {
  kg: Int
  lb: Int
}

type Volume_spacex {
  cubic_feet: Int
  cubic_meters: Int
}

type DragonPressurizedCapsule_spacex {
  payload_volume: Volume_spacex
}

type DragonThrust_spacex {
  amount: Int
  fuel_1: String
  fuel_2: String
  pods: Int
  thrust: Force_spacex
  type: String
}

type Force_spacex {
  kN: Float
  lbf: Float
}

type DragonTrunk_spacex {
  cargo: DragonTrunkCargo_spacex
  trunk_volume: Volume_spacex
}

type DragonTrunkCargo_spacex {
  solar_array: Int
  unpressurized_cargo: Boolean
}

type Info_spacex {
  ceo: String
  coo: String
  cto_propulsion: String
  cto: String
  employees: Int
  founded: Int
  founder: String
  headquarters: Address_spacex
  launch_sites: Int
  links: InfoLinks_spacex
  name: String
  summary: String
  test_sites: Int
  valuation: Float
  vehicles: Int
}

type Address_spacex {
  address: String
  city: String
  state: String
}

type InfoLinks_spacex {
  elon_twitter: String
  flickr: String
  twitter: String
  website: String
}

input CoresFind_spacex {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: String
  missions: String
  original_launch: Date_spacex
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

type Core_spacex {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: ID
  missions: [CapsuleMission_spacex]
  original_launch: Date_spacex
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

input HistoryFind_spacex {
  end: Date_spacex
  flight_number: Int
  id: ID
  start: Date_spacex
}

type History_spacex {
  details: String
  event_date_unix: Date_spacex
  event_date_utc: Date_spacex
  id: ID
  links: Link_spacex
  title: String
  flight: Launch_spacex
}

type Link_spacex {
  article: String
  reddit: String
  wikipedia: String
}

type Launch_spacex {
  details: String
  id: ID
  is_tentative: Boolean
  launch_date_local: Date_spacex
  launch_date_unix: Date_spacex
  launch_date_utc: Date_spacex
  launch_site: LaunchSite_spacex
  launch_success: Boolean
  launch_year: String
  links: LaunchLinks_spacex
  mission_id: [String]
  mission_name: String
  rocket: LaunchRocket_spacex
  static_fire_date_unix: Date_spacex
  static_fire_date_utc: Date_spacex
  telemetry: LaunchTelemetry_spacex
  tentative_max_precision: String
  upcoming: Boolean
  ships: [Ship_spacex]
}

type LaunchSite_spacex {
  site_id: String
  site_name_long: String
  site_name: String
}

type LaunchLinks_spacex {
  article_link: String
  flickr_images: [String]
  mission_patch_small: String
  mission_patch: String
  presskit: String
  reddit_campaign: String
  reddit_launch: String
  reddit_media: String
  reddit_recovery: String
  video_link: String
  wikipedia: String
}

type LaunchRocket_spacex {
  fairings: LaunchRocketFairings_spacex
  first_stage: LaunchRocketFirstStage_spacex
  rocket_name: String
  rocket_type: String
  rocket: Rocket_spacex
  second_stage: LaunchRocketSecondStage_spacex
}

type LaunchRocketFairings_spacex {
  recovered: Boolean
  recovery_attempt: Boolean
  reused: Boolean
  ship: String
}

type LaunchRocketFirstStage_spacex {
  cores: [LaunchRocketFirstStageCore_spacex]
}

type LaunchRocketFirstStageCore_spacex {
  block: Int
  core: Core_spacex
  flight: Int
  gridfins: Boolean
  land_success: Boolean
  landing_intent: Boolean
  landing_type: String
  landing_vehicle: String
  legs: Boolean
  reused: Boolean
}

type Rocket_spacex {
  active: Boolean
  boosters: Int
  company: String
  cost_per_launch: Int
  country: String
  description: String
  diameter: Distance_spacex
  engines: RocketEngines_spacex
  first_flight: Date_spacex
  first_stage: RocketFirstStage_spacex
  height: Distance_spacex
  id: ID
  landing_legs: RocketLandingLegs_spacex
  mass: Mass_spacex
  name: String
  payload_weights: [RocketPayloadWeight_spacex]
  second_stage: RocketSecondStage_spacex
  stages: Int
  success_rate_pct: Int
  type: String
  wikipedia: String
}

type RocketEngines_spacex {
  number: Int
  type: String
  version: String
  layout: String
  engine_loss_max: String
  propellant_1: String
  propellant_2: String
  thrust_sea_level: Force_spacex
  thrust_vacuum: Force_spacex
  thrust_to_weight: Float
}

type RocketFirstStage_spacex {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  reusable: Boolean
  thrust_sea_level: Force_spacex
  thrust_vacuum: Force_spacex
}

type RocketLandingLegs_spacex {
  number: Int
  material: String
}

type RocketPayloadWeight_spacex {
  id: String
  kg: Int
  lb: Int
  name: String
}

type RocketSecondStage_spacex {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  payloads: RocketSecondStagePayloads_spacex
  thrust: Force_spacex
}

type RocketSecondStagePayloads_spacex {
  option_1: String
  composite_fairing: RocketSecondStagePayloadCompositeFairing_spacex
}

type RocketSecondStagePayloadCompositeFairing_spacex {
  height: Distance_spacex
  diameter: Distance_spacex
}

type LaunchRocketSecondStage_spacex {
  block: Int
  payloads: [Payload_spacex]
}

type Payload_spacex {
  customers: [String]
  id: ID
  manufacturer: String
  nationality: String
  norad_id: [Int]
  orbit_params: PayloadOrbitParams_spacex
  orbit: String
  payload_mass_kg: Float
  payload_mass_lbs: Float
  payload_type: String
  reused: Boolean
}

type PayloadOrbitParams_spacex {
  apoapsis_km: Float
  arg_of_pericenter: Float
  eccentricity: Float
  epoch: Date_spacex
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  mean_anomaly: Float
  mean_motion: Float
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  semi_major_axis_km: Float
}

type LaunchTelemetry_spacex {
  flight_club: String
}

type Ship_spacex {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  image: String
  imo: Int
  missions: [ShipMission_spacex]
  mmsi: Int
  model: String
  name: String
  position: ShipLocation_spacex
  roles: [String]
  speed_kn: Float
  status: String
  successful_landings: Int
  type: String
  url: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
}

type ShipMission_spacex {
  flight: String
  name: String
}

type ShipLocation_spacex {
  latitude: Float
  longitude: Float
}

type HistoriesResult_spacex {
  result: Result_spacex
  data: [History_spacex]
}

type Result_spacex {
  totalCount: Int
}

type Landpad_spacex {
  attempted_landings: String
  details: String
  full_name: String
  id: ID
  landing_type: String
  location: Location_spacex
  status: String
  successful_landings: String
  wikipedia: String
}

type Location_spacex {
  latitude: Float
  longitude: Float
  name: String
  region: String
}

input LaunchFind_spacex {
  apoapsis_km: Float
  block: Int
  cap_serial: String
  capsule_reuse: String
  core_flight: Int
  core_reuse: String
  core_serial: String
  customer: String
  eccentricity: Float
  end: Date_spacex
  epoch: Date_spacex
  fairings_recovered: String
  fairings_recovery_attempt: String
  fairings_reuse: String
  fairings_reused: String
  fairings_ship: String
  gridfins: String
  id: ID
  inclination_deg: Float
  land_success: String
  landing_intent: String
  landing_type: String
  landing_vehicle: String
  launch_date_local: Date_spacex
  launch_date_utc: Date_spacex
  launch_success: String
  launch_year: String
  legs: String
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  mission_id: String
  mission_name: String
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: String
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: String
  rocket_id: String
  rocket_name: String
  rocket_type: String
  second_stage_block: String
  semi_major_axis_km: Float
  ship: String
  side_core1_reuse: String
  side_core2_reuse: String
  site_id: String
  site_name_long: String
  site_name: String
  start: Date_spacex
  tbd: String
  tentative_max_precision: String
  tentative: String
}

type LaunchesPastResult_spacex {
  result: Result_spacex
  data: [Launch_spacex]
}

type Launchpad_spacex {
  attempted_launches: Int
  details: String
  id: ID
  location: Location_spacex
  name: String
  status: String
  successful_launches: Int
  vehicles_launched: [Rocket_spacex]
  wikipedia: String
}

input MissionsFind_spacex {
  id: ID
  manufacturer: String
  name: String
  payload_id: String
}

type Mission_spacex {
  description: String
  id: ID
  manufacturers: [String]
  name: String
  twitter: String
  website: String
  wikipedia: String
  payloads: [Payload_spacex]
}

type MissionResult_spacex {
  result: Result_spacex
  data: [Mission_spacex]
}

input PayloadsFind_spacex {
  apoapsis_km: Float
  customer: String
  eccentricity: Float
  epoch: Date_spacex
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: ID
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: Boolean
  semi_major_axis_km: Float
}

type Roadster_spacex {
  apoapsis_au: Float
  details: String
  earth_distance_km: Float
  earth_distance_mi: Float
  eccentricity: Float
  epoch_jd: Float
  inclination: Float
  launch_date_unix: Date_spacex
  launch_date_utc: Date_spacex
  launch_mass_kg: Int
  launch_mass_lbs: Int
  longitude: Float
  mars_distance_km: Float
  mars_distance_mi: Float
  name: String
  norad_id: Int
  orbit_type: Float
  periapsis_arg: Float
  periapsis_au: Float
  period_days: Float
  semi_major_axis_au: Float
  speed_kph: Float
  speed_mph: Float
  wikipedia: String
}

type RocketsResult_spacex {
  result: Result_spacex
  data: [Rocket_spacex]
}

input ShipsFind_spacex {
  id: ID
  name: String
  model: String
  type: String
  role: String
  active: Boolean
  imo: Int
  mmsi: Int
  abs: Int
  class: Int
  weight_lbs: Int
  weight_kg: Int
  year_built: Int
  home_port: String
  status: String
  speed_kn: Int
  course_deg: Int
  latitude: Float
  longitude: Float
  successful_landings: Int
  attempted_landings: Int
  mission: String
}

type ShipsResult_spacex {
  result: Result_spacex
  data: [Ship_spacex]
}

type Mutation {
  spacex_delete_users(where: users_bool_exp_spacex!): users_mutation_response_spacex
  spacex_insert_users(objects: [users_insert_input_spacex!]!, on_conflict: users_on_conflict_spacex): users_mutation_response_spacex
  spacex_update_users(_set: users_set_input_spacex, where: users_bool_exp_spacex!): users_mutation_response_spacex
}

type users_mutation_response_spacex {
  affected_rows: Int!
  returning: [users_spacex!]!
}

input users_insert_input_spacex {
  id: uuid_spacex
  name: String
  rocket: String
  timestamp: timestamptz_spacex
  twitter: String
}

input users_on_conflict_spacex {
  constraint: users_constraint_spacex!
  update_columns: [users_update_column_spacex!]!
}

enum users_constraint_spacex {
  users_pkey
}

enum users_update_column_spacex {
  id
  name
  rocket
  timestamp
  twitter
}

input users_set_input_spacex {
  id: uuid_spacex
  name: String
  rocket: String
  timestamp: timestamptz_spacex
  twitter: String
}

type Subscription {
  spacex_users(distinct_on: [users_select_column_spacex!], limit: Int, offset: Int, order_by: [users_order_by_spacex!], where: users_bool_exp_spacex): [users_spacex!]!
  spacex_users_aggregate(distinct_on: [users_select_column_spacex!], limit: Int, offset: Int, order_by: [users_order_by_spacex!], where: users_bool_exp_spacex): users_aggregate_spacex!
  spacex_users_by_pk(id: uuid_spacex!): users_spacex
}

enum conflict_action_spacex {
  ignore
  update
}

input users_aggregate_order_by_spacex {
  count: order_by_spacex
  max: users_max_order_by_spacex
  min: users_min_order_by_spacex
}

input users_max_order_by_spacex {
  name: order_by_spacex
  rocket: order_by_spacex
  timestamp: order_by_spacex
  twitter: order_by_spacex
}

input users_min_order_by_spacex {
  name: order_by_spacex
  rocket: order_by_spacex
  timestamp: order_by_spacex
  twitter: order_by_spacex
}

input users_arr_rel_insert_input_spacex {
  data: [users_insert_input_spacex!]!
  on_conflict: users_on_conflict_spacex
}

input users_obj_rel_insert_input_spacex {
  data: users_insert_input_spacex!
  on_conflict: users_on_conflict_spacex
}

scalar ObjectID_spacex

type CoreMission_spacex {
  name: String
  flight: Int
}

enum Claim {
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}
